{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./Tray.css';import TrayButton,{TYPE_MUTE_CAMERA,TYPE_MUTE_MIC,TYPE_SCREEN,TYPE_LEAVE,TYPE_CHAT}from'../TrayButton/TrayButton';import InputSelector from'../InputSelector/InputSelector';import Chat from'../Chat/Chat';import CallObjectContext from'../../CallObjectContext';import{logDailyEvent}from'../../logUtils';import DailyIframe from'@daily-co/daily-js';function useForceUpdate(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// integer state\nreturn function(){return setValue(function(value){return value+1;});};// update the state to force render\n}/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */function getStreamStates(callObject){var isCameraMuted,isMicMuted,isSharingScreen=false;if(callObject&&callObject.participants()&&callObject.participants().local){var localParticipant=callObject.participants().local;isCameraMuted=!localParticipant.video;isMicMuted=!localParticipant.audio;isSharingScreen=localParticipant.screen;}return[isCameraMuted,isMicMuted,isSharingScreen];}/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */export default function Tray(props){var callObject=useContext(CallObjectContext);var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCameraMuted=_useState4[0],setCameraMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isMicMuted=_useState6[0],setMicMuted=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isSharingScreen=_useState8[0],setSharingScreen=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),displayChat=_useState10[0],setChatDisplay=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),highlightedChat=_useState12[0],setChatHighlight=_useState12[1];var forceUpdate=useForceUpdate();var micCaret=React.createRef();var micSettings=React.createRef();var camCaret=React.createRef();var camSettings=React.createRef();window.updateTray=function(){forceUpdate();};var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),showMicSettings=_useState14[0],setShowMicSettings=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),showCamSettings=_useState16[0],setShowCamSettings=_useState16[1];function toggleCamera(){callObject.setLocalVideo(isCameraMuted);}function toggleMic(){callObject.setLocalAudio(isMicMuted);}useEffect(function(){document.addEventListener(\"mousedown\",handleClickOutside);return function cleanup(){document.removeEventListener(\"mousedown\",handleClickOutside);};});var handleClickOutside=function handleClickOutside(event){console.log('handling click');if(micSettings.current&&!micSettings.current.contains(event.target)&&!micCaret.current.contains(event.target)){setShowMicSettings(false);}else if(camSettings.current&&!camSettings.current.contains(event.target)&&!camCaret.current.contains(event.target)){setShowCamSettings(false);}};// function toggleSharingScreen() {\n//   isSharingScreen\n//     ? callObject.stopScreenShare()\n//     : navigator.mediaDevices.getDisplayMedia({\n//       video: true,\n//       audio: true,\n//     }).then((stream)=>callObject.startScreenShare({\n//       mediaStream:stream}))\n//       // share getDisplayMedia stream\n//       // mediaStream: window.screenStream,\n//       // share getDisplayMedia audio track only\n//       // mediaStream: window.screenStream,\n//       // share local cam via screen stream\n//       // mediaStream: window.localCam,\n//       // share only audio from local cam via screen stream\n//       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n//     // });\n// }\nfunction leaveCall(){props.onClickLeaveCall&&props.onClickLeaveCall();}function toggleChat(){setChatDisplay(!displayChat);if(highlightedChat){setChatHighlight(!highlightedChat);}}function handleNewChat(){setChatHighlight(!highlightedChat);}function openScreenShareWindow(){window.open(\"http://\"+window.location.host+\"/share\",\"test\",\"width=300, height=300\");}/**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */useEffect(function(){if(!callObject)return;function handleNewParticipantsState(event){event&&logDailyEvent(event);var _getStreamStates=getStreamStates(callObject),_getStreamStates2=_slicedToArray(_getStreamStates,3),isCameraMuted=_getStreamStates2[0],isMicMuted=_getStreamStates2[1],isSharingScreen=_getStreamStates2[2];setCameraMuted(isCameraMuted);setMicMuted(isMicMuted);setSharingScreen(isSharingScreen);}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\ncallObject.on('participant-updated',handleNewParticipantsState);// Stop listening for changes in state\nreturn function cleanup(){callObject.off('participant-updated',handleNewParticipantsState);};},[callObject]);return/*#__PURE__*/React.createElement(\"div\",{className:window.amAdmin?\"tray-with-sidebar\":\"tray\"},/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_CAMERA// disabled={props.disabled}\n,highlighted:isCameraMuted,onClick:toggleCamera}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowCamSettings(!showCamSettings);},style:{position:'absolute',left:'55px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:camCaret},\"^\"),showCamSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"video\",page:\"main\",ref:camSettings}):null),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_MIC// disabled={props.disabled}\n,highlighted:isMicMuted,onClick:toggleMic}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowMicSettings(!showMicSettings);},style:{position:'absolute',left:'125px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:micCaret},\"^\"),showMicSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"audio\",page:\"main\",ref:micSettings}):null),DailyIframe.supportedBrowser().supportsScreenShare&&window.amAdmin&&/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_SCREEN// disabled={props.disabled}\n,highlighted:isSharingScreen,onClick:openScreenShareWindow// onClick={toggleSharingScreen}\n}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_CHAT// disabled={props.disabled}\n,highlighted:highlightedChat,onClick:toggleChat}),/*#__PURE__*/React.createElement(Chat,{onClickDisplay:displayChat,notification:handleNewChat}),/*#__PURE__*/React.createElement(\"div\",{className:\"status-display\"},/*#__PURE__*/React.createElement(\"div\",{style:{height:'30px'}},\"Roleplay:  \\xA0\",window.sessionState.isActive?/*#__PURE__*/React.createElement(\"div\",{className:\"display-card active\"},\"Live\"):/*#__PURE__*/React.createElement(\"div\",{className:\"display-card paused\"},\"Paused\")),/*#__PURE__*/React.createElement(\"div\",{className:\"vertical-line\"}),!window.sessionState.isActive||window.myRole!=='Admin'&&window.myRole!=='Attendee'?/*#__PURE__*/React.createElement(\"div\",{style:{height:'30px'}},\"My Role: \\xA0\",window.myRole=='Admin'||window.myRole=='Attendee'?/*#__PURE__*/React.createElement(\"span\",{className:\"display-card role\"},\"Viewer\"):/*#__PURE__*/React.createElement(\"span\",{className:\"display-card role\"},window.myRole.match(/\\D/g).join(''))):/*#__PURE__*/React.createElement(\"div\",{className:\"my-view\"},\"My View: \\xA0\",/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"form\",{action:\"\"},/*#__PURE__*/React.createElement(\"fieldset\",{style:{border:'none'}},/*#__PURE__*/React.createElement(\"select\",{className:\"my-view-selector\",onChange:function onChange(e){return window.setViewMode(e.target.value);}},/*#__PURE__*/React.createElement(\"option\",{value:\"Seller\"},\"Seller\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow1\",selected:true},\"Shadow 1\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow2\"},\"Shadow 2\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow3\"},\"Shadow 3\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow4\"},\"Shadow 4\"),/*#__PURE__*/React.createElement(\"option\",{value:\"All\"},\"All\"))))))),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_LEAVE,disabled:props.disabled,newButtonGroup:true,highlighted:true,onClick:leaveCall}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","InputSelector","Chat","CallObjectContext","logDailyEvent","DailyIframe","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","forceUpdate","micCaret","createRef","micSettings","camCaret","camSettings","window","updateTray","showMicSettings","setShowMicSettings","showCamSettings","setShowCamSettings","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","document","addEventListener","handleClickOutside","cleanup","removeEventListener","event","console","log","current","contains","target","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","openScreenShareWindow","open","location","host","handleNewParticipantsState","on","off","amAdmin","position","left","bottom","supportedBrowser","supportsScreenShare","height","sessionState","isActive","myRole","match","join","border","e","setViewMode","disabled"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n  const camCaret = React.createRef();\n  const camSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  }\n\n  const [showMicSettings,setShowMicSettings] = useState(false);\n  const [showCamSettings,setShowCamSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n\n  useEffect(()=> {\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n\n return function cleanup() {\n    document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  })\n\n  const handleClickOutside = (event) => {\n    console.log('handling click');\n    if (micSettings.current &&\n      !micSettings.current.contains(event.target) &&\n      !micCaret.current.contains(event.target)\n    ) {\n      setShowMicSettings(false);\n    } else if (camSettings.current &&\n      !camSettings.current.contains(event.target) &&\n      !camCaret.current.contains(event.target)\n    ) {\n      setShowCamSettings(false);\n    } \n    \n  }\n\n  // function toggleSharingScreen() {\n\n    \n  //   isSharingScreen\n  //     ? callObject.stopScreenShare()\n  //     : navigator.mediaDevices.getDisplayMedia({\n  //       video: true,\n  //       audio: true,\n  //     }).then((stream)=>callObject.startScreenShare({\n  //       mediaStream:stream}))\n  //       // share getDisplayMedia stream\n  //       // mediaStream: window.screenStream,\n\n  //       // share getDisplayMedia audio track only\n        \n  //       // mediaStream: window.screenStream,\n\n  //       // share local cam via screen stream\n  //       // mediaStream: window.localCam,\n\n  //       // share only audio from local cam via screen stream\n  //       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n  //     // });\n  // }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow () {\n    window.open(\"http://\" + window.location.host + \"/share\",\"test\",\"width=300, height=300\");\n\n  }\n\n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n\n\n  return (\n    <div className={window.amAdmin ? \"tray-with-sidebar\" : \"tray\"}>\n\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        // disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      \n      <div onClick={()=>{setShowCamSettings(!showCamSettings)}}  style={{position:'absolute',left:'55px', bottom:'23px',}}>\n        <p className=\"caret\" ref={camCaret}>^</p>\n                {showCamSettings ? \n                (<InputSelector type='video' page='main' ref={camSettings}/>)\n                : \n                null}\n      </div>\n      \n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        // disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      <div onClick={()=>{setShowMicSettings(!showMicSettings)}}  style={{position:'absolute',left:'125px', bottom:'23px'}}>\n      {/* <img src={Caret} style={{position:'absolute',left:'52px', bottom:'42px', height:'18px',fontSize:'15px'}} /> */}\n      \n      <p className=\"caret\" ref={micCaret}>^</p>\n              {showMicSettings ? \n              (<InputSelector type='audio' page='main' ref={micSettings}/>)\n              : \n              null}\n              \n      </div>\n      {DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          // disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={openScreenShareWindow}\n          // onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        // disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n        \n\n\n\n      {/* Display room status and either my role or room selector +  */}\n          <div className='status-display'>\n\n            <div style={{height:'30px'}}>\n               Roleplay:  &nbsp;            \n                            {window.sessionState.isActive ? \n                              <div className='display-card active'>Live</div>\n                              :\n                              <div className='display-card paused'>Paused</div>\n                            }\n              </div>\n\n            <div className='vertical-line'></div>\n\n            {/* if session is paused or I have a role, display my role, otherwise show room selector */}\n            {!window.sessionState.isActive || (window.myRole!=='Admin' && window.myRole!=='Attendee')\n            \n                ?   ( <div style={{height:'30px'}}>\n                            My Role: &nbsp;\n                            {window.myRole=='Admin' || window.myRole=='Attendee' \n\n                            ? <span className='display-card role'> \n                                Viewer\n                              </span>\n                            : <span className='display-card role'> \n                                {window.myRole.match(/\\D/g).join('')} \n                              </span>\n                            \n                            }\n                       </div>\n                    )\n            : ( <div className='my-view'>\n                        My View: &nbsp;\n                            <span > \n                              <form action = ''>\n                                <fieldset style={{border:'none'}}>\n                                    <select className='my-view-selector' onChange = {(e)=>window.setViewMode(e.target.value)}>\n                                        <option value = 'Seller'>Seller</option>\n                                        <option value = 'Shadow1' selected>Shadow 1</option>\n                                        <option value = 'Shadow2'>Shadow 2</option>\n                                        <option value = 'Shadow3'>Shadow 3</option>\n                                        <option value = 'Shadow4'>Shadow 4</option>\n                                        <option value = 'All'>All</option>\n                                    </select>\n                                </fieldset>\n                              </form>\n                            </span>\n                  </div>\n              )\n            \n              \n            }\n                            \n          \n             \n\n\n          </div>\n     \n      \n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}