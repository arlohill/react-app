{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/UIStateProvider.js\";\nimport React, { useCallback, createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDeepCompareMemo } from 'use-deep-compare';\nexport const UIStateContext = createContext();\nexport const VIEW_MODE_GRID = 'grid';\nexport const VIEW_MODE_SPEAKER = 'speaker';\nexport const VIEW_MODE_MOBILE = 'mobile';\nexport const UIStateProvider = ({\n  asides = [],\n  modals = [],\n  customTrayComponent,\n  children\n}) => {\n  const [pinnedId, setPinnedId] = useState(null);\n  const [preferredViewMode, setPreferredViewMode] = useState(VIEW_MODE_SPEAKER);\n  const [viewMode, setViewMode] = useState(preferredViewMode);\n  const [isShowingScreenshare, setIsShowingScreenshare] = useState(false);\n  const [showParticipantsBar, setShowParticipantsBar] = useState(true);\n  const [showAside, setShowAside] = useState();\n  const [activeModals, setActiveModals] = useState({});\n  const [customCapsule, setCustomCapsule] = useState();\n  const openModal = useCallback(modalName => {\n    setActiveModals(prevState => ({ ...prevState,\n      [modalName]: true\n    }));\n  }, []);\n  const closeModal = useCallback(modalName => {\n    if (!modalName) {\n      setActiveModals({});\n    }\n\n    setActiveModals(prevState => ({ ...prevState,\n      [modalName]: false\n    }));\n  }, []);\n  const currentModals = useDeepCompareMemo(() => activeModals, [activeModals]);\n  const toggleAside = useCallback(newAside => {\n    setShowAside(p => p === newAside ? null : newAside);\n  }, []);\n  const closeAside = useCallback(() => {\n    setShowAside(null);\n  }, []);\n  useEffect(() => {\n    if (pinnedId || isShowingScreenshare) {\n      setViewMode(VIEW_MODE_SPEAKER);\n    } else {\n      setViewMode(preferredViewMode);\n    }\n  }, [isShowingScreenshare, pinnedId, preferredViewMode]);\n  return /*#__PURE__*/React.createElement(UIStateContext.Provider, {\n    value: {\n      asides,\n      modals,\n      customTrayComponent,\n      viewMode,\n      openModal,\n      closeModal,\n      closeAside,\n      showParticipantsBar,\n      currentModals,\n      toggleAside,\n      pinnedId,\n      showAside,\n      setShowAside,\n      setIsShowingScreenshare,\n      setPreferredViewMode,\n      setPinnedId,\n      setShowParticipantsBar,\n      customCapsule,\n      setCustomCapsule\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, children);\n};\nUIStateProvider.propTypes = {\n  children: PropTypes.node,\n  asides: PropTypes.arrayOf(PropTypes.func),\n  modals: PropTypes.arrayOf(PropTypes.func),\n  customTrayComponent: PropTypes.node\n};\nexport const useUIState = () => useContext(UIStateContext);","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/UIStateProvider.js"],"names":["React","useCallback","createContext","useContext","useState","useEffect","PropTypes","useDeepCompareMemo","UIStateContext","VIEW_MODE_GRID","VIEW_MODE_SPEAKER","VIEW_MODE_MOBILE","UIStateProvider","asides","modals","customTrayComponent","children","pinnedId","setPinnedId","preferredViewMode","setPreferredViewMode","viewMode","setViewMode","isShowingScreenshare","setIsShowingScreenshare","showParticipantsBar","setShowParticipantsBar","showAside","setShowAside","activeModals","setActiveModals","customCapsule","setCustomCapsule","openModal","modalName","prevState","closeModal","currentModals","toggleAside","newAside","p","closeAside","propTypes","node","arrayOf","func","useUIState"],"mappings":"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","sourcesContent":["import React, {\n    useCallback,\n    createContext,\n    useContext,\n    useState,\n    useEffect,\n  } from 'react';\n  import PropTypes from 'prop-types';\n  import { useDeepCompareMemo } from 'use-deep-compare';\n  \n  export const UIStateContext = createContext();\n  \n  export const VIEW_MODE_GRID = 'grid';\n  export const VIEW_MODE_SPEAKER = 'speaker';\n  export const VIEW_MODE_MOBILE = 'mobile';\n  \n  export const UIStateProvider = ({\n    asides = [],\n    modals = [],\n    customTrayComponent,\n    children,\n  }) => {\n    const [pinnedId, setPinnedId] = useState(null);\n    const [preferredViewMode, setPreferredViewMode] = useState(VIEW_MODE_SPEAKER);\n    const [viewMode, setViewMode] = useState(preferredViewMode);\n    const [isShowingScreenshare, setIsShowingScreenshare] = useState(false);\n    const [showParticipantsBar, setShowParticipantsBar] = useState(true);\n    const [showAside, setShowAside] = useState();\n    const [activeModals, setActiveModals] = useState({});\n    const [customCapsule, setCustomCapsule] = useState();\n  \n    const openModal = useCallback((modalName) => {\n      setActiveModals((prevState) => ({\n        ...prevState,\n        [modalName]: true,\n      }));\n    }, []);\n  \n    const closeModal = useCallback((modalName) => {\n      if (!modalName) {\n        setActiveModals({});\n      }\n  \n      setActiveModals((prevState) => ({\n        ...prevState,\n        [modalName]: false,\n      }));\n    }, []);\n  \n    const currentModals = useDeepCompareMemo(() => activeModals, [activeModals]);\n  \n    const toggleAside = useCallback((newAside) => {\n      setShowAside((p) => (p === newAside ? null : newAside));\n    }, []);\n  \n    const closeAside = useCallback(() => {\n      setShowAside(null);\n    }, []);\n  \n    useEffect(() => {\n      if (pinnedId || isShowingScreenshare) {\n        setViewMode(VIEW_MODE_SPEAKER);\n      } else {\n        setViewMode(preferredViewMode);\n      }\n    }, [isShowingScreenshare, pinnedId, preferredViewMode]);\n  \n    return (\n      <UIStateContext.Provider\n        value={{\n          asides,\n          modals,\n          customTrayComponent,\n          viewMode,\n          openModal,\n          closeModal,\n          closeAside,\n          showParticipantsBar,\n          currentModals,\n          toggleAside,\n          pinnedId,\n          showAside,\n          setShowAside,\n          setIsShowingScreenshare,\n          setPreferredViewMode,\n          setPinnedId,\n          setShowParticipantsBar,\n          customCapsule,\n          setCustomCapsule,\n        }}\n      >\n        {children}\n      </UIStateContext.Provider>\n    );\n  };\n  \n  UIStateProvider.propTypes = {\n    children: PropTypes.node,\n    asides: PropTypes.arrayOf(PropTypes.func),\n    modals: PropTypes.arrayOf(PropTypes.func),\n    customTrayComponent: PropTypes.node,\n  };\n  \n  export const useUIState = () => useContext(UIStateContext);"]},"metadata":{},"sourceType":"module"}