{"ast":null,"code":"import { useState, useContext, useEffect } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext';\n\nfunction useUpdateUserList() {\n  const {\n    test,\n    setTest\n  } = useState(0);\n\n  const update = () => setTest(prev => prev + 1);\n\n  window.update = update;\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray,\n    // setName, \n    // setRole,\n    setUserList,\n    // setViewMode,\n    // setCamOnAtSessionStart,\n    // setMicOnAtSessionStart,\n    // setAmAdmin, \n    setAdminPresent\n  } = useContext(MyContext);\n  useEffect(() => {\n    function getUserList() {\n      return new Promise(resolve => {\n        console.log('*****UPDATING PARTICIPANT LIst******');\n        let userListIncludesAdmin = false; //default\n\n        let ps = callObject.participants();\n        let workingUserList = {\n          names: [],\n          sessionIdFor: {}\n        };\n\n        for (const p in ps) {\n          let thisUserName = ps[p].user_name;\n          let thisSessionId = ps[p].session_id;\n          workingUserList.names.push(thisUserName); //add each user_name with its sessionID to UserList\n\n          workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n\n          if (thisUserName.includes('_Admin') && p !== 'local') {\n            userListIncludesAdmin = true;\n          }\n        }\n\n        ;\n        userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n        workingUserList.names.sort(); //alphebetize that list \n\n        console.log(`here's the userList: ${workingUserList.names}`);\n        resolve([workingUserList, userListIncludesAdmin]);\n      });\n    }\n\n    console.log('going to get user list');\n    getUserList().then(([workingUserList, userListIncludesAdmin]) => {\n      console.log(`************now the userList is: ${workingUserList.names}`); //print userList\n\n      setUserList(workingUserList);\n      console.log(`userListIncludesAdmin: ${userListIncludesAdmin}`);\n      setAdminPresent(userListIncludesAdmin);\n    });\n  }, [sessionState, test]);\n}\n\nexport default useUpdateUserList;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/hooks/useUpdateUserList.js"],"names":["useState","useContext","useEffect","SessionStateContext","MyContext","CallObjectContext","useUpdateUserList","test","setTest","update","prev","window","callObject","session","sessionState","setSessionState","myStateArray","setUserList","setAdminPresent","getUserList","Promise","resolve","console","log","userListIncludesAdmin","ps","participants","workingUserList","names","sessionIdFor","p","thisUserName","user_name","thisSessionId","session_id","push","includes","sort","then"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAIA,SAASC,iBAAT,GAA6B;AAEzB,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBR,QAAQ,CAAC,CAAD,CAAhC;;AACA,QAAMS,MAAM,GAAG,MAAMD,OAAO,CAAEE,IAAD,IAAQA,IAAI,GAAC,CAAd,CAA5B;;AACAC,EAAAA,MAAM,CAACF,MAAP,GAAcA,MAAd;AAEA,QAAMG,UAAU,GAAGX,UAAU,CAACI,iBAAD,CAA7B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcZ,UAAU,CAACE,mBAAD,CAA9B;AACA,QAAM,CAAEW,YAAF,EAAeC,eAAf,IAAkCF,OAAxC;AACA,QAAM;AAAEG,IAAAA,YAAF;AACF;AACA;AACAC,IAAAA,WAHE;AAIF;AACA;AACA;AACA;AACAC,IAAAA;AARE,MASEjB,UAAU,CAACG,SAAD,CATlB;AAYAF,EAAAA,SAAS,CAAC,MAAK;AAEX,aAASiB,WAAT,GAAuB;AAEnB,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAW;AAE1BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,YAAIC,qBAAqB,GAAC,KAA1B,CAH0B,CAGS;;AACnC,YAAIC,EAAE,GAACb,UAAU,CAACc,YAAX,EAAP;AACA,YAAIC,eAAe,GAAG;AAClBC,UAAAA,KAAK,EAAE,EADW;AAElBC,UAAAA,YAAY,EAAE;AAFI,SAAtB;;AAKA,aAAK,MAAMC,CAAX,IAAgBL,EAAhB,EAAoB;AAChB,cAAIM,YAAY,GAAGN,EAAE,CAACK,CAAD,CAAF,CAAME,SAAzB;AACA,cAAIC,aAAa,GAAGR,EAAE,CAACK,CAAD,CAAF,CAAMI,UAA1B;AACAP,UAAAA,eAAe,CAACC,KAAhB,CAAsBO,IAAtB,CAA2BJ,YAA3B,EAHgB,CAG+B;;AAC/CJ,UAAAA,eAAe,CAACE,YAAhB,CAA6BE,YAA7B,IAA6CE,aAA7C;;AACA,cAAIF,YAAY,CAACK,QAAb,CAAsB,QAAtB,KAAmCN,CAAC,KAAG,OAA3C,EAAoD;AAChDN,YAAAA,qBAAqB,GAAG,IAAxB;AACH;AACJ;;AAAA;AAEDA,QAAAA,qBAAqB,GAAGF,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAH,GAAqCD,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAA1D;AACAI,QAAAA,eAAe,CAACC,KAAhB,CAAsBS,IAAtB,GArB0B,CAqBU;;AACpCf,QAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBI,eAAe,CAACC,KAAM,EAA1D;AACAP,QAAAA,OAAO,CAAC,CAACM,eAAD,EAAiBH,qBAAjB,CAAD,CAAP;AACH,OAxBM,CAAP;AAyBH;;AAELF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEAJ,IAAAA,WAAW,GAAGmB,IAAd,CAAmB,CAAC,CAACX,eAAD,EAAiBH,qBAAjB,CAAD,KAA2C;AAC1DF,MAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCI,eAAe,CAACC,KAAM,EAAtE,EAD0D,CACiB;;AAC3EX,MAAAA,WAAW,CAACU,eAAD,CAAX;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBC,qBAAsB,EAA5D;AACAN,MAAAA,eAAe,CAACM,qBAAD,CAAf;AAEH,KAND;AASC,GA1CQ,EA0CP,CAACV,YAAD,EAAcP,IAAd,CA1CO,CAAT;AA8CH;;AAED,eAAeD,iBAAf","sourcesContent":["import { useState, useContext, useEffect } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext'\n\n\n\nfunction useUpdateUserList() {\n\n    const {test, setTest} = useState(0);\n    const update = () => setTest((prev)=>prev+1);\n    window.update=update;\n\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;    \n    const { myStateArray, \n        // setName, \n        // setRole,\n        setUserList,\n        // setViewMode,\n        // setCamOnAtSessionStart,\n        // setMicOnAtSessionStart,\n        // setAmAdmin, \n        setAdminPresent,\n        } = useContext(MyContext);\n\n\n    useEffect(()=> {\n\n        function getUserList() {\n\n            return new Promise((resolve)=>{\n\n                console.log('*****UPDATING PARTICIPANT LIst******');\n                let userListIncludesAdmin=false;   //default\n                let ps=callObject.participants(); \n                let workingUserList = {\n                    names: [],\n                    sessionIdFor: {},\n                }\n            \n                for (const p in ps) {\n                    let thisUserName = ps[p].user_name;\n                    let thisSessionId = ps[p].session_id;\n                    workingUserList.names.push(thisUserName);      //add each user_name with its sessionID to UserList\n                    workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n                    if (thisUserName.includes('_Admin') && p!=='local') {\n                        userListIncludesAdmin = true;\n                    } \n                };\n            \n                userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n                workingUserList.names.sort();       //alphebetize that list \n                console.log(`here's the userList: ${workingUserList.names}`);\n                resolve([workingUserList,userListIncludesAdmin]);\n            });\n        }\n\n    console.log('going to get user list');\n\n    getUserList().then(([workingUserList,userListIncludesAdmin])=>{\n        console.log(`************now the userList is: ${workingUserList.names}`);  //print userList\n        setUserList(workingUserList);\n        console.log(`userListIncludesAdmin: ${userListIncludesAdmin}`)\n        setAdminPresent(userListIncludesAdmin);\n\n    })\n        \n\n    },[sessionState,test]);\n\n    \n\n} \n\nexport default useUpdateUserList;\n"]},"metadata":{},"sourceType":"module"}