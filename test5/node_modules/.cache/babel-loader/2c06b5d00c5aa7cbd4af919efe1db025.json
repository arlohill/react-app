{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base asset path for the Mux API\n * */\n\n\nvar PATH = '/video/v1/assets';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nvar buildBasePath = function buildBasePath(assetId) {\n  return \"\".concat(PATH, \"/\").concat(assetId);\n};\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\n\n\nvar Assets = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Assets, _Base);\n\n  var _super = _createSuper(Assets);\n\n  function Assets() {\n    _classCallCheck(this, Assets);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Assets, [{\n    key: \"create\",\n\n    /**\n     * Creates a Mux asset with the specified JSON parameters\n     * @param {Object} params - Asset JSON parameters (e.g input)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Create an asset\n     * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-asset\n     */\n    value: function create(params) {\n      if (!params) {\n        return Promise.reject(new Error('Params are required for creating an asset'));\n      }\n\n      return this.http.post(PATH, params);\n    }\n    /**\n     * Deletes a Mux asset\n     * @param {string} assetId - The ID for the asset intended for deletion\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete an asset\n     * Video.Assets.del(assetId);\n     *\n     * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(assetId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required to delete an asset'));\n      }\n\n      return this.http.delete(buildBasePath(assetId));\n    }\n    /**\n     * Get an asset\n     * @param {string} assetId - The ID for the asset\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get an asset\n     * Video.Assets.get(assetId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-asset\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(assetId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required to get an asset'));\n      }\n\n      return this.http.get(buildBasePath(assetId));\n    }\n    /**\n     * Get input info for an asset\n     * @param {string} assetId - The ID for the asset\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get input info for an asset\n     * Video.Assets.inputInfo(assetId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info\n     */\n\n  }, {\n    key: \"inputInfo\",\n    value: function inputInfo(assetId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required to get input-info'));\n      }\n\n      return this.http.get(\"\".concat(buildBasePath(assetId), \"/input-info\"));\n    }\n    /**\n     * List all assets for a Mux Environment (tied to your access token)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // List all assets for a Mux Environment\n     * Video.Assets.list();\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/list-assets\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n    /**\n     * Return an asset playback id\n     * @param {string} assetId - The ID for the asset\n     * @param {string} playbackId - The ID for the playbackId\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Retrieve an asset playbackId\n     * Video.Assets.playbackId(assetId, playbackId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n     */\n\n  }, {\n    key: \"playbackId\",\n    value: function playbackId(assetId, _playbackId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!_playbackId) {\n        return Promise.reject(new Error('A playback ID is required'));\n      }\n\n      return this.http.get(\"\".concat(buildBasePath(assetId), \"/playback-ids/\").concat(_playbackId));\n    }\n    /**\n     * Create an asset playback id\n     * @param {string} assetId - The ID for the asset\n     * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Create an asset playback ID\n     * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id\n     */\n\n  }, {\n    key: \"createPlaybackId\",\n    value: function createPlaybackId(assetId, params) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!params) {\n        return Promise.reject(new Error('Playback ID params are required'));\n      }\n\n      return this.http.post(\"\".concat(buildBasePath(assetId), \"/playback-ids\"), params);\n    }\n    /**\n     * Delete an asset playback ID\n     * @param {string} assetId - The ID for the asset\n     * @param {string} playbackId - The ID for the asset playback ID to delete\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete an asset playback ID\n     * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id\n     */\n\n  }, {\n    key: \"deletePlaybackId\",\n    value: function deletePlaybackId(assetId, playbackId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!playbackId) {\n        return Promise.reject(new Error('A playback ID is required'));\n      }\n\n      return this.http.delete(\"\".concat(buildBasePath(assetId), \"/playback-ids/\").concat(playbackId));\n    }\n    /**\n     * Create a subtitle text track\n     * @param {string} assetId - The ID for the asset\n     * @param {Object} params - subtitle text track JSON parameters\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Create an asset text track\n     * Video.Assets.createTrack(assetId, {\n     *   url: \"https://example.com/myVIdeo_en.srt\",\n     *   type: \"text\",\n     *   text_type: \"subtitles\",\n     *   language_code: \"en-US\",\n     * });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-asset-track\n     */\n\n  }, {\n    key: \"createTrack\",\n    value: function createTrack(assetId, params) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!params) {\n        return Promise.reject(new Error('Text track params are required'));\n      }\n\n      return this.http.post(\"\".concat(buildBasePath(assetId), \"/tracks\"), params);\n    }\n    /**\n     * Delete an asset text track\n     * @param {string} assetId - The ID for the asset\n     * @param {string} trackId - The ID for the asset text track to delete\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete an asset text track\n     * Video.Assets.deleteTrack(assetId, trackId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track\n     */\n\n  }, {\n    key: \"deleteTrack\",\n    value: function deleteTrack(assetId, trackId) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!trackId) {\n        return Promise.reject(new Error('A track ID is required'));\n      }\n\n      return this.http.delete(\"\".concat(buildBasePath(assetId), \"/tracks/\").concat(trackId));\n    }\n    /**\n     * Update mp4 support for an asset\n     * @param {Object} params - mp4 support JSON parameters\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Updates mp4 support for an asset\n     * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support\n     */\n\n  }, {\n    key: \"updateMp4Support\",\n    value: function updateMp4Support(assetId, params) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!(params && params.mp4_support)) {\n        return Promise.reject(new Error('params.mp4_support is required'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(assetId), \"/mp4-support\"), params);\n    }\n    /**\n     * Update master access for an asset\n     * @param {Object} params - master access JSON parameters\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Update master access for an asset\n     * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access\n     */\n\n  }, {\n    key: \"updateMasterAccess\",\n    value: function updateMasterAccess(assetId, params) {\n      if (!assetId) {\n        return Promise.reject(new Error('An asset ID is required'));\n      }\n\n      if (!(params && params.master_access)) {\n        return Promise.reject(new Error('params.master_access is required'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(assetId), \"/master-access\"), params);\n    }\n  }]);\n\n  return Assets;\n}(Base);\n\nmodule.exports = Assets;","map":null,"metadata":{},"sourceType":"script"}