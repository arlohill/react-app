{"ast":null,"code":"import _toConsumableArray from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect}from'react';import CallObjectContext from'../../../CallObjectContext';import MyContext from'../../../MyContext';import SessionStateContext from'../../../SessionStateContext';import'./Chat.css';export default function Chat(props){var callObject=useContext(CallObjectContext);var _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputValue=_useState2[0],setInputValue=_useState2[1];var _useContext=useContext(SessionStateContext),session=_useContext.session;var _session=_slicedToArray(session,2),sessionState=_session[0],setSessionState=_session[1];var _useContext2=useContext(MyContext),myStateArray=_useContext2.myStateArray;var _myStateArray=_slicedToArray(myStateArray,1),myState=_myStateArray[0];var chatHistory=sessionState.chatHistory;var setChatHistory=function setChatHistory(newHistoryObject){setSessionState(function(prev){return _objectSpread(_objectSpread({},prev),{},{chatHistory:[].concat(_toConsumableArray(prev.chatHistory),[newHistoryObject])});});};var lastMessage=React.createRef();var handleChange=function handleChange(event){setInputValue(event.target.value);};function handleSubmit(event){event.preventDefault();if(!inputValue){return;}callObject.sendAppMessage({type:'chat',message:inputValue},'*');var name=callObject.participants().local.user_name.includes('_Admin')?callObject.participants().local.user_name.split('_Admin').join(''):callObject.participants().local.user_name;setChatHistory({sender:name,message:inputValue});setInputValue('');}/**\n   * Update chat state based on a message received to all participants.\n   *\n   */useEffect(function(){if(!callObject){return;}function handleAppMessage(event){var participants=callObject.participants();var name=participants[event.fromId].user_name.includes('_Admin')?participants[event.fromId].user_name.split('_Admin').join(''):participants[event.fromId].user_name;event.data.type=='chat'&&setChatHistory({sender:name,message:event.data.message});// Make other icons light up\nevent.data.type=='chat'&&props.notification();}callObject.on('app-message',handleAppMessage);return function cleanup(){callObject.off('app-message',handleAppMessage);};},[callObject,chatHistory]);useEffect(function(){},[chatHistory]);function scrollToBottom(){lastMessage.current&&lastMessage.current.scrollIntoView({behavior:\"smooth\"});}useEffect(function(){scrollToBottom();},[chatHistory]);return props.onClickDisplay?/*#__PURE__*/React.createElement(\"div\",{className:\"chat\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"chat-history\"},chatHistory.map(function(entry,index,array){return entry.sender==myState.Name||entry.sender==myState.name.split('_Admin').join('')?/*#__PURE__*/React.createElement(\"div\",{key:\"entry-\".concat(index),className:\"my message\"},entry.message):array[index-1]&&entry.sender==array[index-1].sender?/*#__PURE__*/React.createElement(\"div\",{key:\"entry-\".concat(index),className:\"additional message\"},entry.message):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{key:\"name-label-\".concat(index),className:\"name-label\"},/*#__PURE__*/React.createElement(\"b\",null,entry.sender),\":\"),/*#__PURE__*/React.createElement(\"div\",{key:\"entry-\".concat(index),className:\"received message\"},entry.message));}),/*#__PURE__*/React.createElement(\"div\",{style:{float:\"left\",clear:\"both\"},ref:lastMessage}))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"chatInput\"}),/*#__PURE__*/React.createElement(\"input\",{id:\"chatInput\",className:\"chat-input\",type:\"text\",autoComplete:\"off\",placeholder:\"Type your message here..\",value:inputValue,onChange:handleChange}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",className:\"send-chat-button\"},\"Send\"))):null;}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","MyContext","SessionStateContext","Chat","props","callObject","inputValue","setInputValue","session","sessionState","setSessionState","myStateArray","myState","chatHistory","setChatHistory","newHistoryObject","prev","lastMessage","createRef","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","type","message","name","participants","local","user_name","includes","split","join","sender","handleAppMessage","fromId","data","notification","on","cleanup","off","scrollToBottom","current","scrollIntoView","behavior","onClickDisplay","map","entry","index","array","Name","float","clear"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../../CallObjectContext';\nimport MyContext from '../../../MyContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const {myStateArray}  = useContext(MyContext);\n  const [ myState ] = myStateArray;\n  const chatHistory = sessionState.chatHistory;\n  const setChatHistory = (newHistoryObject) => {\n    setSessionState((prev)=>({\n        ...prev,\n        chatHistory:\n          [\n            ...prev.chatHistory,\n            newHistoryObject,\n          ]\n    }))\n  };\n  const lastMessage = React.createRef();\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!inputValue) {return}\n    callObject.sendAppMessage({ type:'chat', message: inputValue }, '*');\n    const name = callObject.participants().local.user_name.includes('_Admin')\n      ? callObject.participants().local.user_name.split('_Admin').join('')\n      : callObject.participants().local.user_name;\n    setChatHistory(\n      {\n        sender: name,\n        message: inputValue,\n      },\n    );\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name.includes('_Admin')\n      ? participants[event.fromId].user_name.split('_Admin').join('')\n      : participants[event.fromId].user_name;\n      event.data.type=='chat'&& setChatHistory(\n        {\n          sender: name,\n          message: event.data.message,\n        }\n      );\n      // Make other icons light up\n      event.data.type=='chat'&& props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  function scrollToBottom() {\n    lastMessage.current && lastMessage.current.scrollIntoView({behavior:\"smooth\"});\n  }\n\n  useEffect(()=>{\n    scrollToBottom();\n  },[chatHistory])\n  \n  \n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n            <div>\n          \n            <div className=\"chat-history\">\n            {\n                chatHistory.map((entry, index, array) => (\n                  entry.sender == myState.Name || entry.sender == myState.name.split('_Admin').join('') \n                    ? \n                      (\n                      (<div key={`entry-${index}`} className='my message'>\n                      {entry.message}\n                      </div>)\n                      )\n                    :\n\n                      (\n                        array[index-1] && entry.sender == array[index-1].sender \n                          ? \n                            (\n                              <div key={`entry-${index}`} className='additional message'>\n                                  {entry.message}\n                            </div>\n                            )\n                          :\n                            (\n                              <div>\n                              <div key={`name-label-${index}`} className='name-label'>\n                                <b>{entry.sender}</b>:\n                                </div>\n                              <div key={`entry-${index}`} className='received message'>\n                                {entry.message}\n                              </div>\n                            </div>\n                            )\n                      )\n\n              ))}\n              <div style={{ float:\"left\", clear: \"both\" }}\n                ref={lastMessage}>\n              </div>\n          </div>\n          \n          </div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}