{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/CallProvider.js\";\n\n/**\n * Call Provider / Context\n * ---\n * Configures the general state of a Daily call, such as which features\n * to enable, as well as instantiate the 'call machine' hook responsible\n * fir the overaching call loop (joining, leaving, etc)\n */\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport Bowser from 'bowser';\nimport PropTypes from 'prop-types';\nimport { ACCESS_STATE_LOBBY, ACCESS_STATE_UNKNOWN, VIDEO_QUALITY_AUTO } from '../constants';\nimport { useNetworkState } from '../hooks/useNetworkState';\nimport { useCallMachine } from './useCallMachine';\nexport const CallContext = createContext();\nexport const CallProvider = ({\n  children,\n  domain,\n  room,\n  token = '',\n  subscribeToTracksAutomatically = true\n}) => {\n  const [videoQuality, setVideoQuality] = useState(VIDEO_QUALITY_AUTO);\n  const [showLocalVideo, setShowLocalVideo] = useState(true);\n  const [preJoinNonAuthorized, setPreJoinNonAuthorized] = useState(false);\n  const [enableRecording, setEnableRecording] = useState(null);\n  const [startCloudRecording, setStartCloudRecording] = useState(false);\n  const [roomExp, setRoomExp] = useState(null); // Daily CallMachine hook (primarily handles status of the call)\n\n  const {\n    daily,\n    leave,\n    state,\n    setRedirectOnLeave\n  } = useCallMachine({\n    domain,\n    room,\n    token,\n    subscribeToTracksAutomatically\n  });\n  const networkState = useNetworkState(daily, videoQuality); // Feature detection taken from daily room object and client browser support\n\n  useEffect(() => {\n    if (!daily) return;\n\n    const updateRoomConfigState = async () => {\n      var _roomConfig$config;\n\n      const roomConfig = await daily.room();\n      if (!('config' in roomConfig)) return;\n\n      if (roomConfig === null || roomConfig === void 0 ? void 0 : (_roomConfig$config = roomConfig.config) === null || _roomConfig$config === void 0 ? void 0 : _roomConfig$config.exp) {\n        var _roomConfig$config2;\n\n        setRoomExp((roomConfig === null || roomConfig === void 0 ? void 0 : (_roomConfig$config2 = roomConfig.config) === null || _roomConfig$config2 === void 0 ? void 0 : _roomConfig$config2.exp) * 1000 || Date.now() + 1 * 60 * 1000);\n      }\n\n      const browser = Bowser.parse(window.navigator.userAgent);\n      const supportsRecording = browser.platform.type === 'desktop' && browser.engine.name === 'Blink'; // recording and screen sharing is hidden in owner_only_broadcast for non-owners\n\n      if (supportsRecording) {\n        var _roomConfig$tokenConf, _roomConfig$tokenConf2, _roomConfig$config3;\n\n        const recordingType = (_roomConfig$tokenConf = roomConfig === null || roomConfig === void 0 ? void 0 : (_roomConfig$tokenConf2 = roomConfig.tokenConfig) === null || _roomConfig$tokenConf2 === void 0 ? void 0 : _roomConfig$tokenConf2.enable_recording) !== null && _roomConfig$tokenConf !== void 0 ? _roomConfig$tokenConf : roomConfig === null || roomConfig === void 0 ? void 0 : (_roomConfig$config3 = roomConfig.config) === null || _roomConfig$config3 === void 0 ? void 0 : _roomConfig$config3.enable_recording;\n\n        if (['local', 'cloud'].includes(recordingType)) {\n          var _roomConfig$tokenConf3, _roomConfig$tokenConf4;\n\n          setEnableRecording(recordingType);\n          setStartCloudRecording((_roomConfig$tokenConf3 = roomConfig === null || roomConfig === void 0 ? void 0 : (_roomConfig$tokenConf4 = roomConfig.tokenConfig) === null || _roomConfig$tokenConf4 === void 0 ? void 0 : _roomConfig$tokenConf4.start_cloud_recording) !== null && _roomConfig$tokenConf3 !== void 0 ? _roomConfig$tokenConf3 : false);\n        }\n      }\n    };\n\n    updateRoomConfigState();\n  }, [state, daily]); // Convience wrapper for adding a fake participant to the call\n\n  const addFakeParticipant = useCallback(() => {\n    daily.addFakeParticipant();\n  }, [daily]); // Convenience wrapper for changing the bandwidth of the client\n\n  const setBandwidth = useCallback(quality => {\n    daily.setBandwidth(quality);\n  }, [daily]);\n  useEffect(() => {\n    if (!daily) return;\n    const {\n      access\n    } = daily.accessState();\n    if (access === ACCESS_STATE_UNKNOWN) return;\n    const requiresPermission = (access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_LOBBY;\n    setPreJoinNonAuthorized(requiresPermission && !token);\n  }, [state, daily, token]);\n  return /*#__PURE__*/React.createElement(CallContext.Provider, {\n    value: {\n      state,\n      callObject: daily,\n      addFakeParticipant,\n      preJoinNonAuthorized,\n      leave,\n      networkState,\n      showLocalVideo,\n      roomExp,\n      enableRecording,\n      videoQuality,\n      setVideoQuality,\n      setBandwidth,\n      setRedirectOnLeave,\n      setShowLocalVideo,\n      startCloudRecording,\n      subscribeToTracksAutomatically\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, children);\n};\nCallProvider.propTypes = {\n  children: PropTypes.node,\n  domain: PropTypes.string.isRequired,\n  room: PropTypes.string.isRequired,\n  token: PropTypes.string,\n  subscribeToTracksAutomatically: PropTypes.bool\n};\nexport const useCallState = () => useContext(CallContext);","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/CallProvider.js"],"names":["React","createContext","useCallback","useContext","useEffect","useState","Bowser","PropTypes","ACCESS_STATE_LOBBY","ACCESS_STATE_UNKNOWN","VIDEO_QUALITY_AUTO","useNetworkState","useCallMachine","CallContext","CallProvider","children","domain","room","token","subscribeToTracksAutomatically","videoQuality","setVideoQuality","showLocalVideo","setShowLocalVideo","preJoinNonAuthorized","setPreJoinNonAuthorized","enableRecording","setEnableRecording","startCloudRecording","setStartCloudRecording","roomExp","setRoomExp","daily","leave","state","setRedirectOnLeave","networkState","updateRoomConfigState","roomConfig","config","exp","Date","now","browser","parse","window","navigator","userAgent","supportsRecording","platform","type","engine","name","recordingType","tokenConfig","enable_recording","includes","start_cloud_recording","addFakeParticipant","setBandwidth","quality","access","accessState","requiresPermission","level","callObject","propTypes","node","string","isRequired","bool","useCallState"],"mappings":"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","sourcesContent":["/**\n * Call Provider / Context\n * ---\n * Configures the general state of a Daily call, such as which features\n * to enable, as well as instantiate the 'call machine' hook responsible\n * fir the overaching call loop (joining, leaving, etc)\n */\n import React, {\n    createContext,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n  } from 'react';\n  import Bowser from 'bowser';\n  import PropTypes from 'prop-types';\n  import {\n    ACCESS_STATE_LOBBY,\n    ACCESS_STATE_UNKNOWN,\n    VIDEO_QUALITY_AUTO,\n  } from '../constants';\n  import { useNetworkState } from '../hooks/useNetworkState';\n  import { useCallMachine } from './useCallMachine';\n  \n  export const CallContext = createContext();\n  \n  export const CallProvider = ({\n    children,\n    domain,\n    room,\n    token = '',\n    subscribeToTracksAutomatically = true,\n  }) => {\n    const [videoQuality, setVideoQuality] = useState(VIDEO_QUALITY_AUTO);\n    const [showLocalVideo, setShowLocalVideo] = useState(true);\n    const [preJoinNonAuthorized, setPreJoinNonAuthorized] = useState(false);\n    const [enableRecording, setEnableRecording] = useState(null);\n    const [startCloudRecording, setStartCloudRecording] = useState(false);\n    const [roomExp, setRoomExp] = useState(null);\n  \n    // Daily CallMachine hook (primarily handles status of the call)\n    const { daily, leave, state, setRedirectOnLeave } = useCallMachine({\n      domain,\n      room,\n      token,\n      subscribeToTracksAutomatically,\n    });\n    const networkState = useNetworkState(daily, videoQuality);\n  \n    // Feature detection taken from daily room object and client browser support\n    useEffect(() => {\n      if (!daily) return;\n      const updateRoomConfigState = async () => {\n        const roomConfig = await daily.room();\n        if (!('config' in roomConfig)) return;\n  \n        if (roomConfig?.config?.exp) {\n          setRoomExp(\n            roomConfig?.config?.exp * 1000 || Date.now() + 1 * 60 * 1000\n          );\n        }\n        const browser = Bowser.parse(window.navigator.userAgent);\n        const supportsRecording =\n          browser.platform.type === 'desktop' && browser.engine.name === 'Blink';\n        // recording and screen sharing is hidden in owner_only_broadcast for non-owners\n        if (supportsRecording) {\n          const recordingType =\n            roomConfig?.tokenConfig?.enable_recording ??\n            roomConfig?.config?.enable_recording;\n          if (['local', 'cloud'].includes(recordingType)) {\n            setEnableRecording(recordingType);\n            setStartCloudRecording(\n              roomConfig?.tokenConfig?.start_cloud_recording ?? false\n            );\n          }\n        }\n      };\n      updateRoomConfigState();\n    }, [state, daily]);\n  \n    // Convience wrapper for adding a fake participant to the call\n    const addFakeParticipant = useCallback(() => {\n      daily.addFakeParticipant();\n    }, [daily]);\n  \n    // Convenience wrapper for changing the bandwidth of the client\n    const setBandwidth = useCallback(\n      (quality) => {\n        daily.setBandwidth(quality);\n      },\n      [daily]\n    );\n  \n    useEffect(() => {\n      if (!daily) return;\n  \n      const { access } = daily.accessState();\n      if (access === ACCESS_STATE_UNKNOWN) return;\n  \n      const requiresPermission = access?.level === ACCESS_STATE_LOBBY;\n      setPreJoinNonAuthorized(requiresPermission && !token);\n    }, [state, daily, token]);\n  \n    return (\n      <CallContext.Provider\n        value={{\n          state,\n          callObject: daily,\n          addFakeParticipant,\n          preJoinNonAuthorized,\n          leave,\n          networkState,\n          showLocalVideo,\n          roomExp,\n          enableRecording,\n          videoQuality,\n          setVideoQuality,\n          setBandwidth,\n          setRedirectOnLeave,\n          setShowLocalVideo,\n          startCloudRecording,\n          subscribeToTracksAutomatically,\n        }}\n      >\n        {children}\n      </CallContext.Provider>\n    );\n  };\n  \n  CallProvider.propTypes = {\n    children: PropTypes.node,\n    domain: PropTypes.string.isRequired,\n    room: PropTypes.string.isRequired,\n    token: PropTypes.string,\n    subscribeToTracksAutomatically: PropTypes.bool,\n  };\n  \n  export const useCallState = () => useContext(CallContext);"]},"metadata":{},"sourceType":"module"}