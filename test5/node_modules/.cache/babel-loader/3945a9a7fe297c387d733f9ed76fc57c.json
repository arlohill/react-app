{"ast":null,"code":"import _defineProperty from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./RoleSelector.css';import setSubscriptions from'../../hooks/setSubscriptions';import CallObjectContext from'../../CallObjectContext';import SessionStateContext from'../../SessionStateContext';export default function RoleSelector(props){var callObject=useContext(CallObjectContext);var _useContext=useContext(SessionStateContext),session=_useContext.session;var _session=_slicedToArray(session,2),sessionState=_session[0],setSessionState=_session[1];var setSubs=function setSubs(){setSubscriptions(callObject,window.viewMode);};var role=props.role;// const [selectedOption, setSelectedOption] = useState('');\nvar sendState=function sendState(){console.log(\"Sending current state...\");callObject.sendAppMessage(window.sessionState,'*');};var handleRoleChange=function handleRoleChange(e){window.sessionState.roleOf[e.target.id]=e.target.value;setSessionState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{roleOf:_objectSpread(_objectSpread({},prevState.roleOf),{},_defineProperty({},e.target.id,e.target.value))});});console.log(e.target.id+' is now: '+e.target.value);sendState();var myNewRole='Attendee';//default, if no role assigned\nfor(var key in window.sessionState.roleOf){if(window.sessionState.roleOf[key]==window.myName){myNewRole=key;}}if(myNewRole!=window.myRole){window.myRole=myNewRole;if(window.myRole.includes('1')){window.myNumber=1;}else if(window.myRole.includes('2')){window.myNumber=2;}}if(window.sessionState.isActive){// activateSession();  //rebuild UI for the newly assigned role, mid-session\n}setSubs();};return/*#__PURE__*/React.createElement(\"form\",{className:\"dropdown\"},/*#__PURE__*/React.createElement(\"select\",{className:\"selector\",id:role,onChange:handleRoleChange,value:sessionState.roleOf[role]},/*#__PURE__*/React.createElement(\"option\",{value:null}),window.userList&&window.userList.length>0&&window.userList.map(function(user){return/*#__PURE__*/React.createElement(\"option\",{value:user},user.includes('_Admin')?user.split('_Admin').join(''):user);})));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/RoleSelector/RoleSelector.js"],"names":["React","useContext","useEffect","useState","setSubscriptions","CallObjectContext","SessionStateContext","RoleSelector","props","callObject","session","sessionState","setSessionState","setSubs","window","viewMode","role","sendState","console","log","sendAppMessage","handleRoleChange","e","roleOf","target","id","value","prevState","myNewRole","key","myName","myRole","includes","myNumber","isActive","userList","length","map","user","split","join"],"mappings":"4fAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,MAAO,oBAAP,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8BAA7B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yBAA9B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,2BAAhC,CAIA,cAAe,SAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CACxC,GAAMC,CAAAA,UAAU,CAAGR,UAAU,CAACI,iBAAD,CAA7B,CADwC,gBAEpBJ,UAAU,CAACK,mBAAD,CAFU,CAEhCI,OAFgC,aAEhCA,OAFgC,6BAGAA,OAHA,IAGhCC,YAHgC,aAGnBC,eAHmB,aAIxC,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAACT,gBAAgB,CAACK,UAAD,CAAYK,MAAM,CAACC,QAAnB,CAAhB,CAA6C,CAApE,CACA,GAAMC,CAAAA,IAAI,CAAGR,KAAK,CAACQ,IAAnB,CACA;AAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACpBC,OAAO,CAACC,GAAR,CAAa,0BAAb,EACAV,UAAU,CAACW,cAAX,CAA0BN,MAAM,CAACH,YAAjC,CAA+C,GAA/C,EACH,CAHD,CAMA,GAAIU,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAO,CAC1BR,MAAM,CAACH,YAAP,CAAoBY,MAApB,CAA2BD,CAAC,CAACE,MAAF,CAASC,EAApC,EAAwCH,CAAC,CAACE,MAAF,CAASE,KAAjD,CACAd,eAAe,CAAC,SAACe,SAAD,wCAETA,SAFS,MAGZJ,MAAM,gCACKI,SAAS,CAACJ,MADf,wBAEGD,CAAC,CAACE,MAAF,CAASC,EAFZ,CAEiBH,CAAC,CAACE,MAAF,CAASE,KAF1B,EAHM,IAAD,CAAf,CASAR,OAAO,CAACC,GAAR,CAAaG,CAAC,CAACE,MAAF,CAASC,EAAT,CAAc,WAAd,CAA4BH,CAAC,CAACE,MAAF,CAASE,KAAlD,EACAT,SAAS,GAET,GAAIW,CAAAA,SAAS,CAAG,UAAhB,CAA4B;AAC5B,IAAK,GAAMC,CAAAA,GAAX,GAAkBf,CAAAA,MAAM,CAACH,YAAP,CAAoBY,MAAtC,CAA8C,CAC1C,GAAGT,MAAM,CAACH,YAAP,CAAoBY,MAApB,CAA2BM,GAA3B,GAAiCf,MAAM,CAACgB,MAA3C,CAAmD,CAC/CF,SAAS,CAAGC,GAAZ,CACH,CACJ,CACD,GAAID,SAAS,EAAEd,MAAM,CAACiB,MAAtB,CAA8B,CAC1BjB,MAAM,CAACiB,MAAP,CAAgBH,SAAhB,CACE,GAAId,MAAM,CAACiB,MAAP,CAAcC,QAAd,CAAuB,GAAvB,CAAJ,CAAiC,CAC7BlB,MAAM,CAACmB,QAAP,CAAgB,CAAhB,CACH,CAFD,IAEO,IAAInB,MAAM,CAACiB,MAAP,CAAcC,QAAd,CAAuB,GAAvB,CAAJ,CAAiC,CACpClB,MAAM,CAACmB,QAAP,CAAgB,CAAhB,CACH,CACJ,CACC,GAAGnB,MAAM,CAACH,YAAP,CAAoBuB,QAAvB,CAAgC,CAC5B;AACH,CACDrB,OAAO,GACZ,CAhCH,CAmCA,mBAKA,4BAAM,SAAS,CAAC,UAAhB,eACQ,8BAAQ,SAAS,CAAC,UAAlB,CAA6B,EAAE,CAAEG,IAAjC,CAAuC,QAAQ,CAAEK,gBAAjD,CAAmE,KAAK,CAAEV,YAAY,CAACY,MAAb,CAAoBP,IAApB,CAA1E,eACA,8BAAQ,KAAK,CAAE,IAAf,EADA,CAEKF,MAAM,CAACqB,QAAP,EAAmBrB,MAAM,CAACqB,QAAP,CAAgBC,MAAhB,CAAuB,CAA1C,EAA+CtB,MAAM,CAACqB,QAAP,CAAgBE,GAAhB,CAAoB,SAACC,IAAD,qBAAU,8BAAQ,KAAK,CAAEA,IAAf,EAAsBA,IAAI,CAACN,QAAL,CAAc,QAAd,EAA0BM,IAAI,CAACC,KAAL,CAAW,QAAX,EAAqBC,IAArB,CAA0B,EAA1B,CAA1B,CAA0DF,IAAhF,CAAV,EAApB,CAFpD,CADR,CALA,CAcD","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './RoleSelector.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\n\n\n\nexport default function RoleSelector(props) {\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;\n    const setSubs = () => {setSubscriptions(callObject,window.viewMode)};  \n    const role = props.role;\n    // const [selectedOption, setSelectedOption] = useState('');\n\n    \n    const sendState = () => {\n        console.log (\"Sending current state...\");\n        callObject.sendAppMessage(window.sessionState, '*'); \n    }\n\n\n    let handleRoleChange = (e) => {\n        window.sessionState.roleOf[e.target.id]=e.target.value;\n        setSessionState((prevState)=>(\n            {\n            ...prevState,\n            roleOf: {\n                    ...prevState.roleOf,\n                    [e.target.id]: e.target.value\n                    }\n            }\n            ))\n        console.log (e.target.id + ' is now: ' + e.target.value);\n        sendState();\n    \n        let myNewRole = 'Attendee'; //default, if no role assigned\n        for (const key in window.sessionState.roleOf) {\n            if(window.sessionState.roleOf[key]==window.myName) {\n                myNewRole = key;\n            }\n        }\n        if (myNewRole!=window.myRole) {\n            window.myRole = myNewRole;\n              if (window.myRole.includes('1')) {\n                  window.myNumber=1;\n              } else if (window.myRole.includes('2')) {\n                  window.myNumber=2;\n              }\n          }\n            if(window.sessionState.isActive){\n                // activateSession();  //rebuild UI for the newly assigned role, mid-session\n            } \n            setSubs();\n      }\n\n\n    return (\n\n\n\n\n    <form className='dropdown'>\n            <select className='selector' id={role} onChange={handleRoleChange} value={sessionState.roleOf[role]}>            \n            <option value={null}></option>\n                {window.userList && window.userList.length>0 && window.userList.map((user) => <option value={user}>{user.includes('_Admin') ? user.split('_Admin').join('') : user}</option>)}\n                </select>\n    </form>\n                    \n\n    );\n  }\n\n        "]},"metadata":{},"sourceType":"module"}