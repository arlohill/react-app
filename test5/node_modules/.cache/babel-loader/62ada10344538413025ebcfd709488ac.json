{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base playback ID path for the Mux API\n * */\n\n\nvar PATH = '/video/v1/playback-ids';\n/**\n * @private\n * Build the base playback ID path for the Mux API\n * */\n\nvar buildBasePath = function buildBasePath(playbackId) {\n  return \"\".concat(PATH, \"/\").concat(playbackId);\n};\n/**\n * PlaybackIds Class - Provides access to the Mux Playback ID API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n * Video.PlaybackIds.get(playbackId);\n */\n\n\nvar PlaybackIds = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(PlaybackIds, _Base);\n\n  var _super = _createSuper(PlaybackIds);\n\n  function PlaybackIds() {\n    _classCallCheck(this, PlaybackIds);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PlaybackIds, [{\n    key: \"get\",\n\n    /**\n     * Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n     * @param {string} playbackId - The ID for playback\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Retrieve an Asset or Live Stream identifier associated with a Playback ID\n     * Video.PlaybackIds.get(playbackId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-asset-or-livestream-id\n     */\n    value: function get(playbackId) {\n      if (!playbackId) {\n        return Promise.reject(new Error('An playback ID is required to get an asset or live stream identifier'));\n      }\n\n      return this.http.get(buildBasePath(playbackId));\n    }\n  }]);\n\n  return PlaybackIds;\n}(Base);\n\nmodule.exports = PlaybackIds;","map":null,"metadata":{},"sourceType":"script"}