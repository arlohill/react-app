{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/MediaDeviceProvider.js\";\nimport React, { createContext, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useCallState } from './CallProvider.js';\nimport { useParticipants } from './ParticipantsProvider';\nimport { useDevices } from './useDevices';\nexport const MediaDeviceContext = createContext();\nexport const MediaDeviceProvider = ({\n  children\n}) => {\n  const {\n    callObject\n  } = useCallState();\n  const {\n    localParticipant\n  } = useParticipants();\n  const {\n    cams,\n    mics,\n    speakers,\n    camError,\n    micError,\n    currentDevices,\n    deviceState,\n    setMicDevice,\n    setCamDevice,\n    setSpeakersDevice\n  } = useDevices(callObject);\n  return /*#__PURE__*/React.createElement(MediaDeviceContext.Provider, {\n    value: {\n      cams,\n      mics,\n      speakers,\n      camError,\n      micError,\n      currentDevices,\n      deviceState,\n      isCamMuted: localParticipant.isCamMuted,\n      isMicMuted: localParticipant.isMicMuted,\n      setMicDevice,\n      setCamDevice,\n      setSpeakersDevice\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, children);\n};\nMediaDeviceProvider.propTypes = {\n  children: PropTypes.node\n};\nMediaDeviceProvider.defaultProps = {\n  children: null\n};\nexport const useMediaDevices = () => useContext(MediaDeviceContext);","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/MediaDeviceProvider.js"],"names":["React","createContext","useContext","PropTypes","useCallState","useParticipants","useDevices","MediaDeviceContext","MediaDeviceProvider","children","callObject","localParticipant","cams","mics","speakers","camError","micError","currentDevices","deviceState","setMicDevice","setCamDevice","setSpeakersDevice","isCamMuted","isMicMuted","propTypes","node","defaultProps","useMediaDevices"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAGN,aAAa,EAAxC;AAEP,OAAO,MAAMO,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAiBN,YAAY,EAAnC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAuBN,eAAe,EAA5C;AAEA,QAAM;AACJO,IAAAA,IADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA,YATI;AAUJC,IAAAA;AAVI,MAWFf,UAAU,CAACI,UAAD,CAXd;AAaA,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,IADK;AAELC,MAAAA,IAFK;AAGLC,MAAAA,QAHK;AAILC,MAAAA,QAJK;AAKLC,MAAAA,QALK;AAMLC,MAAAA,cANK;AAOLC,MAAAA,WAPK;AAQLI,MAAAA,UAAU,EAAEX,gBAAgB,CAACW,UARxB;AASLC,MAAAA,UAAU,EAAEZ,gBAAgB,CAACY,UATxB;AAULJ,MAAAA,YAVK;AAWLC,MAAAA,YAXK;AAYLC,MAAAA;AAZK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGZ,QAhBH,CADF;AAoBD,CArCM;AAuCPD,mBAAmB,CAACgB,SAApB,GAAgC;AAC9Bf,EAAAA,QAAQ,EAAEN,SAAS,CAACsB;AADU,CAAhC;AAGAjB,mBAAmB,CAACkB,YAApB,GAAmC;AACjCjB,EAAAA,QAAQ,EAAE;AADuB,CAAnC;AAIA,OAAO,MAAMkB,eAAe,GAAG,MAAMzB,UAAU,CAACK,kBAAD,CAAxC","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useCallState } from './CallProvider.js';\nimport { useParticipants } from './ParticipantsProvider';\nimport { useDevices } from './useDevices';\n\nexport const MediaDeviceContext = createContext();\n\nexport const MediaDeviceProvider = ({ children }) => {\n  const { callObject } = useCallState();\n  const { localParticipant } = useParticipants();\n\n  const {\n    cams,\n    mics,\n    speakers,\n    camError,\n    micError,\n    currentDevices,\n    deviceState,\n    setMicDevice,\n    setCamDevice,\n    setSpeakersDevice,\n  } = useDevices(callObject);\n\n  return (\n    <MediaDeviceContext.Provider\n      value={{\n        cams,\n        mics,\n        speakers,\n        camError,\n        micError,\n        currentDevices,\n        deviceState,\n        isCamMuted: localParticipant.isCamMuted,\n        isMicMuted: localParticipant.isMicMuted,\n        setMicDevice,\n        setCamDevice,\n        setSpeakersDevice,\n      }}\n    >\n      {children}\n    </MediaDeviceContext.Provider>\n  );\n};\n\nMediaDeviceProvider.propTypes = {\n  children: PropTypes.node,\n};\nMediaDeviceProvider.defaultProps = {\n  children: null,\n};\n\nexport const useMediaDevices = () => useContext(MediaDeviceContext);"]},"metadata":{},"sourceType":"module"}