{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/StartScreen/StartScreen.js\";\nimport React, { useEffect, useRef, useContext, useState } from 'react';\nimport './StartScreen.css';\nimport MyContext from '../../MyContext'; //   if (parent.myRole=='Actor') {\n//     document.getElementById('instructions').remove();\n//     document.getElementById('actor-instructions').style.visibility='visible';\n//     let qrCode = '../images/Audio' + parent.myNumber + '.png';\n//     document.getElementById('QR-code').src=qrCode;\n//   }\n\n/**\n * Props:\n * -\n * -\n */\n\nexport default function StartScreen(props) {\n  const userIDEl = useRef(null);\n  const begin = props.onClick;\n  const setMy = useContext(MyContext);\n  const [userID, setUserID] = useState('Your first name'); //   if (parent.myRole.includes('Viewer')) {\n  //     document.getElementById('welcome-instructions').innerHTML='You are in view-only mode. <br/><br/>Click below to enter. <br/><br/>  <button class=\"new-card\" id=\"enter-button\" onclick=\"setUserID()\">Enter session</button>'\n  //   }\n\n  function setMyName() {\n    console.log('setting user ID as ' + userID); //   if (parent.myRole.includes('Viewer')) {   //enter session immediately if no need to enter name\n    //     begin();\n    //     return;\n    //   }\n\n    if (userID == '' || userID == 'Your first name' || userID.length <= 1) {\n      alert('Please enter your name to help your partner identify you.');\n    } else {\n      setMy({\n        name: userID\n      }); //pass it up to the parent\n\n      begin();\n    }\n  }\n\n  function onFieldChange(value) {\n    setUserID(value);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start-screen-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fixed-width\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Welcome to SecondBody.\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: '180px',\n      marginRight: '180px',\n      padding: '20px',\n      border: '4px solid whitesmoke'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    id: \"welcome-instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    autoComplete: \"off\",\n    style: {\n      backgroundColor: 'rgb(230, 240, 249)',\n      fontSize: '15px',\n      width: '200px',\n      height: '30px',\n      textAlign: 'center',\n      fontFamily: 'poppins'\n    },\n    ref: userIDEl,\n    value: userID,\n    onFocus: () => {\n      if (userID == 'Your first name') {\n        setUserID('');\n      }\n    },\n    onChange: e => onFieldChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 348\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 353\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"new-card\",\n    style: {\n      width: '150px',\n      color: '#1b8bc4',\n      fontSize: '17px'\n    },\n    type: \"submit\",\n    type: \"submit\",\n    value: \"Enter session\",\n    onClick: setMyName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/StartScreen/StartScreen.js"],"names":["React","useEffect","useRef","useContext","useState","MyContext","StartScreen","props","userIDEl","begin","onClick","setMy","userID","setUserID","setMyName","console","log","length","alert","name","onFieldChange","value","marginLeft","marginRight","padding","border","e","preventDefault","backgroundColor","fontSize","width","height","textAlign","fontFamily","target","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext, useState } from 'react';\nimport './StartScreen.css';\nimport MyContext from '../../MyContext';\n\n\n//   if (parent.myRole=='Actor') {\n//     document.getElementById('instructions').remove();\n//     document.getElementById('actor-instructions').style.visibility='visible';\n//     let qrCode = '../images/Audio' + parent.myNumber + '.png';\n//     document.getElementById('QR-code').src=qrCode;\n//   }\n\n\n/**\n * Props:\n * -\n * -\n */\n export default function StartScreen(props) {\n\n    const userIDEl = useRef(null);\n    const begin = props.onClick;\n    const setMy = useContext(MyContext);\n    const [ userID, setUserID ] = useState('Your first name');\n    \n\n    //   if (parent.myRole.includes('Viewer')) {\n//     document.getElementById('welcome-instructions').innerHTML='You are in view-only mode. <br/><br/>Click below to enter. <br/><br/>  <button class=\"new-card\" id=\"enter-button\" onclick=\"setUserID()\">Enter session</button>'\n//   }\n\n  function setMyName() {\n      console.log('setting user ID as ' + userID);\n    //   if (parent.myRole.includes('Viewer')) {   //enter session immediately if no need to enter name\n    //     begin();\n    //     return;\n    //   }\n      if (userID == '' || userID=='Your first name' || userID.length<=1) {\n        alert('Please enter your name to help your partner identify you.')\n      } else {\n        setMy({name: userID});  //pass it up to the parent\n        begin();\n      }\n  }\n\n\n  \n  function onFieldChange(value) {\n    setUserID(value);\n}\n\n\n    return (\n    <div className='container'>\n\n        <div className='start-screen-background'></div>\n  \n        <div className='instructions'> \n            <div className='fixed-width'>\n          \n                <h2>Welcome to SecondBody.</h2>\n\n                <div style={{marginLeft:'180px', marginRight:'180px', padding: '20px', border: '4px solid whitesmoke'}}>\n                    <h4 id='welcome-instructions'>\n            \n                        <form id='form' onSubmit={(e)=>e.preventDefault()}>\n                            {/* <label for=\"userID\"></label><br/><br/> */}\n                            <input type=\"text\" autoComplete=\"off\" style={{backgroundColor: 'rgb(230, 240, 249)', fontSize:'15px', width: '200px', height: '30px', textAlign:'center', fontFamily:'poppins'}} ref={userIDEl} value={userID} onFocus={()=> {if (userID=='Your first name') {setUserID('')}}} onChange={e => onFieldChange(e.target.value)} /><br/><br/>\n                            <input className='new-card' style={{width:'150px', color:'#1b8bc4', fontSize: '17px'}} type=\"submit\" type=\"submit\" value='Enter session' onClick={setMyName} />\n                        </form>\n\n                        <br/>\n                    </h4>\n                </div>\n        \n  \n            </div>\n        </div>\n  \n    \n  \n        {/* <div className='actor-instructions'>\n                  \n                  <div>\n                    <h2>Welcome!</h2>\n                    <p style={{fontSize: '22px'}}>Before entering, please load the in-ear audio on your smartphone:</p>\n                </div>\n                  \n                    <div style={{position: 'relative', marginTop: '10px', marginLeft:'20%', marginRight:'20%', textAlign: 'center', border: '2px dashed #17b2ff'}}>\n                        <div style={{margin:'20px'}}>\n                            <p>\n                                <u>Use your phone's camera to scan the QR code.</u>\n                                <br/><br/>\n                                Note: <br/>If you're using an iPhone, the link must be loaded in Safari, not Chrome.\n                        \n                            </p>\n                            <img className='QR-code' src=''  />\n                        </div>\n                    </div>\n\n                    <div>\n                      <p style={{fontSize: '22px'}}><br/>Once the page has loaded on your phone, <span style={{textDecoration: 'underline', color: '#17b2ff', cursor: 'pointer'}} onclick='begin();'>click to enter.</span></p>\n                    </div>\n                    \n        </div> */}\n    </div>\n    );\n  }\n\n              \n                \n\n\n\n\n"]},"metadata":{},"sourceType":"module"}