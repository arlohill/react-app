{"ast":null,"code":"/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base playback ID path for the Mux API\n * */\n\n\nconst PATH = '/video/v1/playback-ids';\n/**\n * @private\n * Build the base playback ID path for the Mux API\n * */\n\nconst buildBasePath = playbackId => `${PATH}/${playbackId}`;\n/**\n * PlaybackIds Class - Provides access to the Mux Playback ID API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n * Video.PlaybackIds.get(playbackId);\n */\n\n\nclass PlaybackIds extends Base {\n  /**\n   * Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n   * @param {string} playbackId - The ID for playback\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an Asset or Live Stream identifier associated with a Playback ID\n   * Video.PlaybackIds.get(playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-or-livestream-id\n   */\n  get(playbackId) {\n    if (!playbackId) {\n      return Promise.reject(new Error('An playback ID is required to get an asset or live stream identifier'));\n    }\n\n    return this.http.get(buildBasePath(playbackId));\n  }\n\n}\n\nmodule.exports = PlaybackIds;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/@mux/mux-node/src/video/resources/playbackIds.js"],"names":["Base","require","PATH","buildBasePath","playbackId","PlaybackIds","get","Promise","reject","Error","http","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,wBAAb;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGC,UAAU,IAAK,GAAEF,IAAK,IAAGE,UAAW,EAA1D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAN,SAA0BL,IAA1B,CAA+B;AAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,GAAG,CAACF,UAAD,EAAa;AACd,QAAI,CAACA,UAAL,EAAiB;AACf,aAAOG,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,sEADF,CADK,CAAP;AAKD;;AACD,WAAO,KAAKC,IAAL,CAAUJ,GAAV,CAAcH,aAAa,CAACC,UAAD,CAA3B,CAAP;AACD;;AAvB4B;;AA0B/BO,MAAM,CAACC,OAAP,GAAiBP,WAAjB","sourcesContent":["/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base playback ID path for the Mux API\n * */\nconst PATH = '/video/v1/playback-ids';\n\n/**\n * @private\n * Build the base playback ID path for the Mux API\n * */\nconst buildBasePath = playbackId => `${PATH}/${playbackId}`;\n\n/**\n * PlaybackIds Class - Provides access to the Mux Playback ID API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n * Video.PlaybackIds.get(playbackId);\n */\nclass PlaybackIds extends Base {\n  /**\n   * Retrieve an Asset or Live Stream  identifier associated with a Playback ID\n   * @param {string} playbackId - The ID for playback\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an Asset or Live Stream identifier associated with a Playback ID\n   * Video.PlaybackIds.get(playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-or-livestream-id\n   */\n  get(playbackId) {\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'An playback ID is required to get an asset or live stream identifier'\n        )\n      );\n    }\n    return this.http.get(buildBasePath(playbackId));\n  }\n}\n\nmodule.exports = PlaybackIds;\n"]},"metadata":{},"sourceType":"script"}