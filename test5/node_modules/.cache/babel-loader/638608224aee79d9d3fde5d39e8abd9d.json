{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Library/VideoElement/HLSSource.js\";\nimport React, { Component } from 'react';\nimport Hls from 'hls.js';\nexport default class HLSSource extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.hls = new Hls();\n  }\n\n  componentDidMount() {\n    // `src` is the property get from this component\n    // `video` is the property insert from `Video` component\n    // `video` is the html5 video element\n    const {\n      src,\n      video\n    } = this.props; // load hls video source base on hls.js\n\n    if (Hls.isSupported()) {\n      this.hls.loadSource(src);\n      this.hls.attachMedia(video);\n      this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n        video.play();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // destroy hls video source\n    if (this.hls) {\n      this.hls.destroy();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"source\", {\n      src: this.props.src,\n      type: this.props.type || 'application/x-mpegURL',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Library/VideoElement/HLSSource.js"],"names":["React","Component","Hls","HLSSource","constructor","props","context","hls","componentDidMount","src","video","isSupported","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","componentWillUnmount","destroy","render","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,eAAe,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAC/CG,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN,EAAaC,OAAb;AACA,SAAKC,GAAL,GAAW,IAAIL,GAAJ,EAAX;AACD;;AAEDM,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAiB,KAAKL,KAA5B,CAJkB,CAKlB;;AACA,QAAIH,GAAG,CAACS,WAAJ,EAAJ,EAAuB;AACrB,WAAKJ,GAAL,CAASK,UAAT,CAAoBH,GAApB;AACA,WAAKF,GAAL,CAASM,WAAT,CAAqBH,KAArB;AACA,WAAKH,GAAL,CAASO,EAAT,CAAYZ,GAAG,CAACa,MAAJ,CAAWC,eAAvB,EAAwC,MAAM;AAC5CN,QAAAA,KAAK,CAACO,IAAN;AACD,OAFD;AAGD;AACF;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACA,QAAI,KAAKX,GAAT,EAAc;AACZ,WAAKA,GAAL,CAASY,OAAT;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,GAAG,EAAE,KAAKf,KAAL,CAAWI,GADlB;AAEE,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWgB,IAAX,IAAmB,uBAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAMD;;AAnC8C","sourcesContent":["import React, { Component } from 'react';\nimport Hls from 'hls.js';\n\nexport default class HLSSource extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.hls = new Hls();\n  }\n\n  componentDidMount() {\n    // `src` is the property get from this component\n    // `video` is the property insert from `Video` component\n    // `video` is the html5 video element\n    const { src, video } = this.props;\n    // load hls video source base on hls.js\n    if (Hls.isSupported()) {\n      this.hls.loadSource(src);\n      this.hls.attachMedia(video);\n      this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n        video.play();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // destroy hls video source\n    if (this.hls) {\n      this.hls.destroy();\n    }\n  }\n\n  render() {\n    return (\n      <source\n        src={this.props.src}\n        type={this.props.type || 'application/x-mpegURL'}\n      />\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}