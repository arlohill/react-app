{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/AdminPanel/AdminPanel.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel.css';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport RoleSelector from '../RoleSelector/RoleSelector';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext); // const [sessionState, setSessionState ] = useContext(SessionContext);\n\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray,\n    setName,\n    setRole,\n    setUserList,\n    setViewMode,\n    setCamOnAtSessionStart,\n    setMicOnAtSessionStart,\n    setAdminPresent,\n    setAmAdmin\n  } = useContext(MyContext);\n  const [myState, setMyState] = myStateArray;\n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel = forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play');\n  const [targetRecording, setTargetRecording] = useState('monologue1'); ///////HAVE TO CHANGE THIS IN TWO PLACES\n\n  const training = React.createRef();\n  const trainingToggle = React.createRef();\n  useEffect(() => {\n    //listen for participants leaving or joining and update component\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-left', 'joined-meeting'];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(() => forceUpdate(), 100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(() => forceUpdate(), 100));\n      }\n    };\n  }, [callObject]); ///update other participants when state changes.\n\n  useEffect(() => {\n    if (!sessionState.hasAnUpdate) {\n      return;\n    }\n\n    console.log('****HAS AN UPDATE');\n    sendState();\n    setSessionState(prev => ({ ...prev,\n      hasAnUpdate: false\n    }));\n  }, [sessionState.hasAnUpdate]);\n\n  const sendState = () => {\n    console.log(\"Sending current state...\");\n    callObject.sendAppMessage(sessionState, '*');\n  };\n\n  function toggleSessionActive() {\n    setSessionState(prevState => ({ ...prevState,\n      isActive: !prevState.isActive\n    }));\n    setSessionState(prev => ({ ...prev,\n      hasAnUpdate: true\n    }));\n  }\n\n  function togglePractice() {\n    let recipientA = sessionState.roleOf.Shadow1 && myState.userList.sessionIdFor[sessionState.roleOf.Shadow1];\n    let recipientB = sessionState.roleOf.Shadow2 && myState.userList.sessionIdFor[sessionState.roleOf.Shadow2];\n\n    if (sessionState.roleOf.Shadow1 == myState.name) {\n      recipientA = 'me';\n    }\n\n    if (sessionState.roleOf.Shadow2 == myState.name) {\n      recipientB = 'me';\n    }\n\n    if (!recipientA && !recipientB) {\n      console.log('no recipients.');\n      return;\n    }\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA\n    };\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    };\n\n    if (recipientA) {\n      if (recipientA != 'me') {\n        callObject.sendAppMessage(instructionsA, recipientA);\n      } else if (recipientA == 'me') {\n        audioPlayer(targetRecording, action);\n      }\n\n      console.log(`Sent ${action} request to ${sessionState.roleOf.Shadow1}`);\n    }\n\n    if (recipientB) {\n      if (recipientB != 'me') {\n        callObject.sendAppMessage(instructionsB, recipientB);\n      } else if (recipientB == 'me') {\n        audioPlayer(targetRecording + 'B', action);\n      }\n\n      console.log(`Sent ${action} request to ${sessionState.roleOf.Shadow2}`);\n    }\n\n    window.audioIsPlaying = !window.audioIsPlaying;\n    setPlayButtonText(!window.audioIsPlaying ? 'Play' : 'Pause');\n  }\n\n  function toggleTrainingMode() {\n    training.current.classList.toggle('hidden');\n    trainingToggle.current.innerText = training.current.classList.contains('hidden') ? 'Show Practice' : 'X';\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  /* // Play practice audio for users */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"role-selector-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, \"Buyer(s)\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer1\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer2\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer3\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer4\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, \"Seller\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Seller\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }, \"Seller's shadow(s)\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow1\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow2\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow3\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow4\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"session-toggle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    class: \"switch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"state\",\n    checked: sessionState.isActive,\n    onChange: toggleSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"slider round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 25\n    }\n  }, \"Session active\"))), \"// ***End admin panel***\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"practice-audio hidden\",\n    ref: training,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 1\n    }\n  }, \"Practice audio\", /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '30px',\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    class: \"practice-audio-dropdown\",\n    onChange: e => {\n      setTargetRecording(e.target.value);\n      console.log('***CHANGED TO ' + e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 25\n    }\n  }, \"What makes CEB different (mono)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 25\n    }\n  }, \"Searching for PAGA Claims (mono)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, \"Audio Engineer (mono)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 25\n    }\n  }, \"IBM Garage (mono)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 25\n    }\n  }, \"Livestorm 1 (mono)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"monologue6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 25\n    }\n  }, \"Livestorm 2 (mono)\"))))), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'green',\n      fontSize: '16px',\n      fontFamily: 'Verdana, Geneva, Tahoma, sans-serif'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePractice,\n    id: \"play-pause\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 23\n    }\n  }, playButtonText))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"training-toggle\",\n    ref: trainingToggle,\n    onClick: toggleTrainingMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 1\n    }\n  }, \"Show Practice\"));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/AdminPanel/AdminPanel.js"],"names":["React","useContext","useEffect","useState","CallObjectContext","logDailyEvent","audioPlayer","RoleSelector","SessionStateContext","MyContext","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","AdminPanel","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","session","sessionState","setSessionState","myStateArray","setName","setRole","setUserList","setViewMode","setCamOnAtSessionStart","setMicOnAtSessionStart","setAdminPresent","setAmAdmin","myState","setMyState","forceUpdate","window","updateAdminPanel","playButtonText","setPlayButtonText","targetRecording","setTargetRecording","training","createRef","trainingToggle","events","event","on","setTimeout","cleanup","off","hasAnUpdate","console","log","sendState","prev","sendAppMessage","toggleSessionActive","prevState","isActive","togglePractice","recipientA","roleOf","Shadow1","userList","sessionIdFor","recipientB","Shadow2","name","action","audioIsPlaying","instructionsA","type","target","recipient","instructionsB","toggleTrainingMode","current","classList","toggle","innerText","contains","handleNewParticipantsState","height","margin","border","e","color","fontSize","fontFamily"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAO,kBAAP;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAIA,SAASC,cAAT,GAAyB;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC,CADuB,CACgB;;AACvC,SAAO,MAAMS,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAArB,CAFuB,CAEoB;AAC5C;AAID;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,MAAIC,aAAJ;AAAA,MACEC,UADF;AAAA,MAEEC,eAAe,GAAG,KAFpB;;AAGA,MACEH,UAAU,IACVA,UAAU,CAACI,YAAX,EADA,IAEAJ,UAAU,CAACI,YAAX,GAA0BC,KAH5B,EAIE;AACA,UAAMC,gBAAgB,GAAGN,UAAU,CAACI,YAAX,GAA0BC,KAAnD;AACAJ,IAAAA,aAAa,GAAG,CAACK,gBAAgB,CAACC,KAAlC;AACAL,IAAAA,UAAU,GAAG,CAACI,gBAAgB,CAACE,KAA/B;AACAL,IAAAA,eAAe,GAAGG,gBAAgB,CAACG,MAAnC;AACD;;AACD,SAAO,CAACR,aAAD,EAAgBC,UAAhB,EAA4BC,eAA5B,CAAP;AACD;AAID;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASO,UAAT,CAAoBC,KAApB,EAA2B;AACxC,QAAMX,UAAU,GAAGb,UAAU,CAACG,iBAAD,CAA7B,CADwC,CAExC;;AACA,QAAM,CAACW,aAAD,EAAgBW,cAAhB,IAAkCvB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACa,UAAD,EAAaW,WAAb,IAA4BxB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,eAAD,EAAkBW,gBAAlB,IAAsCzB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC4B,eAAD,EAAkBC,gBAAlB,IAAsC7B,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAE8B,IAAAA;AAAF,MAAchC,UAAU,CAACO,mBAAD,CAA9B;AACA,QAAM,CAAE0B,YAAF,EAAeC,eAAf,IAAkCF,OAAxC;AACA,QAAM;AAAEG,IAAAA,YAAF;AACJC,IAAAA,OADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,sBALI;AAMJC,IAAAA,sBANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA;AARI,MASA3C,UAAU,CAACQ,SAAD,CAThB;AAUA,QAAM,CAAEoC,OAAF,EAAUC,UAAV,IAAyBV,YAA/B;AAEA,QAAMW,WAAW,GAAGrC,cAAc,EAAlC;AACAsC,EAAAA,MAAM,CAACC,gBAAP,GAAwBF,WAAxB;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsChD,QAAQ,CAAC,MAAD,CAApD;AACA,QAAM,CAACiD,eAAD,EAAkBC,kBAAlB,IAAwClD,QAAQ,CAAC,YAAD,CAAtD,CAzBwC,CAyB6B;;AACrE,QAAMmD,QAAQ,GAAGtD,KAAK,CAACuD,SAAN,EAAjB;AACA,QAAMC,cAAc,GAAGxD,KAAK,CAACuD,SAAN,EAAvB;AAEArD,EAAAA,SAAS,CAAC,MAAM;AAAY;AAC1B,QAAI,CAACY,UAAL,EAAiB;AAEjB,UAAM2C,MAAM,GAAG,CACb,oBADa,EAEb,kBAFa,EAGb,gBAHa,CAAf;;AAMA,SAAK,MAAMC,KAAX,IAAoBD,MAApB,EAA4B;AAC1B3C,MAAAA,UAAU,CAAC6C,EAAX,CAAcD,KAAd,EAAqB,MAAME,UAAU,CAAC,MAAIb,WAAW,EAAhB,EAAmB,GAAnB,CAArC;AACD;;AAED,WAAO,SAASc,OAAT,GAAmB;AACxB,WAAK,MAAMH,KAAX,IAAoBD,MAApB,EAA4B;AAC1B3C,QAAAA,UAAU,CAACgD,GAAX,CAAeJ,KAAf,EAAsB,MAAME,UAAU,CAAC,MAAIb,WAAW,EAAhB,EAAmB,GAAnB,CAAtC;AACD;AACF,KAJD;AAMD,GAnBQ,EAmBN,CAACjC,UAAD,CAnBM,CAAT,CA7BwC,CAmD1C;;AACAZ,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAI,CAACgC,YAAY,CAAC6B,WAAlB,EAA+B;AAAC;AAAQ;;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,IAAAA,SAAS;AACT/B,IAAAA,eAAe,CAACgC,IAAI,KAAG,EACrB,GAAGA,IADkB;AAErBJ,MAAAA,WAAW,EAAC;AAFS,KAAH,CAAL,CAAf;AAID,GARQ,EAQP,CAAC7B,YAAY,CAAC6B,WAAd,CARO,CAAT;;AAUA,QAAMG,SAAS,GAAG,MAAM;AACpBF,IAAAA,OAAO,CAACC,GAAR,CAAa,0BAAb;AACAnD,IAAAA,UAAU,CAACsD,cAAX,CAA0BlC,YAA1B,EAAwC,GAAxC;AACH,GAHD;;AAOE,WAASmC,mBAAT,GAA+B;AAC7BlC,IAAAA,eAAe,CAAEmC,SAAD,KAAc,EAC5B,GAAGA,SADyB;AAE5BC,MAAAA,QAAQ,EAAE,CAACD,SAAS,CAACC;AAFO,KAAd,CAAD,CAAf;AAIEpC,IAAAA,eAAe,CAACgC,IAAI,KAAG,EACrB,GAAGA,IADkB;AAErBJ,MAAAA,WAAW,EAAC;AAFS,KAAH,CAAL,CAAf;AAGO;;AAIX,WAASS,cAAT,GAA0B;AACxB,QAAIC,UAAU,GAAGvC,YAAY,CAACwC,MAAb,CAAoBC,OAApB,IAA+B9B,OAAO,CAAC+B,QAAR,CAAiBC,YAAjB,CAA8B3C,YAAY,CAACwC,MAAb,CAAoBC,OAAlD,CAAhD;AACA,QAAIG,UAAU,GAAG5C,YAAY,CAACwC,MAAb,CAAoBK,OAApB,IAA+BlC,OAAO,CAAC+B,QAAR,CAAiBC,YAAjB,CAA8B3C,YAAY,CAACwC,MAAb,CAAoBK,OAAlD,CAAhD;;AACA,QAAG7C,YAAY,CAACwC,MAAb,CAAoBC,OAApB,IAA6B9B,OAAO,CAACmC,IAAxC,EAA8C;AAACP,MAAAA,UAAU,GAAC,IAAX;AAAgB;;AAC/D,QAAGvC,YAAY,CAACwC,MAAb,CAAoBK,OAApB,IAA6BlC,OAAO,CAACmC,IAAxC,EAA8C;AAACF,MAAAA,UAAU,GAAC,IAAX;AAAgB;;AAE/D,QAAI,CAACL,UAAD,IAAe,CAACK,UAApB,EAAgC;AAACd,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAA+B;AAAO;;AAEvE,UAAMgB,MAAM,GAAGjC,MAAM,CAACkC,cAAP,GAAwB,OAAxB,GAAkC,MAAjD;AACA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,IAAI,EAAE,cADc;AAEpBC,MAAAA,MAAM,EAAEjC,eAFY;AAGpB6B,MAAAA,MAAM,EAAEA,MAHY;AAIpBK,MAAAA,SAAS,EAAEb;AAJS,KAAtB;AAMA,UAAMc,aAAa,GAAG;AACpBH,MAAAA,IAAI,EAAE,cADc;AAEpBC,MAAAA,MAAM,EAAEjC,eAAe,GAAG,GAFN;AAGpB6B,MAAAA,MAAM,EAAEA,MAHY;AAIpBK,MAAAA,SAAS,EAAER;AAJS,KAAtB;;AAOA,QAAIL,UAAJ,EAAgB;AACd,UAAGA,UAAU,IAAE,IAAf,EAAqB;AACnB3D,QAAAA,UAAU,CAACsD,cAAX,CAA0Be,aAA1B,EAAwCV,UAAxC;AACD,OAFD,MAGK,IAAGA,UAAU,IAAE,IAAf,EAAqB;AACxBnE,QAAAA,WAAW,CAAC8C,eAAD,EAAiB6B,MAAjB,CAAX;AACD;;AACDjB,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAOgB,MAAO,eAAc/C,YAAY,CAACwC,MAAb,CAAoBC,OAAQ,EAArE;AACD;;AACD,QAAIG,UAAJ,EAAgB;AACd,UAAGA,UAAU,IAAE,IAAf,EAAqB;AACnBhE,QAAAA,UAAU,CAACsD,cAAX,CAA0BmB,aAA1B,EAAwCT,UAAxC;AACD,OAFD,MAGK,IAAGA,UAAU,IAAE,IAAf,EAAqB;AACxBxE,QAAAA,WAAW,CAAC8C,eAAe,GAAC,GAAjB,EAAqB6B,MAArB,CAAX;AACD;;AACDjB,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAOgB,MAAO,eAAc/C,YAAY,CAACwC,MAAb,CAAoBK,OAAQ,EAArE;AACD;;AAED/B,IAAAA,MAAM,CAACkC,cAAP,GAAuB,CAAClC,MAAM,CAACkC,cAA/B;AACA/B,IAAAA,iBAAiB,CAAC,CAACH,MAAM,CAACkC,cAAR,GAAyB,MAAzB,GAAkC,OAAnC,CAAjB;AAGD;;AAGD,WAASM,kBAAT,GAA+B;AAC7BlC,IAAAA,QAAQ,CAACmC,OAAT,CAAiBC,SAAjB,CAA2BC,MAA3B,CAAkC,QAAlC;AACAnC,IAAAA,cAAc,CAACiC,OAAf,CAAuBG,SAAvB,GAAmCtC,QAAQ,CAACmC,OAAT,CAAiBC,SAAjB,CAA2BG,QAA3B,CAAoC,QAApC,IAAgD,eAAhD,GAAkE,GAArG;AACD;AAUD;AACF;AACA;AACA;;;AACE3F,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,UAAL,EAAiB;;AAEjB,aAASgF,0BAAT,CAAoCpC,KAApC,EAA2C;AACzCA,MAAAA,KAAK,IAAIrD,aAAa,CAACqD,KAAD,CAAtB;AACA,YAAM,CAAC3C,aAAD,EAAgBC,UAAhB,EAA4BC,eAA5B,IAA+CJ,eAAe,CAClEC,UADkE,CAApE;AAGAY,MAAAA,cAAc,CAACX,aAAD,CAAd;AACAY,MAAAA,WAAW,CAACX,UAAD,CAAX;AACAY,MAAAA,gBAAgB,CAACX,eAAD,CAAhB;AACD,KAXa,CAad;;;AACA6E,IAAAA,0BAA0B,GAdZ,CAgBd;;AACAhF,IAAAA,UAAU,CAAC6C,EAAX,CAAc,qBAAd,EAAqCmC,0BAArC,EAjBc,CAmBd;;AACA,WAAO,SAASjC,OAAT,GAAmB;AACxB/C,MAAAA,UAAU,CAACgD,GAAX,CAAe,qBAAf,EAAsCgC,0BAAtC;AACD,KAFD;AAGD,GAvBQ,EAuBN,CAAChF,UAAD,CAvBM,CAAT;AA0BE;;AAIF,sBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAGI,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAOI,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAWI,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,eAeA,oBAAC,YAAD;AACM,IAAA,IAAI,EAAC,QADX;AAEM,IAAA,aAAa,EAAC,eAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfA,CAJJ,eA0BI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,aAAa,EAAC,eAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CA1BJ,eAmCI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAC,SADT;AAEI,IAAA,aAAa,EAAC,eAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAMM,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANN,eAUM,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVN,eAcM,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,aAAa,EAAC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdN,CAnCJ,CAHJ,eA6EM;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACgB;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,EAAE,EAAC,OAA1B;AAAkC,IAAA,OAAO,EAAEoB,YAAY,CAACqC,QAAxD;AAAkE,IAAA,QAAQ,EAAEF,mBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAM,IAAA,KAAK,EAAC,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADhB,eAKgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALhB,CA7EN,CADF,2CA+FA;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,GAAG,EAAEf,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAIoB;AAAK,IAAA,KAAK,EAAE;AAACyC,MAAAA,MAAM,EAAC,MAAR;AAAeC,MAAAA,MAAM,EAAC;AAAtB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAM,IAAA,MAAM,EAAG,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAU,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAQ,IAAA,KAAK,EAAC,yBAAd;AAAwC,IAAA,QAAQ,EAAGC,CAAD,IAAO;AAAC7C,MAAAA,kBAAkB,CAAE6C,CAAC,CAACb,MAAF,CAAS1E,KAAX,CAAlB;AAAqCqD,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBiC,CAAC,CAACb,MAAF,CAAS1E,KAAxC;AAA+C,KAA9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFA,eAIA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAJA,eAKA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BALA,eAMA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBANA,eAOA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPA,eAQA;AAAQ,IAAA,KAAK,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BARA,CADA,CADJ,CADA,CAJpB,eAoBkB;AAAM,IAAA,KAAK,EAAE;AAACwF,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,QAAQ,EAAE,MAA3B;AAAmCC,MAAAA,UAAU,EAAC;AAA9C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE7B,cAAjB;AAAiC,IAAA,EAAE,EAAC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDtB,cAAlD,CADJ,CApBlB,CA/FA,eA0HA;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,GAAG,EAAEM,cAAtC;AAAsD,IAAA,OAAO,EAAEgC,kBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA1HA,CADE;AAgID","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel.css';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport RoleSelector from '../RoleSelector/RoleSelector';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext';\n\n\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext);\n  // const [sessionState, setSessionState ] = useContext(SessionContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const { myStateArray, \n    setName, \n    setRole,\n    setUserList,\n    setViewMode,\n    setCamOnAtSessionStart,\n    setMicOnAtSessionStart,\n    setAdminPresent,\n    setAmAdmin, \n    } = useContext(MyContext);\n  const [ myState,setMyState ] = myStateArray;\n\n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel=forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play');\n  const [targetRecording, setTargetRecording] = useState('monologue1') ///////HAVE TO CHANGE THIS IN TWO PLACES\n  const training = React.createRef();\n  const trainingToggle = React.createRef();\n\n  useEffect(() => {           //listen for participants leaving or joining and update component\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-left',\n      'joined-meeting',\n    ];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(()=>forceUpdate(),100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(()=>forceUpdate(),100));\n      }\n    };\n\n  }, [callObject]);\n\n\n///update other participants when state changes.\nuseEffect(()=>{\n  if (!sessionState.hasAnUpdate) {return;}\n  console.log('****HAS AN UPDATE');\n  sendState(); \n  setSessionState(prev=>({\n    ...prev,\n    hasAnUpdate:false,\n  })); \n},[sessionState.hasAnUpdate]);\n\nconst sendState = () => {\n    console.log (\"Sending current state...\");\n    callObject.sendAppMessage(sessionState, '*'); \n}\n\n\n\n  function toggleSessionActive() {\n    setSessionState((prevState)=>({\n      ...prevState,\n      isActive: !prevState.isActive\n      }));\n      setSessionState(prev=>({\n        ...prev,\n        hasAnUpdate:true,\n      }));  }\n\n\n\n  function togglePractice() {\n    let recipientA = sessionState.roleOf.Shadow1 && myState.userList.sessionIdFor[sessionState.roleOf.Shadow1];\n    let recipientB = sessionState.roleOf.Shadow2 && myState.userList.sessionIdFor[sessionState.roleOf.Shadow2];\n    if(sessionState.roleOf.Shadow1==myState.name) {recipientA='me'}\n    if(sessionState.roleOf.Shadow2==myState.name) {recipientB='me'}\n\n    if (!recipientA && !recipientB) {console.log('no recipients.'); return}\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA,\n    }\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    }\n\n    if (recipientA) {\n      if(recipientA!='me') {\n        callObject.sendAppMessage(instructionsA,recipientA);\n      }\n      else if(recipientA=='me') {\n        audioPlayer(targetRecording,action);\n      }\n      console.log(`Sent ${action} request to ${sessionState.roleOf.Shadow1}`);\n    }\n    if (recipientB) {\n      if(recipientB!='me') {\n        callObject.sendAppMessage(instructionsB,recipientB);\n      }\n      else if(recipientB=='me') {\n        audioPlayer(targetRecording+'B',action);\n      }\n      console.log(`Sent ${action} request to ${sessionState.roleOf.Shadow2}`);\n    }\n      \n    window.audioIsPlaying=(!window.audioIsPlaying);\n    setPlayButtonText(!window.audioIsPlaying ? 'Play' : 'Pause');\n\n\n  }\n\n\n  function toggleTrainingMode () {\n    training.current.classList.toggle('hidden');\n    trainingToggle.current.innerText = training.current.classList.contains('hidden') ? 'Show Practice' : 'X';\n  }\n\n\n\n  \n\n                  \n         \n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n\n    /* // Play practice audio for users */\n\n    \n\n  return (\n<div>\n  <div className=\"admin-panel\">\n\n    {/* BEGIN ROLE SELECTORS SECTION*/}\n      <div className=\"role-selector-section\">\n\n\n          {/* Buyer selector */}\n          <div className=\"selector-box\">\n            Buyer(s)\n\n              <RoleSelector \n                role=\"Buyer1\"\n                selectedRoles='selectedRoles'\n              />\n              <RoleSelector \n                role=\"Buyer2\"\n                selectedRoles='selectedRoles'\n              />\n              <RoleSelector \n                role=\"Buyer3\"\n                selectedRoles='selectedRoles'\n              />\n          <RoleSelector \n                role=\"Buyer4\"\n                selectedRoles='selectedRoles'\n              />\n          </div>\n          \n          {/* Seller Selector */}\n          <div className=\"selector-box\">\n            Seller\n              <RoleSelector \n                  role=\"Seller\"\n                  selectedRoles='selectedRoles'\n                />\n          </div>\n\n          {/* Shadow selector */}\n          <div className=\"selector-box\">\n            Seller's shadow(s)\n              <RoleSelector \n                  role=\"Shadow1\"\n                  selectedRoles='selectedRoles'\n                />\n                <RoleSelector \n                  role=\"Shadow2\"\n                  selectedRoles='selectedRoles'\n                />\n                <RoleSelector \n                  role=\"Shadow3\"\n                  selectedRoles='selectedRoles'\n                />\n                <RoleSelector \n                  role=\"Shadow4\"\n                  selectedRoles='selectedRoles'\n                />\n            </div>\n\n          {/* Unassigned (working) */}\n          {/* <div className=\"selector-box\">\n            Unassigned\n            <RoleContainer\n            />\n           </div> */}\n\n\n        </div>\n    {/* END ROLE SELECTORS SECTION */}\n\n\n    \n\n\n\n\n\n    {/* <!-- BEGIN START / STOP TOGGLE --> */}\n        <div className='session-toggle'>\n                        <label class=\"switch\">\n                            <input type=\"checkbox\" id='state' checked={sessionState.isActive} onChange={toggleSessionActive}/>\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <p>Session active</p>\n        </div>\n     {/* <!-- END START / STOP TOGGLE --> */}\n\n\n     \n\n    </div>\n// ***End admin panel***\n\n{/* START TRAINING AUDIO SECTION */}\n\n<div className='practice-audio hidden' ref={training}>\n    Practice audio\n        \n                    {/* Recordings for Seconding */}\n                    <div style={{height:'30px',margin:'auto'}}>\n                    <form action = ''>\n                        <fieldset style={{border:'none'}}>\n                        <select class='practice-audio-dropdown' onChange={(e) => {setTargetRecording (e.target.value); console.log('***CHANGED TO ' + e.target.value)}}\n                        >\n                        <option value = 'monologue1'>What makes CEB different (mono)</option>    \n                        {/* ///IMPORTANT: IF DEFAULT VALUE CHANGES ABOVE, ALSO HAVE TO CHANGE IT IN setTargetRecording HOOK */}\n                        <option value = 'monologue2'>Searching for PAGA Claims (mono)</option>\n                        <option value = 'monologue3'>Audio Engineer (mono)</option>\n                        <option value = 'monologue4'>IBM Garage (mono)</option>\n                        <option value = 'monologue5'>Livestorm 1 (mono)</option>\n                        <option value = 'monologue6'>Livestorm 2 (mono)</option>\n                    </select>\n                    </fieldset>\n                    </form>\n                </div> \n                  <span style={{color: 'green', fontSize: '16px', fontFamily:'Verdana, Geneva, Tahoma, sans-serif'}}>\n                      <button onClick={togglePractice} id='play-pause'>{playButtonText}</button>\n                    </span>\n    </div>\n\n    {/* END TRAINING AUDIO SECTION */}\n\n<div className='training-toggle' ref={trainingToggle} onClick={toggleTrainingMode}>Show Practice</div>\n</div>\n    \n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}