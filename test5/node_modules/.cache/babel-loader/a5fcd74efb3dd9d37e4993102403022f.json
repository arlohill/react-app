{"ast":null,"code":"/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_secret\"] }] */\nconst axios = require('axios');\n\nconst EventEmitter = require('events');\n\nconst pkg = require('../package.json');\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\n\n\nclass Base extends EventEmitter {\n  constructor(...params) {\n    super();\n\n    if (params[0] instanceof Base) {\n      return Object.assign(this, params[0]);\n    }\n\n    if (typeof params[0] === 'object') {\n      this.config = params[0]; // eslint-disable-line prefer-destructuring\n\n      this.tokenId = undefined;\n      this.tokenSecret = undefined;\n    } else {\n      this.tokenId = params[0]; // eslint-disable-line prefer-destructuring\n\n      this.tokenSecret = params[1]; // eslint-disable-line prefer-destructuring\n\n      this.config = params[2]; // eslint-disable-line prefer-destructuring\n    }\n\n    this.http = axios.create({\n      baseURL: this.config.baseUrl,\n      headers: {\n        'User-Agent': `Mux Node | ${pkg.version}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      mode: 'cors',\n      withCredentials: false,\n      auth: {\n        username: this.tokenId,\n        password: this.tokenSecret\n      }\n    });\n    this.http.interceptors.request.use(req => {\n      this.emit('request', req);\n      return req;\n    });\n    this.http.interceptors.response.use(res => {\n      this.emit('response', res);\n\n      if (this.isVideoUrl(res.config.url)) {\n        return res.data && res.data.data;\n      }\n\n      return res.data;\n    }, errorRes => Promise.reject(errorRes.response && errorRes.response.data.error || errorRes));\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  isVideoUrl(url) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options = {}) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token = process.env.MUX_TOKEN_ID) {\n    this._tokenId = token;\n\n    if (typeof this._tokenId === 'undefined') {\n      throw new Error('API Access Token must be provided.');\n    }\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret = process.env.MUX_TOKEN_SECRET) {\n    this._secret = secret;\n\n    if (typeof this._secret === 'undefined' || this._secret === '') {\n      throw new Error('API secret key must be provided');\n    }\n  }\n\n  get tokenSecret() {\n    return this._secret;\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/base.js"],"names":["axios","require","EventEmitter","pkg","Base","constructor","params","Object","assign","config","tokenId","undefined","tokenSecret","http","create","baseURL","baseUrl","headers","version","Accept","mode","withCredentials","auth","username","password","interceptors","request","use","req","emit","response","res","isVideoUrl","url","data","errorRes","Promise","reject","error","startsWith","options","_config","token","process","env","MUX_TOKEN_ID","_tokenId","Error","secret","MUX_TOKEN_SECRET","_secret","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_secret\"] }] */\n\nconst axios = require('axios');\nconst EventEmitter = require('events');\nconst pkg = require('../package.json');\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nclass Base extends EventEmitter {\n  constructor(...params) {\n    super();\n\n    if (params[0] instanceof Base) {\n      return Object.assign(this, params[0]);\n    }\n\n    if (typeof params[0] === 'object') {\n      this.config = params[0]; // eslint-disable-line prefer-destructuring\n      this.tokenId = undefined;\n      this.tokenSecret = undefined;\n    } else {\n      this.tokenId = params[0]; // eslint-disable-line prefer-destructuring\n      this.tokenSecret = params[1]; // eslint-disable-line prefer-destructuring\n      this.config = params[2]; // eslint-disable-line prefer-destructuring\n    }\n\n    this.http = axios.create({\n      baseURL: this.config.baseUrl,\n      headers: {\n        'User-Agent': `Mux Node | ${pkg.version}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      mode: 'cors',\n      withCredentials: false,\n      auth: {\n        username: this.tokenId,\n        password: this.tokenSecret,\n      },\n    });\n\n    this.http.interceptors.request.use(req => {\n      this.emit('request', req);\n\n      return req;\n    });\n\n    this.http.interceptors.response.use(\n      res => {\n        this.emit('response', res);\n        if (this.isVideoUrl(res.config.url)) {\n          return res.data && res.data.data;\n        }\n\n        return res.data;\n      },\n      errorRes =>\n        Promise.reject(\n          (errorRes.response && errorRes.response.data.error) || errorRes\n        )\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isVideoUrl(url) {\n    return url.startsWith(`/video/v1/`);\n  }\n\n  set config(options = {}) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token = process.env.MUX_TOKEN_ID) {\n    this._tokenId = token;\n\n    if (typeof this._tokenId === 'undefined') {\n      throw new Error('API Access Token must be provided.');\n    }\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret = process.env.MUX_TOKEN_SECRET) {\n    this._secret = secret;\n\n    if (typeof this._secret === 'undefined' || this._secret === '') {\n      throw new Error('API secret key must be provided');\n    }\n  }\n\n  get tokenSecret() {\n    return this._secret;\n  }\n}\n\nmodule.exports = Base;\n"]},"metadata":{},"sourceType":"script"}