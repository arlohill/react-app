{"ast":null,"code":"/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base asset path for the Mux API\n * */\n\n\nconst PATH = '/video/v1/uploads';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nconst buildBasePath = uploadId => `${PATH}/${uploadId}`;\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\n\n\nclass Uploads extends Base {\n  /**\n   * Creates a direct upload with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Upload JSON parameters (e.g timeout)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new upload\n   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n   * // Now push a file to the URL returned.\n   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-direct-upload\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(new Error('Params are required for creating a direct upload'));\n    }\n\n    return this.http.post(PATH, params);\n  }\n  /**\n   * Cancels an upload\n   * @param {string} uploadId - The ID for the upload intended for cancellation\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Cancels an upload\n   * Video.Uploads.cancel(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/cancel-direct-upload\n   */\n\n\n  cancel(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required'));\n    }\n\n    return this.http.put(`${buildBasePath(uploadId)}/cancel`);\n  }\n  /**\n   * Get an upload\n   * @param {string} uploadId - The ID for the upload\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an upload\n   * Video.Uploads.get(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-direct-upload\n   */\n\n\n  get(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required to get an asset'));\n    }\n\n    return this.http.get(buildBasePath(uploadId));\n  }\n  /**\n   * List all uploads\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all uploads\n   * Video.Uploads.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-direct-uploads\n   */\n\n\n  list(params) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n\n}\n\nmodule.exports = Uploads;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/video/resources/uploads.js"],"names":["Base","require","PATH","buildBasePath","uploadId","Uploads","create","params","Promise","reject","Error","http","post","cancel","put","get","list","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,mBAAb;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGC,QAAQ,IAAK,GAAEF,IAAK,IAAGE,QAAS,EAAtD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAN,SAAsBL,IAAtB,CAA2B;AACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,QAAI,CAACA,MAAL,EAAa;AACX,aAAOC,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,kDAAV,CADK,CAAP;AAGD;;AAED,WAAO,KAAKC,IAAL,CAAUC,IAAV,CAAeV,IAAf,EAAqBK,MAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,MAAM,CAACT,QAAD,EAAW;AACf,QAAI,CAACA,QAAL,EAAe;AACb,aAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACD;;AACD,WAAO,KAAKC,IAAL,CAAUG,GAAV,CAAe,GAAEX,aAAa,CAACC,QAAD,CAAW,SAAzC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,GAAG,CAACX,QAAD,EAAW;AACZ,QAAI,CAACA,QAAL,EAAe;AACb,aAAOI,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,0CAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKC,IAAL,CAAUI,GAAV,CAAcZ,aAAa,CAACC,QAAD,CAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,IAAI,CAACT,MAAD,EAAS;AACX,WAAO,KAAKI,IAAL,CAAUI,GAAV,CAAcb,IAAd,EAAoB;AAAEK,MAAAA;AAAF,KAApB,CAAP;AACD;;AApFwB;;AAuF3BU,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/uploads';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = uploadId => `${PATH}/${uploadId}`;\n\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\nclass Uploads extends Base {\n  /**\n   * Creates a direct upload with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Upload JSON parameters (e.g timeout)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new upload\n   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n   * // Now push a file to the URL returned.\n   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-direct-upload\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating a direct upload')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Cancels an upload\n   * @param {string} uploadId - The ID for the upload intended for cancellation\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Cancels an upload\n   * Video.Uploads.cancel(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/cancel-direct-upload\n   */\n  cancel(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required'));\n    }\n    return this.http.put(`${buildBasePath(uploadId)}/cancel`);\n  }\n\n  /**\n   * Get an upload\n   * @param {string} uploadId - The ID for the upload\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an upload\n   * Video.Uploads.get(uploadId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-direct-upload\n   */\n  get(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(\n        new Error('An upload ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(uploadId));\n  }\n\n  /**\n   * List all uploads\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all uploads\n   * Video.Uploads.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-direct-uploads\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = Uploads;\n"]},"metadata":{},"sourceType":"script"}