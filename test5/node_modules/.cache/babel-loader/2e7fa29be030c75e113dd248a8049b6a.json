{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/App/App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport { sendState } from '../AdminPanel/AdminFunctions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n    type: 'sessionState',\n    isKnown: false,\n    isActive: false,\n    AdminVisible: false,\n    roleOf: {\n      Buyer1: '',\n      Buyer2: '',\n      Buyer3: '',\n      Seller: '',\n      Shadow1: '',\n      Shadow2: '',\n      Shadow3: '',\n      Shadow4: ''\n    }\n  });\n  const [my, setMy] = useState({\n    name: 'Your first name',\n    role: 'Attendee',\n    adminStatus: false\n  });\n\n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\";\n  }\n\n  window.setViewMode = viewMode => {\n    viewMode && console.log('Changing view mode to: ' + viewMode);\n    setSubscriptions(callObject, viewMode);\n  };\n  /**\n   * Creates a new call room.\n   */\n\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  /*   \n  ARLO NOTE:\n        Below is where the trouble is. myInfo.name is set via a child component, <StartScreen>, \n        and it successfully changes myInfo.name (I've confirmed since it's pinned to the Window).\n        The below works... the first time. But then callObject.participants().local.user_name gets \"stuck\", \n        so if you exit and leave, or even refresh the page, it never changes. Weird behavior\n  */\n\n  const startJoiningCall = useCallback(url => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({\n      subscribeToTracksAutomatically: false\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n\n    if (window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n      newCallObject.join({\n        userName: window.myName,\n        url,\n        audioSource: window.initialInputs[0],\n        videoSource: window.initialInputs[1]\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(mediaStream => {\n        if (mediaStream) {\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n\n          if (localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0) {\n            newCallObject.join({\n              userName: my.name,\n              url,\n              audioSource: localAudio[0],\n              videoSource: localVideo[0]\n            });\n          }\n        } else {//say something to user, like you don't have any mic or you should allow use mic to this website\n        }\n      });\n    }\n\n    console.log('joining the call as ' + my.name);\n    const pageUrl = pageUrlFromRoomUrl(roomUrl) + '&N=' + window.myName + '&R=' + window.myRole; // let connector = '?';\n    // if (pageUrl.includes('?roomUrl=')) {let connector = '&'};\n    // if (window.myName) {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl + connector + \"R=\" + window.myRole + \"&N=\" + window.myName);\n    // } else if (window.myRole) {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl + connector + \"R=\" + window.myRole);\n    // } else {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl);\n    // }\n  }, []);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl = pageUrl;\n\n    if (window.myName) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&N=' + window.myName;\n      } else {\n        pageUrl += '?N=' + window.myName;\n      }\n    }\n\n    if (window.myRole) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&R=' + window.myRole;\n      } else {\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&P=' + window.myP;\n      } else {\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  function getState() {\n    if (window.sessionState.isKnown == true) {\n      clearInterval(window.stateRequest);\n      return;\n    } // if (window.adminPresent) {\n\n\n    callObject.sendAppMessage(\"State please?\", '*');\n    console.log('Requesting meeting state...');\n  }\n\n  const checkIfAdminPresent = () => {\n    return new Promise(resolve => {\n      window.adminPresent = false;\n      let ps = callObject.participants();\n      const lookForMoreParticipants = setInterval(() => {\n        if (!Object.keys(ps).length > 1) {\n          return;\n        }\n\n        ;\n        console.log(Object.keys(ps));\n        clearInterval(lookForMoreParticipants);\n\n        for (const p in ps) {\n          let thisUserName = ps[p].user_name;\n\n          if (thisUserName.includes('_Admin') && p !== 'local') {\n            window.adminPresent = true;\n          }\n\n          console.log(`Participant present: ${thisUserName}`);\n        }\n      }, 500);\n      resolve();\n    });\n  };\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error', 'participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          });\n          window.userList.push(window.myName);\n          console.log('JOINED MEETING');\n\n          if (window.myName == \"\") {\n            callObject.leave();\n          }\n\n          if (!window.sessionState.isKnown) {\n            if (window.myRole == \"Admin\") {\n              checkIfAdminPresent().then(() => {\n                window.sessionState.isKnown = window.adminPresent ? false : true;\n                window.adminPresent ? console.log(`An admin was present`) : console.log(`An admin was NOT present`);\n\n                if (!window.sessionState.isKnown) {\n                  window.stateRequest = setInterval(() => {\n                    getState();\n                  }, 2500);\n                }\n              });\n            } else {\n              window.stateRequest = setInterval(() => {\n                getState();\n              }, 2500);\n            }\n          }\n\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n\n        case 'participant-joined':\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n        let participants = callObject.participants(); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          const setSubs = () => {\n            setSubscriptions(callObject);\n          }; //temporarily commented out\n          // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n          //     {return;}\n          // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n          //     clearInterval(stateRequest);\n          // }\n\n\n          let priorSessionState = window.sessionState;\n          window.sessionState = e.data;\n          setSessionState(e.data);\n          let needToSetSubs = false; // change my role if it has been updated in sessionState\n\n          if (window.sessionState.roleOf != priorSessionState.roleOf) {\n            let myNewRole = 'Attendee'; //default, if no role assigned\n\n            for (const key in window.sessionState.roleOf) {\n              if (window.sessionState.roleOf[key] == window.myName) {\n                myNewRole = key;\n              }\n            }\n\n            if (myNewRole != window.myRole) {\n              window.myRole = myNewRole;\n\n              if (window.myRole.includes('1')) {\n                window.myNumber = 1;\n              } else if (window.myRole.includes('2')) {\n                window.myNumber = 2;\n              }\n            }\n\n            if (window.sessionState.isActive) {\n              activateSession(); //rebuild UI for the newly assigned role, mid-session\n            }\n\n            needToSetSubs = true;\n          } //create or delete rooms according to assignments of Thirds\n          // if (window.sessionState.roleOf.Room3A!='') {\n          //     !$(\"#view-mode option[value=Room3\").length>0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n          //   } else {\n          //     $(\"#view-mode option[value=Room3\").remove();\n          //   }\n          // if (window.sessionState.roleOf.Room4A!='') {\n          //     !$(\"#view-mode option[value=Room4\").length>0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n          //   } else {\n          //     $(\"#view-mode option[value=Room4\").remove();\n          //   }\n          // if (window.sessionState.roleOf.Room5A!='') {\n          //     !$(\"#view-mode option[value=Room5\").length>0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n          //   } else {\n          //     $(\"#view-mode option[value=Room5\").remove();\n          //   }\n          //determine if need to reset subs\n\n\n          if (priorSessionState.isActive !== window.sessionState.isActive || priorSessionState.AdminVisible !== window.sessionState.AdminVisible) {\n            needToSetSubs = true;\n          } //now, reset subscriptions if necessary\n\n\n          if (needToSetSubs) {\n            if (!priorSessionState.isActive && window.sessionState.isActive && window.myRole == 'Attendee' || window.myRole == 'Admin') {\n              setSubscriptions(callObject, 'Room1');\n            } else {\n              setSubs();\n            }\n          } //when session starts\n\n\n          if (priorSessionState.isActive == false && window.sessionState.isActive == true) {\n            activateSession();\n\n            if (window.myRole == 'Attendee' || window.myRole == 'Admin') {}\n          } //when session is paused\n          else if (priorSessionState.isActive == true && window.sessionState.isActive == false) {\n              pauseSession();\n              window.setViewMode(null);\n            }\n        } else if (e.data.constructor === Object && e.data.type == \"instructions\" && e.data.recipient == callObject.participants().local.session_id) {\n          audioPlayer(e.data.target, e.data.action);\n        } else if (e.data == \"State please?\") {\n          if (window.amAdmin && window.sessionState.isKnown) {\n            sendState(window.sessionState, callObject);\n          }\n        }\n      } //not used in this module, since there's no timer\n      // if none of the above, just overlay the message\n      // else if (e.data.constructor !== Object) {    \n      //     overlayMessage(e.data,10000);\n      // }\n\n\n      async function activateSession() {\n        switch (window.myRole) {\n          case 'Attendee':\n            // $(\"#cam-instructions\").fadeOut(500);\n            // $(\"#cam-image\").fadeOut(500);\n            // $(\"#mic-instructions\").fadeOut(500);\n            // $(\"#mic-image\").fadeOut(500);\n            // $('#show-qr-code').fadeOut(500);\n            // $('#get-prompt').fadeOut(500);\n            // document.getElementById('my-view').style.visibility='visible';\n            // $('#my-view').fadeIn(500);\n            window.camWasOn = callObject.localVideo();\n\n            if (window.camWasOn) {// toggleCam()\n            } // $('#view-mode').val('Room1').trigger(\"change\");\n            // document.getElementById(\"overlay\").className = \"superimposed-text-attendees\";\n            // document.getElementById(\"overlay-text\").className = \"overlay-text-attendees\";\n\n\n            break;\n\n          case 'Participant1':\n          case 'Participant2':\n            // $(\"#cam-instructions\").fadeIn(500);\n            // $(\"#cam-image\").fadeIn(500);\n            // $(\"#mic-instructions\").fadeIn(500);\n            // $(\"#mic-image\").fadeIn(500);\n            // $('#show-qr-code').fadeOut(500);\n            // $('#get-prompt').fadeIn(500);\n            // $('#my-view').fadeOut(500);\n            // document.getElementById('my-view').style.visibility='hidden';\n            // document.getElementById(\"overlay\").className = \"superimposed-text\";\n            // document.getElementById(\"overlay-text\").className = \"overlay-text\";\n            // displayName();\n            // closeChat();\n            break;\n\n          case 'Actor1':\n          case 'Actor2':\n          case 'Room3A':\n          case 'Room3B':\n          case 'Room4A':\n          case 'Room4B':\n          case 'Room5A':\n          case 'Room5B':\n            // $(\"#cam-instructions\").fadeIn(500);\n            // $(\"#cam-image\").fadeIn(500);\n            // $(\"#mic-instructions\").fadeIn(500);\n            // $(\"#mic-image\").fadeIn(500);\n            // $('#show-qr-code').fadeIn(500);\n            // $('#get-prompt').fadeOut(500);\n            // $('#my-view').fadeOut(500);\n            // document.getElementById('my-view').style.visibility='hidden';\n            // document.getElementById(\"overlay\").className = \"superimposed-text\";\n            // document.getElementById(\"overlay-text\").className = \"overlay-text\";\n            // displayName();\n            // closeChat();\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      async function pauseSession() {// $(\"#cam-instructions\").fadeIn(500);\n        // $(\"#cam-image\").fadeIn(500);\n        // $(\"#mic-instructions\").fadeIn(500);\n        // $(\"#mic-image\").fadeIn(500);\n        // $('#show-qr-code').fadeIn(500);\n        // $('#get-prompt').fadeOut(500);\n        // document.getElementById('get-prompt').style.visibility='hidden';\n        // $('#my-view').fadeOut(500);\n        // if (window.camWasOn && !callObject.localVideo()) {toggleCam()}; // turn back on cam if it was noted as on before session\n      }\n    } //end handleAppMessage\n\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n  const updateSessionState = newSessionState => setSessionState(newSessionState);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n\n  const enableStartButton = appState === STATE_IDLE;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SessionStateContext.Provider, {\n    value: {\n      session: [sessionState, setSessionState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      myState: [my, setMy]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 9\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    disabled: !enableCallButtons,\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }\n  }), window.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/App/App.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionStateContext","MyContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","setSubscriptions","sendState","audioPlayer","AdminPanel","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","sessionState","setSessionState","type","isKnown","isActive","AdminVisible","roleOf","Buyer1","Buyer2","Buyer3","Seller","Shadow1","Shadow2","Shadow3","Shadow4","my","setMy","name","role","adminStatus","window","pass","includes","myP","location","href","setViewMode","viewMode","console","log","createCall","createRoom","then","room","url","catch","error","startJoiningCall","newCallObject","createCallObject","subscribeToTracksAutomatically","initialInputs","join","userName","myName","audioSource","videoSource","navigator","mediaDevices","getUserMedia","audio","video","mediaStream","localAudio","getAudioTracks","localVideo","getVideoTracks","length","pageUrl","myRole","startLeavingCall","destroy","initialize","leave","indexOf","history","replaceState","getState","clearInterval","stateRequest","sendAppMessage","checkIfAdminPresent","Promise","resolve","adminPresent","ps","participants","lookForMoreParticipants","setInterval","Object","keys","p","thisUserName","user_name","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","userList","push","on","cleanup","off","handleAppMessage","e","fromId","data","constructor","setSubs","priorSessionState","needToSetSubs","myNewRole","key","myNumber","activateSession","pauseSession","recipient","local","session_id","target","action","amAdmin","camWasOn","updateSessionState","newSessionState","showCall","enableCallButtons","enableStartButton","session","myState"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext'\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport { sendState } from '../AdminPanel/AdminFunctions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\n\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\n\n\n\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n                                                    type: 'sessionState',\n                                                    isKnown:false,\n                                                    isActive:false,\n                                                    AdminVisible:false,\n                                                    roleOf: {\n                                                              Buyer1: '',\n                                                              Buyer2: '',\n                                                              Buyer3: '',\n                                                              Seller: '',\n                                                              Shadow1: '',\n                                                              Shadow2: '',\n                                                              Shadow3: '',\n                                                              Shadow4: '',\n                                                            }\n                                                    });\n  const [my, setMy] = useState({\n                                name: 'Your first name',\n                                role: 'Attendee',\n                                adminStatus: false,\n                              });\n\n\n\n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\"\n  }\n\n  window.setViewMode = (viewMode) => {\n    viewMode && console.log ('Changing view mode to: ' + viewMode);\n    setSubscriptions(callObject,viewMode)\n  }\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n/*   \nARLO NOTE:\n      Below is where the trouble is. myInfo.name is set via a child component, <StartScreen>, \n      and it successfully changes myInfo.name (I've confirmed since it's pinned to the Window).\n      The below works... the first time. But then callObject.participants().local.user_name gets \"stuck\", \n      so if you exit and leave, or even refresh the page, it never changes. Weird behavior\n*/\n\n  const startJoiningCall = useCallback((url) => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({ \n      subscribeToTracksAutomatically: false, \n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    if(window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1])\n      newCallObject.join({ userName:window.myName, url, audioSource: window.initialInputs[0],videoSource:window.initialInputs[1]}); \n    } else {\n      navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n        if(mediaStream){\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n          if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n              {\n                newCallObject.join({ userName:my.name, url, audioSource: localAudio[0], videoSource:localVideo[0]});\n              }\n        }else{\n          //say something to user, like you don't have any mic or you should allow use mic to this website\n        }\n      })\n    }\n    console.log('joining the call as ' + my.name); \n    const pageUrl = pageUrlFromRoomUrl(roomUrl)+'&N='+window.myName+'&R='+window.myRole;\n    // let connector = '?';\n    // if (pageUrl.includes('?roomUrl=')) {let connector = '&'};\n    // if (window.myName) {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl + connector + \"R=\" + window.myRole + \"&N=\" + window.myName);\n    // } else if (window.myRole) {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl + connector + \"R=\" + window.myRole);\n    // } else {\n    //   if (pageUrl === window.location.href) return;\n    //   window.history.replaceState(null, null, pageUrl);\n    // }\n  }, []); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();    \n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl=pageUrl;\n    \n    if (window.myName) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&N=' + window.myName;\n      }else{\n        pageUrl += '?N=' + window.myName;\n      }\n    }\n    if (window.myRole) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&R=' + window.myRole;\n      }else{\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&P=' + window.myP;\n      }else{\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  \n function getState () {\n    if (window.sessionState.isKnown == true) {\n        clearInterval(window.stateRequest);            \n        return;\n    }\n    // if (window.adminPresent) {\n        callObject.sendAppMessage(\"State please?\", '*'); \n        console.log('Requesting meeting state...');\n    \n}\n\nconst checkIfAdminPresent = () => {\n\n  return new Promise((resolve) => {\n    window.adminPresent = false;\n    let ps=callObject.participants();\n    const lookForMoreParticipants = setInterval (()=>{\n      if  (!Object.keys(ps).length>1) {return};\n      console.log(Object.keys(ps));\n      clearInterval(lookForMoreParticipants);\n      for (const p in ps) {\n        let thisUserName = ps[p].user_name;\n        if (thisUserName.includes('_Admin') && p!=='local') {\n          window.adminPresent = true;\n        }\n        console.log(`Participant present: ${thisUserName}`);\n      }\n    },500)\n    \n    resolve ();\n  })\n}\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error','participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          window.userList.push(window.myName);\n          console.log('JOINED MEETING');\n          if(window.myName==\"\"){callObject.leave();}\n          if (!window.sessionState.isKnown) {\n            if (window.myRole==\"Admin\") {\n              checkIfAdminPresent().then(()=> {\n                window.sessionState.isKnown = window.adminPresent ? false : true;\n                window.adminPresent? console.log(`An admin was present`) : console.log(`An admin was NOT present`);\n                if (!window.sessionState.isKnown) {\n                  window.stateRequest = setInterval(()=>{getState()},2500);\n                }\n              })\n            } else {\n              window.stateRequest = setInterval(()=>{getState()},2500);\n            }\n          }\n          \n\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n        case 'participant-joined':\n\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n\n          let participants = callObject.participants();\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n\n            const setSubs = () => {setSubscriptions(callObject)}\n                  \n            //temporarily commented out\n                  // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n                  //     {return;}\n                  // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n                  //     clearInterval(stateRequest);\n                  // }\n      \n              let priorSessionState = window.sessionState;\n              window.sessionState=e.data;\n              setSessionState(e.data);\n              let needToSetSubs=false;\n                \n      \n                  // change my role if it has been updated in sessionState\n                  if (window.sessionState.roleOf!=priorSessionState.roleOf) \n                    {\n                      let myNewRole = 'Attendee'; //default, if no role assigned\n                      for (const key in window.sessionState.roleOf) {\n                          if(window.sessionState.roleOf[key]==window.myName) {\n                              myNewRole = key;\n                          }\n                      }\n                      if (myNewRole!=window.myRole) {\n                          window.myRole = myNewRole;\n                            if (window.myRole.includes('1')) {\n                                window.myNumber=1;\n                            } else if (window.myRole.includes('2')) {\n                                window.myNumber=2;\n                            }\n                        }\n                          if(window.sessionState.isActive){\n                              activateSession();  //rebuild UI for the newly assigned role, mid-session\n                          } \n                          needToSetSubs=true;\n                    }\n\n\n      \n                      //create or delete rooms according to assignments of Thirds\n                      // if (window.sessionState.roleOf.Room3A!='') {\n                      //     !$(\"#view-mode option[value=Room3\").length>0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n                      //   } else {\n                      //     $(\"#view-mode option[value=Room3\").remove();\n                      //   }\n      \n                      // if (window.sessionState.roleOf.Room4A!='') {\n                      //     !$(\"#view-mode option[value=Room4\").length>0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n                      //   } else {\n                      //     $(\"#view-mode option[value=Room4\").remove();\n                      //   }\n      \n                      // if (window.sessionState.roleOf.Room5A!='') {\n                      //     !$(\"#view-mode option[value=Room5\").length>0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n                      //   } else {\n                      //     $(\"#view-mode option[value=Room5\").remove();\n                      //   }\n                      \n                  //determine if need to reset subs\n                  if (priorSessionState.isActive !== window.sessionState.isActive ||\n                      priorSessionState.AdminVisible!==window.sessionState.AdminVisible ) \n                      {\n                          needToSetSubs = true;\n                      }\n      \n                  //now, reset subscriptions if necessary\n                  if (needToSetSubs) {\n                    if (!priorSessionState.isActive && window.sessionState.isActive && window.myRole=='Attendee' || window.myRole=='Admin') {\n                      setSubscriptions(callObject,'Room1')\n                    }\n                    else {\n                      setSubs();\n                    }\n                  }\n                  \n                  //when session starts\n                  if (priorSessionState.isActive == false && window.sessionState.isActive == true) {\n                      activateSession();\n                      if (window.myRole=='Attendee' || window.myRole=='Admin') {\n                        }\n                  }\n                  //when session is paused\n                  else if (priorSessionState.isActive == true && window.sessionState.isActive == false) {\n                      pauseSession();\n                      window.setViewMode(null);\n                  } \n            }\n\n            else if (e.data.constructor === Object && e.data.type==\"instructions\" && e.data.recipient==callObject.participants().local.session_id) {\n              audioPlayer(e.data.target,e.data.action)\n            }\n\n\n            else if (e.data==\"State please?\") {\n              if (window.amAdmin && window.sessionState.isKnown) {\n                sendState(window.sessionState,callObject);\n              }\n            } \n          }\n          //not used in this module, since there's no timer\n          \n          // if none of the above, just overlay the message\n          // else if (e.data.constructor !== Object) {    \n          //     overlayMessage(e.data,10000);\n          // }\n\n          async function activateSession() {\n            switch (window.myRole) {\n                case 'Attendee':\n                    // $(\"#cam-instructions\").fadeOut(500);\n                    // $(\"#cam-image\").fadeOut(500);\n                    // $(\"#mic-instructions\").fadeOut(500);\n                    // $(\"#mic-image\").fadeOut(500);\n                    // $('#show-qr-code').fadeOut(500);\n                    // $('#get-prompt').fadeOut(500);\n                    // document.getElementById('my-view').style.visibility='visible';\n                    // $('#my-view').fadeIn(500);\n                    window.camWasOn = callObject.localVideo();\n                    if (window.camWasOn) {\n                        // toggleCam()\n                    }\n                    // $('#view-mode').val('Room1').trigger(\"change\");\n                    // document.getElementById(\"overlay\").className = \"superimposed-text-attendees\";\n                    // document.getElementById(\"overlay-text\").className = \"overlay-text-attendees\";\n                    break;\n        \n                case 'Participant1':\n                case 'Participant2':\n                    // $(\"#cam-instructions\").fadeIn(500);\n                    // $(\"#cam-image\").fadeIn(500);\n                    // $(\"#mic-instructions\").fadeIn(500);\n                    // $(\"#mic-image\").fadeIn(500);\n                    // $('#show-qr-code').fadeOut(500);\n                    // $('#get-prompt').fadeIn(500);\n                    // $('#my-view').fadeOut(500);\n                    // document.getElementById('my-view').style.visibility='hidden';\n                    // document.getElementById(\"overlay\").className = \"superimposed-text\";\n                    // document.getElementById(\"overlay-text\").className = \"overlay-text\";\n                    // displayName();\n                    // closeChat();\n                    break;\n        \n                case 'Actor1':\n                case 'Actor2':\n                case 'Room3A':\n                case 'Room3B':\n                case 'Room4A':\n                case 'Room4B':\n                case 'Room5A':\n                case 'Room5B':\n                    // $(\"#cam-instructions\").fadeIn(500);\n                    // $(\"#cam-image\").fadeIn(500);\n                    // $(\"#mic-instructions\").fadeIn(500);\n                    // $(\"#mic-image\").fadeIn(500);\n                    // $('#show-qr-code').fadeIn(500);\n                    // $('#get-prompt').fadeOut(500);\n                    // $('#my-view').fadeOut(500);\n                    // document.getElementById('my-view').style.visibility='hidden';\n                    // document.getElementById(\"overlay\").className = \"superimposed-text\";\n                    // document.getElementById(\"overlay-text\").className = \"overlay-text\";\n                    // displayName();\n                    // closeChat();\n                    break;\n                \n                default:\n                    break;\n            }\n        }\n          \n          async function pauseSession() {\n            // $(\"#cam-instructions\").fadeIn(500);\n            // $(\"#cam-image\").fadeIn(500);\n            // $(\"#mic-instructions\").fadeIn(500);\n            // $(\"#mic-image\").fadeIn(500);\n            // $('#show-qr-code').fadeIn(500);\n            // $('#get-prompt').fadeOut(500);\n            // document.getElementById('get-prompt').style.visibility='hidden';\n            // $('#my-view').fadeOut(500);\n            // if (window.camWasOn && !callObject.localVideo()) {toggleCam()}; // turn back on cam if it was noted as on before session\n          }\n\n\n      \n    } //end handleAppMessage\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n  const updateSessionState = (newSessionState) => setSessionState(newSessionState);\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n  const enableStartButton = appState === STATE_IDLE;\n\n  return (\n\n\n    <div className=\"app\">\n      <SessionStateContext.Provider \n      value={{session: [sessionState,setSessionState]}}\n      >\n        <MyContext.Provider \n        value={{myState: [my,setMy]}}\n        >\n\n        {(showCall) ? (\n          // NOTE: for an app this size, it's not obvious that using a Context\n          // is the best choice. But for larger apps with deeply-nested components\n          // that want to access call object state and bind event listeners to the\n          // call object, this can be a helpful pattern.\n          <CallObjectContext.Provider value={callObject}>\n\n            <Call roomUrl={roomUrl} />\n            <Tray\n              disabled={!enableCallButtons}\n              onClickLeaveCall={startLeavingCall}\n            />\n            {window.amAdmin && (\n          <AdminPanel\n        />\n        )}\n          </CallObjectContext.Provider>\n        ) : (\n          <StartScreen\n            // disabled={!enableStartButton}\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          />\n        )}\n        </MyContext.Provider>\n      </SessionStateContext.Provider>\n    </div>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}