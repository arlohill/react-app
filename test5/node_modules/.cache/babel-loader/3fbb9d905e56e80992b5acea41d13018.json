{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyInfoContext from '../../MyInfoContext';\nimport SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  const [sessionState, setSessionState] = useContext(SessionContext);\n  const [myInfo, setMyInfo] = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  let userList = [];\n  let adminPresent = false;\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-updated', 'participant-left'];\n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      });\n\n      if (e && e.action != 'participant-updated') {\n        setSubscriptions(sessionState, myInfo, callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n        let thisUserName = e.participant.user_name;\n        let thisSessionID = e.participant.session_id;\n\n        if (e.action == \"participant-joined\") {\n          let SessionIDLabel = thisUserName + \"_SessionID\";\n          window[SessionIDLabel] = thisSessionID;\n          userList.push(thisUserName); //Add userName to all the dropdowns\n          // $(\"#selectPersonP1\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectPersonP2\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectPersonA1\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectPersonA2\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#audio-target\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom3A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom3B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom4A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom4B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom5A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n          // $(\"#selectRoom5B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n\n          if (thisUserName == 'Admin') {\n            adminPresent = true;\n          }\n        } else if (e.action == \"participant-left\") {\n          //remove from userList\n          let index = userList.indexOf(thisUserName);\n\n          if (index > -1) {\n            userList.splice(index, 1);\n          }\n\n          if (userList.indexOf('Admin') == -1) {\n            adminPresent = false;\n          } //Delete userName from all the dropdowns\n          // $(\"#selectPersonP1 option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectPersonP2 option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectPersonA1 option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectPersonA2 option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom3A option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom3B option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom4A option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom4B option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom5A option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#selectRoom5B option[value=\" + thisUserName + \"]\").remove();\n          // $(\"#audio-target option[value=\" + thisUserName + \"]\").remove();\n\n        }\n\n        console.log('Admin present: ' + adminPresent);\n        console.log('UserList: ' + userList);\n      }\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject, sessionState]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n  /**\n   * Handle incoming messages\n   */\n\n  const receiveMessage = e => {\n    console.log(\"Message received: \" + e.data);\n    let participants = callObject.participants(); //handle sessionState updates\n\n    if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n      //temporarily commented out\n      // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n      //     {return;}\n      // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n      //     clearInterval(stateRequest);\n      // }\n      let priorSessionState = sessionState;\n      setSessionState(e.data);\n      let needToSetSubs = false;\n      setSubscriptions(sessionState, myInfo, callObject); //temporarily commented out\n      //change my role if it has been updated in sessionState\n      // if (sessionState.roleOf!=priorSessionState.roleOf) {\n      //     let myNewRole = 'Attendee'; //default, if no role assigned\n      //     for (const key in sessionState.roleOf) {\n      //         if(sessionState.roleOf[key]==myName) {\n      //             myNewRole = key;\n      //         }\n      //     }\n      //     if (myNewRole!=myRole) {\n      //         myRole = myNewRole;\n      //         setNumber();\n      //         if(sessionState.isActive){\n      //             needToSetSubs=true;\n      //             activateSession();  //rebuild UI for the newly assigned role, mid-session\n      //         } \n      //     }\n      //     //create or delete rooms according to assignments of Thirds\n      //     if (sessionState.roleOf.Room3A!='') {\n      //         !$(\"#view-mode option[value=Room3\").length>0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n      //       } else {\n      //         $(\"#view-mode option[value=Room3\").remove();\n      //       }\n      //     if (sessionState.roleOf.Room4A!='') {\n      //         !$(\"#view-mode option[value=Room4\").length>0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n      //       } else {\n      //         $(\"#view-mode option[value=Room4\").remove();\n      //       }\n      //     if (sessionState.roleOf.Room5A!='') {\n      //         !$(\"#view-mode option[value=Room5\").length>0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n      //       } else {\n      //         $(\"#view-mode option[value=Room5\").remove();\n      //       }\n      // }\n      // if (priorSessionState.isActive !== sessionState.isActive ||\n      //     priorSessionState.AdminVisible!==sessionState.AdminVisible ) \n      //     {\n      //         needToSetSubs = true;\n      //     }\n      // //now, reset subscriptions if necessary\n      // if (needToSetSubs) {\n      //     setSubscriptions();\n      // }\n      // //when session starts\n      // if (priorSessionState.isActive == false && sessionState.isActive == true) {\n      //     activateSession();\n      // }\n      // //when session is paused\n      // else if (priorSessionState.isActive == true && sessionState.isActive == false) {\n      //     pauseSession();\n      // }\n    } //not used in this module, since there's no timer\n    // if none of the above, just overlay the message\n    // else if (e.data.constructor !== Object) {    \n    //     overlayMessage(e.data,10000);\n    // }\n\n  };\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      if (typeOf(currentSubs) == \"undefined\") {\n        return;\n      }\n\n      ;\n      let subscribedTracks = [];\n\n      for (const userName of window.currentSubs) {\n        const id_number = userName + '_SessionID';\n        subscribedTracks.push(window[id_number]);\n      }\n\n      console.log(subscribedTracks);\n      console.log(\"ID: \" + id);\n\n      if (!subscribedTracks.includes(id) && !isLocal(id)) {\n        return;\n      }\n\n      ;\n      console.log(\"**MADE IT HERE***\");\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && Object.keys(callState.callItems).length >= 3 //////\n      ;\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id),\n        isMyFirst: \"true\" // onClick={\n        //   isLocal(id)\n        //     ? null\n        //     : () => {\n        //         sendHello(id);\n        //       }\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    console.log('re-rendered');\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n\n    window.userList = userList;\n    window.adminPresent = adminPresent;\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${largeTiles.length}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","Tile","CallObjectContext","MyInfoContext","SessionContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","setSubscriptions","Call","callObject","sessionState","setSessionState","myInfo","setMyInfo","callState","dispatch","userList","adminPresent","events","handleNewParticipantsState","e","type","participants","action","console","log","thisUserName","participant","user_name","thisSessionID","session_id","SessionIDLabel","window","push","index","indexOf","splice","event","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","t","setTimeout","clearTimeout","receiveMessage","data","constructor","Object","priorSessionState","needToSetSubs","getTiles","largeTiles","smallTiles","entries","callItems","forEach","id","callItem","typeOf","currentSubs","subscribedTracks","userName","id_number","includes","isLarge","keys","length","tile","videoTrackState","audioTrackState","smallTales","add","n","i","addFakeParticipant","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyInfoContext from '../../MyInfoContext';\nimport SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  const [ sessionState, setSessionState ] = useContext(SessionContext);\n  const [ myInfo, setMyInfo ] = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  let userList=[];\n  let adminPresent=false;\n\n  \n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n    ];\n\n   \n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n      if(e && e.action!='participant-updated') {\n        setSubscriptions(sessionState,myInfo,callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n    \n          \n          let thisUserName = e.participant.user_name;\n          let thisSessionID = e.participant.session_id;\n          if (e.action==\"participant-joined\") {\n            let SessionIDLabel = thisUserName + \"_SessionID\";\n            window[SessionIDLabel] = thisSessionID;\n\n              userList.push(thisUserName);\n              //Add userName to all the dropdowns\n              // $(\"#selectPersonP1\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectPersonP2\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectPersonA1\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectPersonA2\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#audio-target\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom3A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom3B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom4A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom4B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom5A\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n              // $(\"#selectRoom5B\").append(\"<option value=\" + thisUserName + \">\" + thisUserName + \"</option>\");\n\n            if (thisUserName=='Admin') {\n                adminPresent=true;\n            }\n            \n          } else if (e.action==\"participant-left\") {\n            //remove from userList\n            let index = userList.indexOf(thisUserName);\n            if (index > -1) {\n            userList.splice(index, 1);\n            }\n            if (userList.indexOf('Admin')==-1) {\n              adminPresent=false;\n            }\n            //Delete userName from all the dropdowns\n            // $(\"#selectPersonP1 option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectPersonP2 option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectPersonA1 option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectPersonA2 option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom3A option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom3B option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom4A option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom4B option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom5A option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#selectRoom5B option[value=\" + thisUserName + \"]\").remove();\n            // $(\"#audio-target option[value=\" + thisUserName + \"]\").remove();\n          }\n\n          console.log('Admin present: ' + adminPresent);\n          console.log('UserList: ' + userList);\n      }\n      \n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject,sessionState]);\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  /**\n   * Handle incoming messages\n   */\n   const receiveMessage = (e) => {\n    console.log(\"Message received: \" + e.data);\n    let participants = callObject.participants();\n\n    //handle sessionState updates\n    if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n            \n      //temporarily commented out\n            // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n            //     {return;}\n            // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n            //     clearInterval(stateRequest);\n            // }\n\n            let priorSessionState = sessionState;\n            setSessionState(e.data);\n            let needToSetSubs=false;\n            setSubscriptions(sessionState,myInfo,callObject);\n\n          \n                  //temporarily commented out\n\n            //change my role if it has been updated in sessionState\n            // if (sessionState.roleOf!=priorSessionState.roleOf) {\n            //     let myNewRole = 'Attendee'; //default, if no role assigned\n            //     for (const key in sessionState.roleOf) {\n            //         if(sessionState.roleOf[key]==myName) {\n            //             myNewRole = key;\n            //         }\n            //     }\n            //     if (myNewRole!=myRole) {\n            //         myRole = myNewRole;\n            //         setNumber();\n            //         if(sessionState.isActive){\n            //             needToSetSubs=true;\n            //             activateSession();  //rebuild UI for the newly assigned role, mid-session\n            //         } \n            //     }\n\n            //     //create or delete rooms according to assignments of Thirds\n\n            //     if (sessionState.roleOf.Room3A!='') {\n            //         !$(\"#view-mode option[value=Room3\").length>0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n            //       } else {\n            //         $(\"#view-mode option[value=Room3\").remove();\n            //       }\n\n            //     if (sessionState.roleOf.Room4A!='') {\n            //         !$(\"#view-mode option[value=Room4\").length>0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n            //       } else {\n            //         $(\"#view-mode option[value=Room4\").remove();\n            //       }\n\n            //     if (sessionState.roleOf.Room5A!='') {\n            //         !$(\"#view-mode option[value=Room5\").length>0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n            //       } else {\n            //         $(\"#view-mode option[value=Room5\").remove();\n            //       }\n                \n\n\n            // }\n            \n            // if (priorSessionState.isActive !== sessionState.isActive ||\n            //     priorSessionState.AdminVisible!==sessionState.AdminVisible ) \n            //     {\n            //         needToSetSubs = true;\n            //     }\n\n            // //now, reset subscriptions if necessary\n            // if (needToSetSubs) {\n            //     setSubscriptions();\n            // }\n            \n            // //when session starts\n            // if (priorSessionState.isActive == false && sessionState.isActive == true) {\n            //     activateSession();\n            // }\n            // //when session is paused\n            // else if (priorSessionState.isActive == true && sessionState.isActive == false) {\n            //     pauseSession();\n            // }\n\n    \n    } \n    //not used in this module, since there's no timer\n    \n    // if none of the above, just overlay the message\n    // else if (e.data.constructor !== Object) {    \n    //     overlayMessage(e.data,10000);\n    // }\n}\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n\n      if (typeOf(currentSubs)==\"undefined\") {return};\n      let subscribedTracks = [];\n      for (const userName of window.currentSubs) {\n        const id_number = userName + '_SessionID'\n        subscribedTracks.push(window[id_number])\n      }\n      console.log (subscribedTracks);\n      console.log(\"ID: \" + id);\n      if (!subscribedTracks.includes(id) && !isLocal(id)) {return};\n      console.log(\"**MADE IT HERE***\");\n\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems) \n        || isLocal(id) && Object.keys(callState.callItems).length>=3  //////\n        );\n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          isMyFirst='true'\n          // onClick={\n          //   isLocal(id)\n          //     ? null\n          //     : () => {\n          //         sendHello(id);\n          //       }\n          // }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    console.log('re-rendered');\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n    window.userList=userList;\n    window.adminPresent=adminPresent;\n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className=\"call\">\n                                      {/* add # of tiles to class name */}\n      <div className={`large-tiles count-${largeTiles.length}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}