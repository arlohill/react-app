{"ast":null,"code":"import { useEffect, useContext } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext';\n\nfunction useSetSubscriptions() {\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray // setName, \n    // setRole,\n    // setUserList,\n    // setViewMode,\n    // setCamOnAtSessionStart,\n    // setMicOnAtSessionStart,\n    // setAmAdmin, \n\n  } = useContext(MyContext);\n  const [myState, setMyState] = myStateArray; // useEffect(()=> {\n  //     const myRole = myState.role;\n  //     let currentSubs = [];\n  //     let viewMode = myState.viewMode;\n  //     if (!sessionState) {return;}\n  //     ///disable 'viewMode' unless session is active and I'm a viewer\n  //     if(!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n  //         viewMode = null;\n  //     }\n  //     console.log('Setting subscriptions...');\n  //     // console.log('****My role is: ' + myRole);\n  //     // console.log('viewMode is: ' + viewMode);\n  //     let subscribedTo=0;\n  //     //if session is active, set currentSubs according to my role\n  //         if (!viewMode && sessionState.isActive) {\n  //             switch (myRole) {\n  //                 case 'Buyer1':\n  //                     currentSubs=[];\n  //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n  //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n  //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                     break;\n  //                 case 'Buyer2':\n  //                     currentSubs=[];\n  //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n  //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n  //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                     break;\n  //                 case 'Buyer3':\n  //                     currentSubs=[];\n  //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n  //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n  //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                     break;\n  //                 case 'Seller':\n  //                     currentSubs=[];\n  //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                     break;\n  //                 case 'Shadow1':\n  //                 case 'Shadow2':\n  //                 case 'Shadow3':\n  //                 case 'Shadow4':\n  //                     currentSubs=[];\n  //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                     sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller+'_AUDIO');\n  //                     break;\n  //                 case 'Attendee':\n  //                     currentSubs=[];\n  //                     break;\n  //                 default:\n  //                     currentSubs=[];\n  //                     break;\n  //             }\n  //             //Add Admin to currentSubs if applicable\n  //             if (sessionState.AdminVisible) {\n  //             currentSubs.push (\"Admin\");\n  //         }\n  //         currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n  //     }\n  //     if(viewMode) {\n  //         switch (viewMode) {\n  //             case 'Seller':\n  //                 currentSubs=[];\n  //                 sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             case 'Shadow1':\n  //                 currentSubs=[];\n  //                 sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             case 'Shadow2':\n  //                 currentSubs=[];\n  //                 sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             case 'Shadow3':\n  //                 sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             case 'Shadow4':\n  //                 currentSubs=[];\n  //                 sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             case 'All':\n  //                 currentSubs=[];\n  //                 sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n  //                 sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n  //                 sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n  //                 sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n  //                 sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n  //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n  //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n  //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n  //                 break;\n  //             default:\n  //                 currentSubs=[];\n  //                 break;\n  //         }\n  //         currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n  //     }\n  //     function setTracks() {\n  //         return new Promise( (resolve) => {\n  //             //cycle through each participant in meeting\n  //             let ps = callObject.participants();\n  //             // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n  //             Object.keys(ps).forEach((p) => {\n  //                 let participant = ps[p];\n  //                 let thisUserName = participant.user_name;\n  //                 if (p === 'local' || thisUserName==myState.name) {\n  //                     return;\n  //                 } \n  //                 //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n  //                 if (!sessionState.isKnown) {\n  //                     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n  //                     return;\n  //                 }\n  //                 // console.log(\"This username is: \" +thisUserName);\n  //                 //If NOT ACTIVE, subscribe to everyone in the meeting\n  //                 if (!sessionState.isActive) {\n  //                         if (thisUserName=='InvisibleScreenShareWidget') {\n  //                             console.log('Not subscribing to: ' + thisUserName);\n  //                             callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: false, video: false, screenVideo: true, screenAudio: true}});\n  //                         } else {\n  //                             console.log('Subscribing to: ' + thisUserName);\n  //                             currentSubs.push(thisUserName);\n  //                             // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n  //                             //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n  //                             // }\n  //                             callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n  //                             subscribedTo++;\n  //                             }    \n  //                     // }\n  //                 } \n  //                 //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n  //                 else if (sessionState.isActive || viewMode) {\n  //                     if(currentSubs.includes(thisUserName+'_AUDIO')) {\n  //                         console.log('Subscribing to audio only for: ' + thisUserName);\n  //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n  //                     }\n  //                     else if(currentSubs.includes(thisUserName)) {\n  //                         console.log('Subscribing to: ' + thisUserName);\n  //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n  //                         subscribedTo++;\n  //                     }\n  //                     else if (!currentSubs.includes(thisUserName)) {\n  //                         console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n  //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n  //                     }\n  //                 }\n  //             });\n  //             resolve();\n  //         })\n  //     }\n  //     setTracks().then(()=>{\n  //         //remove screenshare widget from currentSubs array to not count it\n  //         const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n  //         if (index > -1) {\n  //           currentSubs.splice(index, 1);\n  //         }\n  //     //print subscriptions\n  //     currentSubs.filter(function (str) {return str.indexOf(window.myName) === -1}) //don't include self\n  //     var iterator = currentSubs.values();\n  //     console.log(\"Currently subscribed to:\");\n  //     for (let elements of iterator) { \n  //         console.log(elements); \n  //     } \n  //     if (currentSubs.length < 1) {\n  //         console.log (\"No one.\")\n  //     }\n  //     ///*** for debugging purposes\n  //     window.viewMode = viewMode;\n  //     window.currentSubs = currentSubs;\n  //     window.numberOfSubs=window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length;\n  //     })\n  // },[sessionState,myState,callObject]);\n}\n\n;\nexport default useSetSubscriptions;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/hooks/setSubscriptions.js"],"names":["useEffect","useContext","SessionStateContext","MyContext","CallObjectContext","useSetSubscriptions","callObject","session","sessionState","setSessionState","myStateArray","myState","setMyState"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAGA,SAASC,mBAAT,GAA+B;AAE3B,QAAMC,UAAU,GAAGL,UAAU,CAACG,iBAAD,CAA7B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAcN,UAAU,CAACC,mBAAD,CAA9B;AACA,QAAM,CAAEM,YAAF,EAAeC,eAAf,IAAkCF,OAAxC;AACA,QAAM;AAAEG,IAAAA,YAAF,CACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAPE,MAQAT,UAAU,CAACE,SAAD,CARhB;AASA,QAAM,CAAEQ,OAAF,EAAUC,UAAV,IAAyBF,YAA/B,CAd2B,CAieAAeL,mBAAf","sourcesContent":["import { useEffect, useContext } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext'\n\n\nfunction useSetSubscriptions() {\n\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;    \n    const { myStateArray, \n        // setName, \n        // setRole,\n        // setUserList,\n        // setViewMode,\n        // setCamOnAtSessionStart,\n        // setMicOnAtSessionStart,\n        // setAmAdmin, \n      } = useContext(MyContext);\n    const [ myState,setMyState ] = myStateArray;\n\n\n    // useEffect(()=> {\n\n    //     const myRole = myState.role;\n    //     let currentSubs = [];\n    //     let viewMode = myState.viewMode;\n    \n    //     if (!sessionState) {return;}\n    \n    //     ///disable 'viewMode' unless session is active and I'm a viewer\n    //     if(!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n    //         viewMode = null;\n    //     }\n    \n    \n    //     console.log('Setting subscriptions...');\n    //     // console.log('****My role is: ' + myRole);\n    //     // console.log('viewMode is: ' + viewMode);\n    //     let subscribedTo=0;\n    \n        \n    //     //if session is active, set currentSubs according to my role\n    //         if (!viewMode && sessionState.isActive) {\n    //             switch (myRole) {\n    //                 case 'Buyer1':\n    //                     currentSubs=[];\n    //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n    //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n    //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                     break;\n    //                 case 'Buyer2':\n    //                     currentSubs=[];\n    //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n    //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n    //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                     break;\n    //                 case 'Buyer3':\n    //                     currentSubs=[];\n    //                     sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n    //                     !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n    //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                     break;\n    //                 case 'Seller':\n    //                     currentSubs=[];\n    //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                     break;\n    //                 case 'Shadow1':\n    //                 case 'Shadow2':\n    //                 case 'Shadow3':\n    //                 case 'Shadow4':\n    //                     currentSubs=[];\n    //                     sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                     sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                     sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                     sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller+'_AUDIO');\n    //                     break;\n    //                 case 'Attendee':\n    //                     currentSubs=[];\n    //                     break;\n    //                 default:\n    //                     currentSubs=[];\n    //                     break;\n    //             }\n    //             //Add Admin to currentSubs if applicable\n    //             if (sessionState.AdminVisible) {\n    //             currentSubs.push (\"Admin\");\n    //         }\n    \n    //         currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n    \n    //     }\n    \n    //     if(viewMode) {\n    \n    //         switch (viewMode) {\n    //             case 'Seller':\n    //                 currentSubs=[];\n    //                 sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             case 'Shadow1':\n    //                 currentSubs=[];\n    //                 sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             case 'Shadow2':\n    //                 currentSubs=[];\n    //                 sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             case 'Shadow3':\n    //                 sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             case 'Shadow4':\n    //                 currentSubs=[];\n    //                 sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             case 'All':\n    //                 currentSubs=[];\n    //                 sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n    //                 sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n    //                 sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n    //                 sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n    //                 sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n    //                 sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n    //                 sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n    //                 sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n    //                 break;\n    //             default:\n    //                 currentSubs=[];\n    //                 break;\n    //         }\n    \n    //         currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n    //     }\n    \n        \n    //     function setTracks() {\n    \n    //         return new Promise( (resolve) => {\n    \n    //             //cycle through each participant in meeting\n    //             let ps = callObject.participants();\n    //             // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n    //             Object.keys(ps).forEach((p) => {\n    //                 let participant = ps[p];\n    //                 let thisUserName = participant.user_name;\n    \n    //                 if (p === 'local' || thisUserName==myState.name) {\n    //                     return;\n    //                 } \n        \n    \n    //                 //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n    //                 if (!sessionState.isKnown) {\n    //                     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n    //                     return;\n    //                 }\n    \n    \n    \n    //                 // console.log(\"This username is: \" +thisUserName);\n    \n    //                 //If NOT ACTIVE, subscribe to everyone in the meeting\n    //                 if (!sessionState.isActive) {\n    \n    //                         if (thisUserName=='InvisibleScreenShareWidget') {\n    //                             console.log('Not subscribing to: ' + thisUserName);\n    //                             callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: false, video: false, screenVideo: true, screenAudio: true}});\n    \n                            \n    //                         } else {\n    //                             console.log('Subscribing to: ' + thisUserName);\n    //                             currentSubs.push(thisUserName);\n    //                             // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n    //                             //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n    //                             // }\n    //                             callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n    //                             subscribedTo++;\n    //                             }    \n    \n    //                     // }\n    \n    \n    \n    //                 } \n    \n    //                 //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n    //                 else if (sessionState.isActive || viewMode) {\n    //                     if(currentSubs.includes(thisUserName+'_AUDIO')) {\n    //                         console.log('Subscribing to audio only for: ' + thisUserName);\n    //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n    //                     }\n    //                     else if(currentSubs.includes(thisUserName)) {\n    //                         console.log('Subscribing to: ' + thisUserName);\n    //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n    //                         subscribedTo++;\n    //                     }\n    //                     else if (!currentSubs.includes(thisUserName)) {\n    //                         console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n    //                         callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n    //                     }\n    //                 }\n    //             });\n    //             resolve();\n    //         })\n    //     }\n        \n    //     setTracks().then(()=>{\n            \n    //         //remove screenshare widget from currentSubs array to not count it\n    //         const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n    //         if (index > -1) {\n    //           currentSubs.splice(index, 1);\n    //         }\n    \n    //     //print subscriptions\n    //     currentSubs.filter(function (str) {return str.indexOf(window.myName) === -1}) //don't include self\n    \n    //     var iterator = currentSubs.values();\n    //     console.log(\"Currently subscribed to:\");\n    //     for (let elements of iterator) { \n    //         console.log(elements); \n    //     } \n    //     if (currentSubs.length < 1) {\n    //         console.log (\"No one.\")\n    //     }\n    \n    //     ///*** for debugging purposes\n    //     window.viewMode = viewMode;\n    //     window.currentSubs = currentSubs;\n    //     window.numberOfSubs=window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length;\n    \n    \n    //     })\n\n    // },[sessionState,myState,callObject]);\n    \n\n   \n};\n\nexport default useSetSubscriptions;\n\n"]},"metadata":{},"sourceType":"module"}