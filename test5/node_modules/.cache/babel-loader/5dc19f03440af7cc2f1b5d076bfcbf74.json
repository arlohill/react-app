{"ast":null,"code":"/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base filters path for the Mux API\n * */\n\n\nconst PATH = '/data/v1/filters';\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\n\nclass Filters extends Base {\n  /**\n   * Lists the values for a filter along with a total count of related views\n   *\n   * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a filter along with a total count of related views\n   * Data.Filters.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filter-values\n   */\n  get(filterId, params) {\n    if (!filterId) {\n      throw new Error('Filter Id is required to get filter information.');\n    }\n\n    return this.http.get(`${PATH}/${filterId}`, {\n      params\n    });\n  }\n  /**\n   * Lists all the filters broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Filters.list();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filters\n   */\n\n\n  list() {\n    return this.http.get(PATH);\n  }\n\n}\n\nmodule.exports = Filters;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/@mux/mux-node/src/data/resources/filters.js"],"names":["Base","require","PATH","Filters","get","filterId","params","Error","http","list","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,kBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBH,IAAtB,CAA2B;AACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AACpB,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,WAAO,KAAKC,IAAL,CAAUJ,GAAV,CAAe,GAAEF,IAAK,IAAGG,QAAS,EAAlC,EAAqC;AAAEC,MAAAA;AAAF,KAArC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKD,IAAL,CAAUJ,GAAV,CAAcF,IAAd,CAAP;AACD;;AAvCwB;;AA0C3BQ,MAAM,CAACC,OAAP,GAAiBR,OAAjB","sourcesContent":["/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base filters path for the Mux API\n * */\nconst PATH = '/data/v1/filters';\n\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\nclass Filters extends Base {\n  /**\n   * Lists the values for a filter along with a total count of related views\n   *\n   * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a filter along with a total count of related views\n   * Data.Filters.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filter-values\n   */\n  get(filterId, params) {\n    if (!filterId) {\n      throw new Error('Filter Id is required to get filter information.');\n    }\n    return this.http.get(`${PATH}/${filterId}`, { params });\n  }\n\n  /**\n   * Lists all the filters broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Filters.list();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-filters\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n\nmodule.exports = Filters;\n"]},"metadata":{},"sourceType":"script"}