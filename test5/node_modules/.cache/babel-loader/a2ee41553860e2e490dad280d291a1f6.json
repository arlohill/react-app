{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Real-Time\n * Copyright(c) 2020 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base real-time path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/realtime';\n/**\n * Real-Time Class - Provides access to the Mux Data Real-Time API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available real-time dimensions\n * Data.RealTime.dimensions();\n */\n\nvar RealTime = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(RealTime, _Base);\n\n  var _super = _createSuper(RealTime);\n\n  function RealTime() {\n    _classCallCheck(this, RealTime);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RealTime, [{\n    key: \"dimensions\",\n\n    /**\n     * List of available real-time dimensions\n     *\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Returns a list of available real-time dimensions\n     * Data.RealTime.dimensions();\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-realtime-dimensions\n     */\n    value: function dimensions() {\n      return this.http.get(\"\".concat(PATH, \"/dimensions\"));\n    }\n    /**\n     * List available real-time metrics\n     *\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Returns a list of available real-time metrics\n     * Data.RealTime.metrics();\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-realtime-metrics\n     */\n\n  }, {\n    key: \"metrics\",\n    value: function metrics() {\n      return this.http.get(\"\".concat(PATH, \"/metrics\"));\n    }\n    /**\n     * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n     * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n     * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-realtime-breakdown\n     */\n\n  }, {\n    key: \"breakdown\",\n    value: function breakdown(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for real-time breakdown information');\n      }\n\n      if (!params || params && !params.dimension) {\n        throw new Error('The dimension query parameter is required for real-time breakdown information');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/metrics/\").concat(metricId, \"/breakdown\"), {\n        params: params\n      });\n    }\n    /**\n     * List histogram timeseries information for a specific metric\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n     * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n     * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-realtime-histogram-timeseries\n     */\n\n  }, {\n    key: \"histogramTimeseries\",\n    value: function histogramTimeseries(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for real-time histogram timeseries information');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/metrics/\").concat(metricId, \"/histogram-timeseries\"), {\n        params: params\n      });\n    }\n    /**\n     * List timeseries information for a specific metric along with the number of concurrent viewers.\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n     * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n     * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-realtime-timeseries\n     */\n\n  }, {\n    key: \"timeseries\",\n    value: function timeseries(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for real-time timeseries information.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/metrics/\").concat(metricId, \"/timeseries\"), {\n        params: params\n      });\n    }\n  }]);\n\n  return RealTime;\n}(Base);\n\nmodule.exports = RealTime;","map":null,"metadata":{},"sourceType":"script"}