{"ast":null,"code":"/**\n * Call state is comprised of:\n * - \"Call items\" (inputs to the call, i.e. participants or shared screens)\n * - UI state that depends on call items (for now, just whether to show \"click allow\" message)\n *\n * Call items are keyed by id:\n * - \"local\" for the current participant\n * - A session id for each remote participant\n * - \"<id>-screen\" for each shared screen\n */\nconst initialCallState = {\n  callItems: {\n    local: {\n      videoTrackState: null,\n      audioTrackState: null\n    }\n  },\n  clickAllowTimeoutFired: false,\n  camOrMicError: null,\n  fatalError: null\n}; // --- Actions ---\n\n/**\n * CLICK_ALLOW_TIMEOUT action structure:\n * - type: string\n */\n\nconst CLICK_ALLOW_TIMEOUT = 'CLICK_ALLOW_TIMEOUT';\n/**\n * PARTICIPANTS_CHANGE action structure:\n * - type: string\n * - participants: Object (from Daily callObject.participants())\n */\n\nconst PARTICIPANTS_CHANGE = 'PARTICIPANTS_CHANGE';\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\n\nconst CAM_OR_MIC_ERROR = 'CAM_OR_MIC_ERROR';\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\n\nconst FATAL_ERROR = 'FATAL_ERROR'; // --- Reducer and helpers --\n\nfunction callReducer(callState, action) {\n  switch (action.type) {\n    case CLICK_ALLOW_TIMEOUT:\n      return { ...callState,\n        clickAllowTimeoutFired: true\n      };\n\n    case PARTICIPANTS_CHANGE:\n      const callItems = getCallItems(action.participants);\n      return { ...callState,\n        callItems\n      };\n\n    case CAM_OR_MIC_ERROR:\n      return { ...callState,\n        camOrMicError: action.message\n      };\n\n    case FATAL_ERROR:\n      return { ...callState,\n        fatalError: action.message\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction getLocalCallItem(callItems) {\n  return callItems['local'];\n}\n\nfunction getCallItems(participants) {\n  let callItems = { ...initialCallState.callItems\n  }; // Ensure we *always* have a local participant\n\n  for (const [id, participant] of Object.entries(participants)) {\n    callItems[id] = {\n      videoTrackState: participant.tracks.video,\n      audioTrackState: participant.tracks.audio\n    };\n\n    if (shouldIncludeScreenCallItem(participant)) {\n      callItems[id + '-screen'] = {\n        videoTrackState: participant.tracks.screenVideo,\n        audioTrackState: participant.tracks.screenAudio\n      };\n    }\n  }\n\n  return callItems;\n}\n\nfunction shouldIncludeScreenCallItem(participant) {\n  const trackStatesForInclusion = ['loading', 'playable', 'interrupted'];\n  return trackStatesForInclusion.includes(participant.tracks.screenVideo.state) || trackStatesForInclusion.includes(participant.tracks.screenAudio.state);\n} // --- Derived data ---\n// True if id corresponds to local participant (*not* their screen share)\n\n\nfunction isLocal(id) {\n  return id === 'local';\n}\n\nfunction isScreenShare(id) {\n  return id.endsWith('-screen');\n}\n\nfunction containsScreenShare(callItems) {\n  return Object.keys(callItems).some(id => isScreenShare(id));\n}\n\nfunction getMessage(callState) {\n  function shouldShowClickAllow() {\n    const localCallItem = getLocalCallItem(callState.callItems);\n    const hasLoaded = localCallItem && !localCallItem.isLoading;\n    return !hasLoaded && callState.clickAllowTimeoutFired;\n  }\n\n  let header = null;\n  let detail = null;\n  let isError = false;\n\n  if (callState.fatalError) {\n    header = `Fatal error: ${callState.fatalError}`;\n    isError = true;\n  } else if (callState.camOrMicError) {\n    // header = `Camera or mic access error: ${callState.camOrMicError}`;\n    header = `Error: This page can't access your camera or mic.`;\n    detail = \"To troubleshoot in Chrome: To the right in your address bar, click the picture of the camera and select 'Always allow.' Hit enter and then refresh this page.\"; // 'See https://help.daily.co/en/articles/2528184-unblock-camera-mic-access-on-a-computer to troubleshoot.';\n\n    isError = true;\n  } else if (shouldShowClickAllow()) {\n    header = 'Click \"Allow\" to enable camera and mic access';\n  } else if (Object.keys(callState.callItems).length === 1) {\n    header = \"You're here! ðŸ‘‹ \";\n    detail = \"Waiting for everyone else...\"; // if(window.myName) {\n    //   detail = window.location.href.substring(0, window.location.href.indexOf(window.myName)-3);\n    // } else {detail = window.location.href}\n  }\n\n  return header || detail ? {\n    header,\n    detail,\n    isError\n  } : null;\n}\n\nexport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage };","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/src/components/LivestormTest/Call/callState.js"],"names":["initialCallState","callItems","local","videoTrackState","audioTrackState","clickAllowTimeoutFired","camOrMicError","fatalError","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","callState","action","type","getCallItems","participants","message","Error","getLocalCallItem","id","participant","Object","entries","tracks","video","audio","shouldIncludeScreenCallItem","screenVideo","screenAudio","trackStatesForInclusion","includes","state","isLocal","isScreenShare","endsWith","containsScreenShare","keys","some","getMessage","shouldShowClickAllow","localCallItem","hasLoaded","isLoading","header","detail","isError","length"],"mappings":"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","sourcesContent":["/**\n * Call state is comprised of:\n * - \"Call items\" (inputs to the call, i.e. participants or shared screens)\n * - UI state that depends on call items (for now, just whether to show \"click allow\" message)\n *\n * Call items are keyed by id:\n * - \"local\" for the current participant\n * - A session id for each remote participant\n * - \"<id>-screen\" for each shared screen\n */\nconst initialCallState = {\n  callItems: {\n    local: {\n      videoTrackState: null,\n      audioTrackState: null,\n    },\n  },\n  clickAllowTimeoutFired: false,\n  camOrMicError: null,\n  fatalError: null,\n};\n\n// --- Actions ---\n\n/**\n * CLICK_ALLOW_TIMEOUT action structure:\n * - type: string\n */\nconst CLICK_ALLOW_TIMEOUT = 'CLICK_ALLOW_TIMEOUT';\n\n/**\n * PARTICIPANTS_CHANGE action structure:\n * - type: string\n * - participants: Object (from Daily callObject.participants())\n */\nconst PARTICIPANTS_CHANGE = 'PARTICIPANTS_CHANGE';\n\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\nconst CAM_OR_MIC_ERROR = 'CAM_OR_MIC_ERROR';\n\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\nconst FATAL_ERROR = 'FATAL_ERROR';\n\n// --- Reducer and helpers --\n\nfunction callReducer(callState, action) {\n  switch (action.type) {\n    case CLICK_ALLOW_TIMEOUT:\n      return {\n        ...callState,\n        clickAllowTimeoutFired: true,\n      };\n    case PARTICIPANTS_CHANGE:\n      const callItems = getCallItems(action.participants);\n      return {\n        ...callState,\n        callItems,\n      };\n    case CAM_OR_MIC_ERROR:\n      return { ...callState, camOrMicError: action.message };\n    case FATAL_ERROR:\n      return { ...callState, fatalError: action.message };\n    default:\n      throw new Error();\n  }\n}\n\nfunction getLocalCallItem(callItems) {\n  return callItems['local'];\n}\n\nfunction getCallItems(participants) {\n  let callItems = { ...initialCallState.callItems }; // Ensure we *always* have a local participant\n  for (const [id, participant] of Object.entries(participants)) {\n\n    \n      callItems[id] = {\n        videoTrackState: participant.tracks.video,\n        audioTrackState: participant.tracks.audio,\n      };\n    \n    \n    if (shouldIncludeScreenCallItem(participant)) {\n      callItems[id + '-screen'] = {\n        videoTrackState: participant.tracks.screenVideo,\n        audioTrackState: participant.tracks.screenAudio,\n      };\n    }\n  }\n  return callItems;\n}\n\nfunction shouldIncludeScreenCallItem(participant) {\n  const trackStatesForInclusion = ['loading', 'playable', 'interrupted'];\n  return (\n    trackStatesForInclusion.includes(participant.tracks.screenVideo.state) ||\n    trackStatesForInclusion.includes(participant.tracks.screenAudio.state)\n  );\n}\n\n// --- Derived data ---\n\n// True if id corresponds to local participant (*not* their screen share)\nfunction isLocal(id) {\n  return id === 'local';\n}\n\nfunction isScreenShare(id) {\n  return id.endsWith('-screen');\n}\n\nfunction containsScreenShare(callItems) {\n  return Object.keys(callItems).some((id) => isScreenShare(id));\n}\n\nfunction getMessage(callState) {\n  function shouldShowClickAllow() {\n    const localCallItem = getLocalCallItem(callState.callItems);\n    const hasLoaded = localCallItem && !localCallItem.isLoading;\n    return !hasLoaded && callState.clickAllowTimeoutFired;\n  }\n\n  let header = null;\n  let detail = null;\n  let isError = false;\n  if (callState.fatalError) {\n    header = `Fatal error: ${callState.fatalError}`;\n    isError = true;\n  } else if (callState.camOrMicError) {\n    // header = `Camera or mic access error: ${callState.camOrMicError}`;\n    header = `Error: This page can't access your camera or mic.`;\n    detail =\n      \"To troubleshoot in Chrome: To the right in your address bar, click the picture of the camera and select 'Always allow.' Hit enter and then refresh this page.\"\n      // 'See https://help.daily.co/en/articles/2528184-unblock-camera-mic-access-on-a-computer to troubleshoot.';\n    isError = true;\n  } else if (shouldShowClickAllow()) {\n    header = 'Click \"Allow\" to enable camera and mic access';\n  } else if (Object.keys(callState.callItems).length === 1) {\n    header = \"You're here! ðŸ‘‹ \";\n    detail = \"Waiting for everyone else...\"\n    // if(window.myName) {\n    //   detail = window.location.href.substring(0, window.location.href.indexOf(window.myName)-3);\n    // } else {detail = window.location.href}\n    \n  }\n  return header || detail ? { header, detail, isError } : null;\n}\n\nexport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n};\n"]},"metadata":{},"sourceType":"module"}