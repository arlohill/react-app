{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useCallback}from'react';import Call from'../Call/Call';import StartScreen from'../StartScreen/StartScreen';import api from'../../../apiLivestormTesting';import'./AppLivestorm.css';import Tray from'../Tray/Tray';import CallObjectContext from'../../../CallObjectContext';import SessionStateContext from'../../../SessionStateContext';import MyContext from'../../../MyContext';import{roomUrlFromPageUrl,pageUrlFromRoomUrl}from'../../../urlUtils';import Daily from'@daily-co/daily-js';import{logDailyEvent}from'../../../logUtils';import audioPlayer from'../../../hooks/AudioPlayer';import AdminPanel from'../AdminPanel/AdminPanel';var STATE_IDLE='STATE_IDLE';var STATE_CREATING='STATE_CREATING';var STATE_JOINING='STATE_JOINING';var STATE_JOINED='STATE_JOINED';var STATE_LEAVING='STATE_LEAVING';var STATE_ERROR='STATE_ERROR';export default function AppLivestorm(){var _useState=useState(STATE_IDLE),_useState2=_slicedToArray(_useState,2),appState=_useState2[0],setAppState=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),roomUrl=_useState4[0],setRoomUrl=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),callObject=_useState6[0],setCallObject=_useState6[1];var _useState7=useState({type:'sessionState',isKnown:false,isActive:false,AdminVisible:false,hasAnUpdate:false,roleOf:{Buyer1:'',Buyer2:'',Buyer3:'',Buyer4:'',Seller:'',Shadow1:'',Shadow2:'',Shadow3:'',Shadow4:'',Shadow5:'',Shadow6:''},chatHistory:[]}),_useState8=_slicedToArray(_useState7,2),sessionState=_useState8[0],setSessionState=_useState8[1];var _useState9=useState({name:'Username',role:window.myRole,sidebar:true,amAdmin:true,//LIVESTORM PILOT CHANGE: setting all users to admin — to undo, change to: window.amAdmin\nuserList:{names:[],sessionIdFor:{}},adminPresent:false,viewMode:null,audioIsPlaying:false,camOnAtSessionStart:null,micOnAtSessionStart:null,number:null}),_useState10=_slicedToArray(_useState9,2),myState=_useState10[0],setMyState=_useState10[1];var setName=function setName(newName){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{name:newName});});};var setSidebar=function setSidebar(boolean){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{sidebar:boolean});});};var setViewMode=function setViewMode(newViewMode){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{viewMode:newViewMode});});};var setRole=function setRole(newRole){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{role:newRole});});};var setUserList=function setUserList(newUserList){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{userList:newUserList});});};var setAmAdmin=function setAmAdmin(boolean){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{amAdmin:boolean});});};var setAdminPresent=function setAdminPresent(boolean){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{adminPresent:boolean});});};var setMicOnAtSessionStart=function setMicOnAtSessionStart(boolean){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{micOnAtSessionStart:boolean});});};var setCamOnAtSessionStart=function setCamOnAtSessionStart(boolean){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{camOnAtSessionStart:boolean});});};var setNumber=function setNumber(newNum){setMyState(function(prev){return _objectSpread(_objectSpread({},prev),{},{number:newNum});});};//check password\n// if (!window.pass.includes(window.myP)) {\n//   //redirect if password is wrong\n//   window.location.href = \"http://secondbody.co\"\n// }\n/**\n   * Creates a new call room.\n   */var createCall=useCallback(function(){setAppState(STATE_CREATING);return api.createRoom().then(function(room){return room;}).catch(function(error){console.log('Error creating room',error);setRoomUrl(null);setAppState(STATE_IDLE);});},[]);/**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */var startJoiningCall=useCallback(function(url,token){var join=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newCallObject,pageUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newCallObject=Daily.createCallObject({subscribeToTracksAutomatically:false,url:url,token:token});setRoomUrl(url);setCallObject(newCallObject);setAppState(STATE_JOINING);_context.next=6;return newCallObject.startCamera();case 6:_context.next=8;return newCallObject.setUserName(myState.name);case 8:if(window.initialInputs){console.log('initial audio: '+window.initialInputs[0]+'. Initial video: '+window.initialInputs[1]);newCallObject.join({audioSource:window.initialInputs[0],videoSource:window.initialInputs[1]});}else{navigator.mediaDevices.getUserMedia({audio:true,video:true}).then(function(mediaStream){if(mediaStream){var localAudio=mediaStream.getAudioTracks();var localVideo=mediaStream.getVideoTracks();if(localAudio&&localAudio.length>0&&localVideo&&localVideo.length>0){newCallObject.join({audioSource:localAudio[0],videoSource:localVideo[0]});}}else{//message e.g. you need a mic to join\n}});}console.log('joining the call as '+myState.name);pageUrl=pageUrlFromRoomUrl(roomUrl)+'&N='+myState.name+'&R='+myState.role;case 11:case\"end\":return _context.stop();}}},_callee);}));return function join(){return _ref.apply(this,arguments);};}();join();},[myState.name]);/**\n   * Starts leaving the current call.\n   */var startLeavingCall=useCallback(function(){if(!callObject)return;callObject.stopRecording();// in case meeting is being recorded\n// If we're in the error state, we've already \"left\", so just clean up\nif(appState===STATE_ERROR){callObject.destroy().then(function(){setRoomUrl(null);setCallObject(null);setAppState(STATE_IDLE);window.initialize();});}else{setAppState(STATE_LEAVING);callObject.leave();window.initialize();}},[callObject,appState]);/**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */ // useEffect(() => {\n//   const url = roomUrlFromPageUrl();\n//   url && window.initialInputs && startJoiningCall(url);\n// }, [startJoiningCall]);\n/**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */useEffect(function(){var pageUrl=pageUrlFromRoomUrl(roomUrl);window.pageUrl=pageUrl;// if (myState.name) {\n//   if (pageUrl.indexOf('?') > -1){\n//     pageUrl += '&N=' + myState.name;\n//   }else{\n//     pageUrl += '?N=' + myState.name;\n//   }\n// }\n//append role to URL — LIVESTORM PILOT CHANGE: TOOK THIS OUT\n// if (myState.role) {\n//   if (pageUrl.indexOf('?') > -1){\n//     pageUrl += '&R=' + window.myRole;\n//   }else{\n//     pageUrl += '?R=' + window.myRole;\n//   }\n// }\nif(window.myP){if(pageUrl.indexOf('?')>-1){pageUrl+='&P='+window.myP;}else{pageUrl+='?P='+window.myP;}}if(pageUrl===window.location.href)return;window.history.replaceState(null,null,pageUrl);},[roomUrl]);/**\n   * Attach call object to window for debugging purposes.\n   */useEffect(function(){window.callObject=callObject;},[callObject]);/**\n   * Attach myState object to window for debugging purposes.\n   */useEffect(function(){window.myState=myState;},[myState]);/**\n   * Attach userList to window for debugging\n   */useEffect(function(){window.userList=myState.userList;},[myState.userList]);/**\n   * Attach sessionState to window for debugging\n   */useEffect(function(){window.sessionState=sessionState;},[sessionState]);useEffect(function(){if(!callObject){return;}window.record=function(){callObject.startRecording();};window.stop=function(){callObject.stopRecording();};},[appState]);//Ask for State when Admin becomes present and State is not known\nuseEffect(function(){var stateRequest;if(!callObject){return;}if(!sessionState.isKnown&&myState.adminPresent){var getState=function getState(){if(sessionState.isKnown){clearInterval(stateRequest);return;}callObject.sendAppMessage(\"State please?\",'*');console.log('Requesting meeting state...');};stateRequest=setInterval(getState,1000);}//cleanup before useEffect runs the next time\nreturn function cleanup(){stateRequest&&clearInterval(stateRequest);};},[sessionState.isKnown,myState.adminPresent]);/**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */useEffect(function(){if(!callObject)return;var events=['joined-meeting','left-meeting','error'];function handleNewMeetingState(event){event&&logDailyEvent(event);switch(callObject.meetingState()){case'joined-meeting':setAppState(STATE_JOINED);callObject.setNetworkTopology({topology:'sfu'});// window.userList.push(window.myName);\nconsole.log('*****JOINED MEETING');// if(myState.name==\"\"){callObject.leave();}\nbreak;case'left-meeting':callObject.destroy().then(function(){setRoomUrl(null);setCallObject(null);setAppState(STATE_IDLE);clearInterval(window.stateRequest);window.initialize();});break;case'error':setAppState(STATE_ERROR);break;default:break;}}// Use initial state\nhandleNewMeetingState();// Listen for changes in state\nfor(var _i=0,_events=events;_i<_events.length;_i++){var event=_events[_i];callObject.on(event,handleNewMeetingState);}// Stop listening for changes in state\nreturn function cleanup(){var _iterator=_createForOfIteratorHelper(events),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _event=_step.value;callObject.off(_event,handleNewMeetingState);}}catch(err){_iterator.e(err);}finally{_iterator.f();}};},[callObject]);/**\n   * Listen for app messages from other call participants.\n   */useEffect(function(){if(!callObject){return;}function handleAppMessage(e){if(e){logDailyEvent(e);console.log(\"received app message from \".concat(e.fromId,\": \"),e.data);//handle sessionState updates\nif(e.data.constructor===Object&&e.data.type==\"sessionState\"){var newSessionState=e.data;newSessionState.hasAnUpdate=false;//so it won't trigger another sendState() effect\nsetSessionState(newSessionState);}//TODO AUDIO TEST\nelse if(e.data.constructor===Object&&e.data.type==\"instructions\"&&e.data.recipient==callObject.participants().local.session_id){audioPlayer(e.data.target,e.data.action);}else if(e.data==\"State please?\"){console.log('*******Received state request');if(myState.amAdmin&&sessionState.isKnown){console.log(\"Sending current state...\");callObject.sendAppMessage(sessionState,'*');}}}}//end handleAppMessage\ncallObject.on('app-message',handleAppMessage);return function cleanup(){callObject.off('app-message',handleAppMessage);};},[callObject,sessionState]);/**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */var showCall=[STATE_JOINING,STATE_JOINED,STATE_ERROR].includes(appState);return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(SessionStateContext.Provider,{value:{session:[sessionState,setSessionState]}},/*#__PURE__*/React.createElement(MyContext.Provider,{value:{myStateArray:[myState,setMyState],setName:setName,setRole:setRole,setSidebar:setSidebar,setUserList:setUserList,setViewMode:setViewMode,setCamOnAtSessionStart:setCamOnAtSessionStart,setMicOnAtSessionStart:setMicOnAtSessionStart,setAdminPresent:setAdminPresent,setAmAdmin:setAmAdmin,setNumber:setNumber}},showCall?/*#__PURE__*/ // NOTE: for an app this size, it's not obvious that using a Context\n// is the best choice. But for larger apps with deeply-nested components\n// that want to access call object state and bind event listeners to the\n// call object, this can be a helpful pattern.\nReact.createElement(CallObjectContext.Provider,{value:callObject},/*#__PURE__*/React.createElement(Call,{roomUrl:roomUrl}),/*#__PURE__*/React.createElement(Tray,{onClickLeaveCall:startLeavingCall}),myState.amAdmin&&/*#__PURE__*/React.createElement(AdminPanel,null)):/*#__PURE__*/React.createElement(StartScreen// disabled={!enableStartButton}\n,{onClick:function onClick(){createCall().then(function(room){return startJoiningCall(room.url,room.token);});}}))));}","map":null,"metadata":{},"sourceType":"module"}