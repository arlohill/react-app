{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Tray/Tray.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, { TYPE_MUTE_CAMERA, TYPE_MUTE_MIC, TYPE_SCREEN, TYPE_LEAVE, TYPE_CHAT } from '../TrayButton/TrayButton';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n\n  const setSubs = () => {\n    setSubscriptions(callObject);\n  };\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n    isSharingScreen ? callObject.stopScreenShare() : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  const setViewMode = e => {\n    const viewmode = e.target.value;\n    console.log('Changing view mode to: ' + window.sessionState.roleOf[e.target.id]);\n    setSubs();\n  };\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_CAMERA,\n    disabled: props.disabled,\n    highlighted: isCameraMuted,\n    onClick: toggleCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_MIC,\n    disabled: props.disabled,\n    highlighted: isMicMuted,\n    onClick: toggleMic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), DailyIframe.supportedBrowser().supportsScreenShare && /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_SCREEN,\n    disabled: props.disabled,\n    highlighted: isSharingScreen,\n    onClick: toggleSharingScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_CHAT,\n    disabled: props.disabled,\n    highlighted: highlightedChat,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    onClickDisplay: displayChat,\n    notification: handleNewChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), window.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      zIndex: '999',\n      height: '80px',\n      bottom: '10px',\n      overflow: 'hidden',\n      visibility: 'visible',\n      flexGrow: '1',\n      textAlign: 'center',\n      position: 'absolute',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    id: \"my-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: \"view-mode\",\n    onChange: setViewMode(),\n    style: {\n      outline: 'none',\n      position: 'relative',\n      borderRadius: '20px',\n      height: '30px',\n      width: '100px',\n      bottom: '-22px',\n      cursor: 'pointer',\n      backgroundColor: '#2196F3',\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Room1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, \"Room1\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Room2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, \"Room2\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Actors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, \"Actors\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Participants\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, \"Participants\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"1s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, \"Both 1s\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, \"Both 2s\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"None\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }, \"None\")))), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      position: 'relative',\n      bottom: '3px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, \"My view\")), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_LEAVE,\n    disabled: props.disabled,\n    newButtonGroup: true,\n    highlighted: true,\n    onClick: leaveCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","Chat","AdminPanel","CallObjectContext","NameContext","logDailyEvent","DailyIframe","setSubscriptions","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","myName","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","setSubs","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","toggleSharingScreen","stopScreenShare","startScreenShare","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","setViewMode","e","viewmode","target","value","console","log","window","sessionState","roleOf","id","handleNewParticipantsState","event","on","cleanup","off","disabled","supportedBrowser","supportsScreenShare","amAdmin","zIndex","height","bottom","overflow","visibility","flexGrow","textAlign","position","left","transform","border","outline","borderRadius","width","cursor","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const setSubs = () => {setSubscriptions(callObject)};\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  const setViewMode = (e) => {\n    const viewmode = e.target.value;\n    console.log ('Changing view mode to: ' + window.sessionState.roleOf[e.target.id]);\n    setSubs();\n  }\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n      {window.amAdmin && (\n        <AdminPanel\n      />\n      )}\n\n      {/* <!-- Who Admin sees during a session --> */}\n      <div style={{zIndex:'999', height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible', flexGrow:'1', textAlign: 'center', position:'absolute', left:'50%', transform:'translateX(-50%)'}} id='my-view'>\n          <form action = ''>\n              <fieldset style={{border:'none'}}>\n              <select id = 'view-mode'onChange = {setViewMode()} style={{outline:'none', position: 'relative', borderRadius: '20px', height:'30px', width:'100px', bottom:'-22px', cursor:'pointer', backgroundColor: '#2196F3', color:'white'}}>\n              <option value = 'All'>All</option>\n              <option value = 'Room1'>Room1</option>\n              <option value = 'Room2'>Room2</option>\n              <option value = 'Actors'>Actors</option>\n              <option value = 'Participants'>Participants</option>\n              <option value = '1s'>Both 1s</option>\n              <option value = '2s'>Both 2s</option>\n              <option value = 'None'>None</option>\n              </select>\n              </fieldset>\n              </form>\n              <p style={{position:'relative', bottom: '3px'}}>My view</p>\n      </div>\n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}