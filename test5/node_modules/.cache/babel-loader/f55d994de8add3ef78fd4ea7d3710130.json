{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useContext,useReducer,useCallback,useState}from'react';import'./Call.css';import Tile from'../Tile/Tile';import CallObjectContext from'../../../CallObjectContext';import MyContext from'../../../MyContext';import SessionStateContext from'../../../SessionStateContext';import CallMessage from'../CallMessage/CallMessage';import{initialCallState,CLICK_ALLOW_TIMEOUT,PARTICIPANTS_CHANGE,CAM_OR_MIC_ERROR,FATAL_ERROR,callReducer,isLocal,isScreenShare,containsScreenShare,getMessage}from'./callState';import{logDailyEvent}from'../../../logUtils';import useSetSubscriptions from'../../../hooks/setSubscriptions';function useForceUpdate(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// integer state\nreturn function(){return setValue(function(value){return value+1;});};// update the state to force render\n}export default function Call(){useSetSubscriptions();var callObject=useContext(CallObjectContext);var _useContext=useContext(SessionStateContext),session=_useContext.session;var _session=_slicedToArray(session,2),sessionState=_session[0],setSessionState=_session[1];var _useReducer=useReducer(callReducer,initialCallState),_useReducer2=_slicedToArray(_useReducer,2),callState=_useReducer2[0],dispatch=_useReducer2[1];var forceUpdate=useForceUpdate();var _useContext2=useContext(MyContext),myStateArray=_useContext2.myStateArray,setName=_useContext2.setName,setRole=_useContext2.setRole,setUserList=_useContext2.setUserList,setViewMode=_useContext2.setViewMode,setCamOnAtSessionStart=_useContext2.setCamOnAtSessionStart,setMicOnAtSessionStart=_useContext2.setMicOnAtSessionStart,setAdminPresent=_useContext2.setAdminPresent,setAmAdmin=_useContext2.setAmAdmin,setNumber=_useContext2.setNumber;var _myStateArray=_slicedToArray(myStateArray,2),myState=_myStateArray[0],setMyState=_myStateArray[1];window.updateCall=function(){forceUpdate();};/**\n   * Set default viewmode and turn cam on/off when session begins or my role changes\n   */useEffect(function(){if(sessionState.isActive){switch(myState.role){case'Attendee':case'Admin'://reset to default viewMode\nif(sessionState.roleOf.Shadow1){setViewMode('Shadow1');}else if(sessionState.roleOf.Shadow2)//fallbacks in case shadow1 is not assigned\n{setViewMode('Shadow2');}else if(sessionState.roleOf.Shadow3){setViewMode('Shadow3');}else if(sessionState.roleOf.Shadow4){setViewMode('Shadow4');}else{setViewMode('Seller');}//when session starts up, \"remember\" if cam + mic were on or off\nif(myState.camOnAtSessionStart&&myState.camOnAtSessionStart===null){setMicOnAtSessionStart(callObject.localAudio());setCamOnAtSessionStart(callObject.localVideo());}//and turn off cam and mic \ncallObject.setLocalAudio(false);callObject.setLocalVideo(false);break;case'Seller':case'Buyer1':case'Buyer2':case'Buyer3':case'Buyer4':case'Shadow1':case'Shadow2':case'Shadow3':case'Shadow4'://when session starts, \"remember\" if cam + mic were on or off\nif(myState.camOnAtSessionStart===null){setMicOnAtSessionStart(callObject.localAudio());setCamOnAtSessionStart(callObject.localVideo());}//turn on cam and mic\ncallObject.setLocalAudio(true);callObject.setLocalVideo(true);}}else if(!sessionState.isActive){!callObject.localAudio()&&callObject.setLocalAudio(myState.micOnAtSessionStart);!callObject.localVideo()&&callObject.setLocalVideo(myState.camOnAtSessionStart);setMicOnAtSessionStart(null);setCamOnAtSessionStart(null);}},[sessionState.isActive,myState.role]);/**\n   * Update my role according to sessionState changes\n   */useEffect(function(){var myNewRole='Attendee';//default, if no role assigned\nfor(var key in sessionState.roleOf){if(sessionState.roleOf[key]==myState.name){myNewRole=key;}}if(myNewRole!==myState.role){setRole(myNewRole);if(myNewRole.includes('1')){setNumber(1);}else if(myNewRole.includes('2')){setNumber(2);}}},[sessionState.roleOf]);var getUserList=useCallback(function(){return new Promise(function(resolve){console.log('*****UPDATING PARTICIPANT LIST******');var userListIncludesAdmin=false;//default\nvar ps=callObject.participants();var workingUserList={names:[myState.name],sessionIdFor:{}};for(var p in ps){if(p!=='local'){var thisUserName=ps[p].user_name;var thisSessionId=ps[p].session_id;workingUserList.names.push(thisUserName);//add each user_name with its sessionID to UserList\nworkingUserList.sessionIdFor[thisUserName]=thisSessionId;console.log('***ADDING: '+thisUserName);if(thisUserName.includes('_Admin')){userListIncludesAdmin=true;}};};userListIncludesAdmin?console.log('Admin IS present'):console.log('Admin IS NOT present');workingUserList.names.sort();//alphebetize that list \nconsole.log(\"here's the userList: \".concat(workingUserList.names));resolve([workingUserList,userListIncludesAdmin]);});},[callObject,myState]);var checkIfAdminPresent=useCallback(function(){return new Promise(function(resolve){var adminAlreadyPresent=false;var ps=callObject.participants();var lookForMoreParticipants=setInterval(function(){//This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\nif(Object.keys(ps).length>1||Object.keys(ps).length<=1&&ps.local.user_name==myState.name){clearInterval(lookForMoreParticipants);for(var p in ps){var thisUserName=ps[p].user_name;if(thisUserName.includes('_Admin')&&p!=='local'){adminAlreadyPresent=true;}console.log(\"Participant present: \".concat(thisUserName));}resolve(adminAlreadyPresent);}else{return;}},500);});},[callObject,myState]);/**\n   * Start listening for participant changes, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;///END TEMP//////\nvar events=['participant-joined','participant-updated','participant-left','joined-meeting'];function handleNewParticipantsState(e){e&&logDailyEvent(e);dispatch({type:PARTICIPANTS_CHANGE,participants:callObject.participants()});if(e&&e.action!='participant-updated'){if(e.action==\"participant-joined\"||e.action==\"participant-left\"){//wait is necessary to avoid 'dummy' userName\nvar update=function update(){getUserList().then(function(_ref){var _ref2=_slicedToArray(_ref,2),workingUserList=_ref2[0],userListIncludesAdmin=_ref2[1];setUserList(workingUserList);setAdminPresent(userListIncludesAdmin);// if (sessionState.isKnown === null) {\n//   if(myState.amAdmin) {   //determine if there's a prior session state\n//     setSessionState((prev)=>({\n//       ...prev,\n//       isKnown: userListIncludesAdmin ? false : true,   //if an admin is already present, make joining admin request a state update\n//     }));\n//     let isKnown = userListIncludesAdmin ? false : true;\n//     console.log('just set IS KNOWN to: ' + isKnown);\n//   }\n// } else {      //for non-admins\n//   setSessionState((prev)=>({\n//     ...prev,\n//     isKnown: false,\n//   }));\n// }\n});};window.event=e;setTimeout(update,50);}else if(e.action=='joined-meeting'){console.log('*****I JOINED THE MEETING');if(myState.name==='Arlo_Admin'){callObject.startRecording();console.log('***STARTING TO RECORD***');}getUserList().then(function(_ref3){var _ref4=_slicedToArray(_ref3,2),workingUserList=_ref4[0],userListIncludesAdmin=_ref4[1];setUserList(workingUserList);if(myState.amAdmin&&!userListIncludesAdmin){checkIfAdminPresent().then(function(adminAlreadyPresent){setSessionState(function(prev){return _objectSpread(_objectSpread({},prev),{},{isKnown:adminAlreadyPresent?false:true//if an admin is already present, make joining admin request a state update\n});});});}});}}}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\nfor(var _i=0,_events=events;_i<_events.length;_i++){var event=_events[_i];callObject.on(event,handleNewParticipantsState);}// Stop listening for changes in state\nreturn function cleanup(){var _iterator=_createForOfIteratorHelper(events),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _event=_step.value;callObject.off(_event,handleNewParticipantsState);}}catch(err){_iterator.e(err);}finally{_iterator.f();}};},[callObject]);/**\n   * Start listening for call errors, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;function handleCameraErrorEvent(event){logDailyEvent(event);dispatch({type:CAM_OR_MIC_ERROR,message:event&&event.errorMsg&&event.errorMsg.errorMsg||'Unknown'});}// We're making an assumption here: there is no camera error when callObject\n// is first assigned.\ncallObject.on('camera-error',handleCameraErrorEvent);return function cleanup(){callObject.off('camera-error',handleCameraErrorEvent);};},[callObject]);/**\n   * Start listening for fatal errors, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;function handleErrorEvent(e){logDailyEvent(e);dispatch({type:FATAL_ERROR,message:e&&e.errorMsg||'Unknown'});}// We're making an assumption here: there is no error when callObject is\n// first assigned.\ncallObject.on('error',handleErrorEvent);return function cleanup(){callObject.off('error',handleErrorEvent);};},[callObject]);/**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */useEffect(function(){var t=setTimeout(function(){dispatch({type:CLICK_ALLOW_TIMEOUT});},2500);return function cleanup(){clearTimeout(t);};},[]);///todo: fix this\n// const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n//   useEffect(()=>{\n// window.numberOfSubs =numberOfSubs;\n// console.log('*****NUMBER OF SUBS:'+numberOfSubs);\n//   },[numberOfSubs])\nfunction getTiles(){var largeTiles=[];var smallTiles=[];Object.entries(callState.callItems).forEach(function(_ref5){var _ref6=_slicedToArray(_ref5,2),id=_ref6[0],callItem=_ref6[1];var isAudioOnly=function isAudioOnly(){if(!callItem.audioTrackState||!callItem.videoTrackState){return;}return callItem.audioTrackState.subscribed&&!callItem.videoTrackState.subscribed;};var isLarge=isScreenShare(id)||!isLocal(id)&&!containsScreenShare(callState.callItems)||isLocal(id)&&window.numberOfSubs&&window.numberOfSubs>1&&!containsScreenShare(callState.callItems);//videoTrackState()\nvar tile=/*#__PURE__*/React.createElement(Tile,{key:id,videoTrackState:callItem.videoTrackState,audioTrackState:callItem.audioTrackState,isLocalPerson:isLocal(id),isAudioOnly:isAudioOnly(),isLarge:isLarge,disableCornerMessage:isScreenShare(id),isScreenShare:isScreenShare(id)// onClick={\n//   isLocal(id)\n//     ? null\n//     : () => {\n//         sendHello(id);\n//       }\n// }\n});if(isLarge){largeTiles.push(tile);}else{smallTiles.push(tile);}});return[largeTiles,smallTiles];}var _getTiles=getTiles(),_getTiles2=_slicedToArray(_getTiles,2),largeTiles=_getTiles2[0],smallTiles=_getTiles2[1];/**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */useEffect(function(){// console.log('re-rendered');\n// console.log('Userlist: ' + window.userList);\nwindow.largeTiles=largeTiles;window.smallTales=smallTiles;window.add=function(){var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;for(var i=0;i<n;i++){callObject.addFakeParticipant();}};});// attach callState to window for debugging\nuseEffect(function(){window.callState=callState;},[callState]);var message=getMessage(callState);return/*#__PURE__*/React.createElement(\"div\",{className:myState.amAdmin?\"call-with-sidebar\":\"call\"},/*#__PURE__*/React.createElement(\"div\",{className:\"large-tiles count-\".concat(containsScreenShare(callState.callItems)&&'1'||window.numberOfSubs&&window.numberOfSubs+1)},!message?largeTiles:null/* Avoid showing large tiles to make room for the message */),/*#__PURE__*/React.createElement(\"div\",{className:\"small-tiles\"},smallTiles),message&&/*#__PURE__*/React.createElement(CallMessage,{header:message.header,detail:message.detail,isError:message.isError}));}","map":null,"metadata":{},"sourceType":"module"}