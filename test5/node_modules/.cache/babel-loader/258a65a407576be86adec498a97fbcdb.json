{"ast":null,"code":"/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base live stream path for the Mux API\n * */\n\n\nconst PATH = '/video/v1/live-streams';\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\n\nconst buildBasePath = liveStreamId => `${PATH}/${liveStreamId}`;\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\n\n\nclass LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream\n   */\n  create(params) {\n    return this.http.post(PATH, params);\n  }\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream\n   */\n\n\n  del(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to delete a live stream'));\n    }\n\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream\n   */\n\n\n  get(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to get a live stream'));\n    }\n\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-live-streams\n   */\n\n\n  list(params) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete\n   */\n\n\n  signalComplete(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to signal a stream is complete'));\n    }\n\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key\n   */\n\n\n  resetStreamKey(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to reset a live stream key'));\n    }\n\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id\n   */\n\n\n  createPlaybackId(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to create a live stream playback ID'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('A playback policy is required to create a live stream playback ID'));\n    }\n\n    return this.http.post(`${buildBasePath(liveStreamId)}/playback-ids`, params);\n  }\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id\n   */\n\n\n  deletePlaybackId(liveStreamId, playbackId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to delete a live stream playback ID'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A live stream playback ID is required to delete a live stream playback ID'));\n    }\n\n    return this.http.delete(`${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`);\n  }\n  /**\n   * Create a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live simulcast target\n   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target\n   */\n\n\n  createSimulcastTarget(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to create a simulcast target'));\n    }\n\n    if (!(params && params.url)) {\n      return Promise.reject(new Error('A url is required to create a simulcast target'));\n    }\n\n    return this.http.post(`${buildBasePath(liveStreamId)}/simulcast-targets`, params);\n  }\n  /**\n   * Get a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live simulcast target\n   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target\n   */\n\n\n  getSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to get a simulcast target'));\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(new Error('A simulcast target ID is required to get a simulcast target'));\n    }\n\n    return this.http.get(`${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`);\n  }\n  /**\n   * Delete a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a simulcast target\n   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target\n   */\n\n\n  deleteSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to delete a simulcast target'));\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(new Error('A simulcast target ID is required to delete a simulcast target'));\n    }\n\n    return this.http.delete(`${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`);\n  }\n  /**\n   * Disable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Disable a live stream\n   * Video.LiveStreams.disable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream\n   */\n\n\n  disable(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to disable a live stream'));\n    }\n\n    return this.http.put(`${buildBasePath(liveStreamId)}/disable`);\n  }\n  /**\n   * Enable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Enable a Live Stream\n   * Video.LiveStreams.enable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream\n   */\n\n\n  enable(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(new Error('A live stream ID is required to enable a live stream'));\n    }\n\n    return this.http.put(`${buildBasePath(liveStreamId)}/enable`);\n  }\n\n}\n\nmodule.exports = LiveStreams;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/@mux/mux-node/src/video/resources/liveStreams.js"],"names":["Base","require","PATH","buildBasePath","liveStreamId","LiveStreams","create","params","http","post","del","Promise","reject","Error","delete","get","list","signalComplete","put","resetStreamKey","createPlaybackId","deletePlaybackId","playbackId","createSimulcastTarget","url","getSimulcastTarget","simulcastTargetId","deleteSimulcastTarget","disable","enable","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,wBAAb;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGC,YAAY,IAAK,GAAEF,IAAK,IAAGE,YAAa,EAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAN,SAA0BL,IAA1B,CAA+B;AAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,WAAO,KAAKC,IAAL,CAAUC,IAAV,CAAeP,IAAf,EAAqBK,MAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,GAAG,CAACN,YAAD,EAAe;AAChB,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,sDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUM,MAAV,CAAiBX,aAAa,CAACC,YAAD,CAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,GAAG,CAACX,YAAD,EAAe;AAChB,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,mDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUO,GAAV,CAAcZ,aAAa,CAACC,YAAD,CAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,IAAI,CAACT,MAAD,EAAS;AACX,WAAO,KAAKC,IAAL,CAAUO,GAAV,CAAcb,IAAd,EAAoB;AAAEK,MAAAA;AAAF,KAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEU,EAAAA,cAAc,CAACb,YAAD,EAAe;AAC3B,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,6DAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUU,GAAV,CAAe,GAAEf,aAAa,CAACC,YAAD,CAAe,WAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEe,EAAAA,cAAc,CAACf,YAAD,EAAe;AAC3B,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,yDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUC,IAAV,CAAgB,GAAEN,aAAa,CAACC,YAAD,CAAe,mBAA9C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEgB,EAAAA,gBAAgB,CAAChB,YAAD,EAAeG,MAAf,EAAuB;AACrC,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,kEADF,CADK,CAAP;AAKD;;AAED,QAAI,CAACN,MAAL,EAAa;AACX,aAAOI,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,mEADF,CADK,CAAP;AAKD;;AACD,WAAO,KAAKL,IAAL,CAAUC,IAAV,CACJ,GAAEN,aAAa,CAACC,YAAD,CAAe,eAD1B,EAELG,MAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,gBAAgB,CAACjB,YAAD,EAAekB,UAAf,EAA2B;AACzC,QAAI,CAAClB,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,kEADF,CADK,CAAP;AAKD;;AAED,QAAI,CAACS,UAAL,EAAiB;AACf,aAAOX,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,2EADF,CADK,CAAP;AAKD;;AACD,WAAO,KAAKL,IAAL,CAAUM,MAAV,CACJ,GAAEX,aAAa,CAACC,YAAD,CAAe,iBAAgBkB,UAAW,EADrD,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,qBAAqB,CAACnB,YAAD,EAAeG,MAAf,EAAuB;AAC1C,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,2DAAV,CADK,CAAP;AAGD;;AAED,QAAI,EAAEN,MAAM,IAAIA,MAAM,CAACiB,GAAnB,CAAJ,EAA6B;AAC3B,aAAOb,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,gDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUC,IAAV,CACJ,GAAEN,aAAa,CAACC,YAAD,CAAe,oBAD1B,EAELG,MAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEkB,EAAAA,kBAAkB,CAACrB,YAAD,EAAesB,iBAAf,EAAkC;AAClD,QAAI,CAACtB,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,wDAAV,CADK,CAAP;AAGD;;AAED,QAAI,CAACa,iBAAL,EAAwB;AACtB,aAAOf,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,6DAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUO,GAAV,CACJ,GAAEZ,aAAa,CAACC,YAAD,CAAe,sBAAqBsB,iBAAkB,EADjE,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,qBAAqB,CAACvB,YAAD,EAAesB,iBAAf,EAAkC;AACrD,QAAI,CAACtB,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,2DAAV,CADK,CAAP;AAGD;;AAED,QAAI,CAACa,iBAAL,EAAwB;AACtB,aAAOf,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,gEADF,CADK,CAAP;AAKD;;AACD,WAAO,KAAKL,IAAL,CAAUM,MAAV,CACJ,GAAEX,aAAa,CAACC,YAAD,CAAe,sBAAqBsB,iBAAkB,EADjE,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACxB,YAAD,EAAe;AACpB,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,uDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUU,GAAV,CAAe,GAAEf,aAAa,CAACC,YAAD,CAAe,UAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEyB,EAAAA,MAAM,CAACzB,YAAD,EAAe;AACnB,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOO,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,sDAAV,CADK,CAAP;AAGD;;AACD,WAAO,KAAKL,IAAL,CAAUU,GAAV,CAAe,GAAEf,aAAa,CAACC,YAAD,CAAe,SAA7C,CAAP;AACD;;AAhV4B;;AAmV/B0B,MAAM,CAACC,OAAP,GAAiB1B,WAAjB","sourcesContent":["/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base live stream path for the Mux API\n * */\nconst PATH = '/video/v1/live-streams';\n\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\nconst buildBasePath = liveStreamId => `${PATH}/${liveStreamId}`;\n\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\nclass LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream\n   */\n  create(params) {\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream\n   */\n  del(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a live stream')\n      );\n    }\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream\n   */\n  get(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a live stream')\n      );\n    }\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-live-streams\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete\n   */\n  signalComplete(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to signal a stream is complete')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key\n   */\n  resetStreamKey(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to reset a live stream key')\n      );\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id\n   */\n  createPlaybackId(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to create a live stream playback ID'\n        )\n      );\n    }\n\n    if (!params) {\n      return Promise.reject(\n        new Error(\n          'A playback policy is required to create a live stream playback ID'\n        )\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/playback-ids`,\n      params\n    );\n  }\n\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id\n   */\n  deletePlaybackId(liveStreamId, playbackId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'A live stream playback ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live simulcast target\n   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target\n   */\n  createSimulcastTarget(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to create a simulcast target')\n      );\n    }\n\n    if (!(params && params.url)) {\n      return Promise.reject(\n        new Error('A url is required to create a simulcast target')\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/simulcast-targets`,\n      params\n    );\n  }\n\n  /**\n   * Get a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live simulcast target\n   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target\n   */\n  getSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error('A simulcast target ID is required to get a simulcast target')\n      );\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Delete a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a simulcast target\n   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target\n   */\n  deleteSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error(\n          'A simulcast target ID is required to delete a simulcast target'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Disable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Disable a live stream\n   * Video.LiveStreams.disable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream\n   */\n  disable(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to disable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/disable`);\n  }\n\n  /**\n   * Enable a Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Enable a Live Stream\n   * Video.LiveStreams.enable(liveStreamId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream\n   */\n  enable(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to enable a live stream')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/enable`);\n  }\n}\n\nmodule.exports = LiveStreams;\n"]},"metadata":{},"sourceType":"script"}