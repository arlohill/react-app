{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Chat/Chat.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({\n      type: 'chat',\n      message: inputValue\n    }, '*');\n    const name = callObject.participants().local.user_name.includes('_Admin') ? callObject.participants().local.user_name.split('_Admin').join('') : callObject.participants().local.user_name;\n    setChatHistory([...chatHistory, {\n      sender: name,\n      message: inputValue,\n      type: my - message\n    }]);\n    setInputValue('');\n  }\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name.includes('_Admin') ? participants[event.fromId].user_name.split('_Admin').join('') : participants[event.fromId].user_name;\n      event.data.type == 'chat' && setChatHistory([...chatHistory, {\n        sender: name,\n        message: event.data.message,\n        type: received - message\n      }]); // Make other icons light up\n\n      event.data.type == 'chat' && props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n  useEffect(() => {}, [chatHistory]);\n  return props.onClickDisplay ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-history\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, chatHistory.map((entry, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `entry-${index}`,\n    className: entry.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, entry.sender), \": \", entry.message))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"chatInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"chatInput\",\n    className: \"chat-input\",\n    type: \"text\",\n    placeholder: \"Type your message here..\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"send-chat-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Send\"))) : null;\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","Chat","props","callObject","inputValue","setInputValue","chatHistory","setChatHistory","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","type","message","name","participants","local","user_name","includes","split","join","sender","my","handleAppMessage","fromId","data","received","notification","on","cleanup","off","onClickDisplay","map","entry","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAO,YAAP;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAMC,UAAU,GAAGN,UAAU,CAACG,iBAAD,CAA7B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9BJ,IAAAA,aAAa,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,WAASC,YAAT,CAAsBH,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACI,cAAN;AACAV,IAAAA,UAAU,CAACW,cAAX,CAA0B;AAAEC,MAAAA,IAAI,EAAC,MAAP;AAAeC,MAAAA,OAAO,EAAEZ;AAAxB,KAA1B,EAAgE,GAAhE;AACA,UAAMa,IAAI,GAAGd,UAAU,CAACe,YAAX,GAA0BC,KAA1B,CAAgCC,SAAhC,CAA0CC,QAA1C,CAAmD,QAAnD,IACTlB,UAAU,CAACe,YAAX,GAA0BC,KAA1B,CAAgCC,SAAhC,CAA0CE,KAA1C,CAAgD,QAAhD,EAA0DC,IAA1D,CAA+D,EAA/D,CADS,GAETpB,UAAU,CAACe,YAAX,GAA0BC,KAA1B,CAAgCC,SAFpC;AAGAb,IAAAA,cAAc,CAAC,CACb,GAAGD,WADU,EAEb;AACEkB,MAAAA,MAAM,EAAEP,IADV;AAEED,MAAAA,OAAO,EAAEZ,UAFX;AAGEW,MAAAA,IAAI,EAAEU,EAAE,GAACT;AAHX,KAFa,CAAD,CAAd;AAQAX,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AAED;AACF;AACA;AACA;;;AACEN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,UAAL,EAAiB;AACf;AACD;;AAED,aAASuB,gBAAT,CAA0BjB,KAA1B,EAAiC;AAC/B,YAAMS,YAAY,GAAGf,UAAU,CAACe,YAAX,EAArB;AACA,YAAMD,IAAI,GAAGC,YAAY,CAACT,KAAK,CAACkB,MAAP,CAAZ,CAA2BP,SAA3B,CAAqCC,QAArC,CAA8C,QAA9C,IACXH,YAAY,CAACT,KAAK,CAACkB,MAAP,CAAZ,CAA2BP,SAA3B,CAAqCE,KAArC,CAA2C,QAA3C,EAAqDC,IAArD,CAA0D,EAA1D,CADW,GAEXL,YAAY,CAACT,KAAK,CAACkB,MAAP,CAAZ,CAA2BP,SAF7B;AAGAX,MAAAA,KAAK,CAACmB,IAAN,CAAWb,IAAX,IAAiB,MAAjB,IAA0BR,cAAc,CAAC,CACvC,GAAGD,WADoC,EAEvC;AACEkB,QAAAA,MAAM,EAAEP,IADV;AAEED,QAAAA,OAAO,EAAEP,KAAK,CAACmB,IAAN,CAAWZ,OAFtB;AAGED,QAAAA,IAAI,EAAEc,QAAQ,GAACb;AAHjB,OAFuC,CAAD,CAAxC,CAL+B,CAa/B;;AACAP,MAAAA,KAAK,CAACmB,IAAN,CAAWb,IAAX,IAAiB,MAAjB,IAA0Bb,KAAK,CAAC4B,YAAN,EAA1B;AACD;;AAED3B,IAAAA,UAAU,CAAC4B,EAAX,CAAc,aAAd,EAA6BL,gBAA7B;AAEA,WAAO,SAASM,OAAT,GAAmB;AACxB7B,MAAAA,UAAU,CAAC8B,GAAX,CAAe,aAAf,EAA8BP,gBAA9B;AACD,KAFD;AAGD,GA3BQ,EA2BN,CAACvB,UAAD,EAAaG,WAAb,CA3BM,CAAT;AA6BAP,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACO,WAAD,CAAX,CAAT;AAEA,SAAOJ,KAAK,CAACgC,cAAN,gBACL;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA5B,WAAW,CAAC6B,GAAZ,CAAgB,CAACC,KAAD,EAAQC,KAAR,kBAChB;AAAK,IAAA,GAAG,EAAG,SAAQA,KAAM,EAAzB;AAA4B,IAAA,SAAS,EAAED,KAAK,CAACrB,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIqB,KAAK,CAACZ,MAAV,CADF,QAC0BY,KAAK,CAACpB,OADhC,CADA,CAFA,CADR,eAUE;AAAM,IAAA,QAAQ,EAAEJ,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,WAAW,EAAC,0BAJd;AAKE,IAAA,KAAK,EAAER,UALT;AAME,IAAA,QAAQ,EAAEI,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAUE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,CAVF,CADK,GA0BH,IA1BJ;AA2BD","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({ type:'chat', message: inputValue }, '*');\n    const name = callObject.participants().local.user_name.includes('_Admin')\n      ? callObject.participants().local.user_name.split('_Admin').join('')\n      : callObject.participants().local.user_name;\n    setChatHistory([\n      ...chatHistory,\n      {\n        sender: name,\n        message: inputValue,\n        type: my-message,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name.includes('_Admin')\n      ? participants[event.fromId].user_name.split('_Admin').join('')\n      : participants[event.fromId].user_name;\n      event.data.type=='chat'&& setChatHistory([\n        ...chatHistory,\n        {\n          sender: name,\n          message: event.data.message,\n          type: received-message,\n        },\n      ]);\n      // Make other icons light up\n      event.data.type=='chat'&& props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n            <div className=\"chat-history\">\n          {\n            chatHistory.map((entry, index) => (\n            <div key={`entry-${index}`} className={entry.type}>\n              <b>{entry.sender}</b>: {entry.message}\n            </div>\n          ))\n          }\n          </div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}