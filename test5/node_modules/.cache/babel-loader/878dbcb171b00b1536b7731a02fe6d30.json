{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/App/App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext'; // import MyInfoContext from '../../MyInfoContext';\n\nimport SessionContext from '../../SessionContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nwindow.myInfo = {\n  name: '',\n  subscriptions: ['Admin'],\n  myRole: null\n};\nwindow.sessionState = {\n  type: 'sessionState',\n  isActive: true,\n  AdminVisible: true,\n  roleOf: {\n    Participant1: 'Admin',\n    Participant2: null,\n    Actor1: null,\n    Actor2: null\n  }\n};\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  /**\n   * Creates a new call room.\n   */\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  /*   \n  ARLO NOTE:\n        Below is where the trouble is. myInfo.name is set via a child component, <StartScreen>, \n        and it successfully changes myInfo.name (I've confirmed since it's pinned to the Window).\n        The below works... the first time. But then callObject.participants().local.user_name gets \"stuck\", \n        so if you exit and leave, or even refresh the page, it never changes. Weird behavior\n  */\n\n  const startJoiningCall = useCallback(url => {\n    const newCallObject = DailyIframe.createCallObject({\n      subscribeToTracksAutomatically: false,\n      userName: window.myInfo.name //one way I've tred to do itâ€”-is this correct?\n\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({\n      url,\n      userName: window.myInfo.name\n    }); //another way I've tried to do it--is this correct?\n\n    console.log('joining the call as ' + window.myInfo.name); //this sometimes displays myInfo.name, sometimes not\n    // callObject.setUserName(myInfo.name);   //nope! ERROR: \"TypeError: Cannot read property 'setUserName' of null\"\n  }, []);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE); // setMyInfo(null);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave(); // setMyInfo(null);\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          });\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n        let participants = callObject.participants(); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          const setSubs = () => {\n            setSubscriptions(window.sessionState, window.myInfo, callObject);\n          }; //temporarily commented out\n          // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n          //     {return;}\n          // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n          //     clearInterval(stateRequest);\n          // }\n\n\n          let priorSessionState = window.sessionState;\n          window.sessionState = e.data;\n          let needToSetSubs = false;\n          setSubs(); //temporarily commented out\n          // change my role if it has been updated in sessionState\n\n          if (window.sessionState.roleOf != priorSessionState.roleOf) {\n            let myNewRole = 'Attendee'; //default, if no role assigned\n\n            for (const key in window.sessionState.roleOf) {\n              if (window.sessionState.roleOf[key] == myName) {\n                myNewRole = key;\n              }\n            }\n\n            if (myNewRole != myRole) {\n              myRole = myNewRole;\n              setNumber();\n\n              if (window.sessionState.isActive) {\n                needToSetSubs = true;\n                activateSession(); //rebuild UI for the newly assigned role, mid-session\n              }\n            } //create or delete rooms according to assignments of Thirds\n\n\n            if (window.sessionState.roleOf.Room3A != '') {\n              !$(\"#view-mode option[value=Room3\").length > 0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n            } else {\n              $(\"#view-mode option[value=Room3\").remove();\n            }\n\n            if (window.sessionState.roleOf.Room4A != '') {\n              !$(\"#view-mode option[value=Room4\").length > 0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n            } else {\n              $(\"#view-mode option[value=Room4\").remove();\n            }\n\n            if (window.sessionState.roleOf.Room5A != '') {\n              !$(\"#view-mode option[value=Room5\").length > 0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n            } else {\n              $(\"#view-mode option[value=Room5\").remove();\n            }\n          }\n\n          if (priorSessionState.isActive !== window.sessionState.isActive || priorSessionState.AdminVisible !== window.sessionState.AdminVisible) {\n            needToSetSubs = true;\n          } //now, reset subscriptions if necessary\n\n\n          if (needToSetSubs) {\n            setSubscriptions();\n          } //when session starts\n\n\n          if (priorSessionState.isActive == false && window.sessionState.isActive == true) {\n            activateSession();\n          } //when session is paused\n          else if (priorSessionState.isActive == true && window.sessionState.isActive == false) {\n              pauseSession();\n            }\n        } //not used in this module, since there's no timer\n        // if none of the above, just overlay the message\n        // else if (e.data.constructor !== Object) {    \n        //     overlayMessage(e.data,10000);\n        // }\n\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n\n  const enableStartButton = appState === STATE_IDLE;\n  return (\n    /*#__PURE__*/\n    //  <SessionContext.Provider value={[sessionState,setSessionState]}>\n\n    /* <MyInfoContext.Provider value={[myInfo,setMyInfo]}> */\n    React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 5\n      }\n    }, showCall ?\n    /*#__PURE__*/\n    // NOTE: for an app this size, it's not obvious that using a Context\n    // is the best choice. But for larger apps with deeply-nested components\n    // that want to access call object state and bind event listeners to the\n    // call object, this can be a helpful pattern.\n    React.createElement(CallObjectContext.Provider, {\n      value: callObject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Call, {\n      roomUrl: roomUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Tray, {\n      disabled: !enableCallButtons,\n      onClickLeaveCall: startLeavingCall,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n    , {\n      onClick: () => {\n        createCall().then(url => startJoiningCall(url));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }\n    }))\n    /* </MyInfoContext.Provider> */\n    // </SessionContext.Provider>\n\n  );\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/App/App.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","setSubscriptions","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","window","myInfo","name","subscriptions","myRole","sessionState","type","isActive","AdminVisible","roleOf","Participant1","Participant2","Actor1","Actor2","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","subscribeToTracksAutomatically","userName","join","startLeavingCall","destroy","leave","pageUrl","location","href","history","replaceState","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","on","cleanup","off","handleAppMessage","e","fromId","data","participants","constructor","Object","setSubs","priorSessionState","needToSetSubs","myNewRole","key","myName","setNumber","activateSession","Room3A","$","length","append","remove","Room4A","Room5A","pauseSession","showCall","includes","enableCallButtons","enableStartButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\n// import MyInfoContext from '../../MyInfoContext';\nimport SessionContext from '../../SessionContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\nwindow.myInfo={ \n  name:'',\n  subscriptions: ['Admin'],\n  myRole: null,\n};\n\nwindow.sessionState = \n{\n  type: 'sessionState',\n  isActive:true,\n  AdminVisible:true,\n  roleOf: {\n    Participant1: 'Admin',\n    Participant2: null,\n    Actor1: null,\n    Actor2: null,\n  }\n}\n\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n/*   \nARLO NOTE:\n      Below is where the trouble is. myInfo.name is set via a child component, <StartScreen>, \n      and it successfully changes myInfo.name (I've confirmed since it's pinned to the Window).\n      The below works... the first time. But then callObject.participants().local.user_name gets \"stuck\", \n      so if you exit and leave, or even refresh the page, it never changes. Weird behavior\n*/\n\n  const startJoiningCall = useCallback((url) => {\n    const newCallObject = DailyIframe.createCallObject({ \n      subscribeToTracksAutomatically: false, \n      userName: window.myInfo.name,    //one way I've tred to do itâ€”-is this correct?\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({ url, userName:window.myInfo.name });  //another way I've tried to do it--is this correct?\n    console.log('joining the call as ' + window.myInfo.name);  //this sometimes displays myInfo.name, sometimes not\n    // callObject.setUserName(myInfo.name);   //nope! ERROR: \"TypeError: Cannot read property 'setUserName' of null\"\n  }, []); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        // setMyInfo(null);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      // setMyInfo(null);\n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  \n    \n\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n\n          let participants = callObject.participants();\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n\n            const setSubs = () => {setSubscriptions(window.sessionState,window.myInfo,callObject)}\n                  \n            //temporarily commented out\n                  // if (e.data.isKnown==false)   //probably redundant. only use received sessionState if isKnown = true\n                  //     {return;}\n                  // else if (e.data.isKnown==true && typeof(stateRequest)!='undefined') {   //if state is known, stop asking for state\n                  //     clearInterval(stateRequest);\n                  // }\n      \n                  let priorSessionState = window.sessionState;\n                  window.sessionState=e.data;\n                  let needToSetSubs=false;\n                  setSubs();\n                \n                        //temporarily commented out\n      \n                  // change my role if it has been updated in sessionState\n                  if (window.sessionState.roleOf!=priorSessionState.roleOf) {\n                      let myNewRole = 'Attendee'; //default, if no role assigned\n                      for (const key in window.sessionState.roleOf) {\n                          if(window.sessionState.roleOf[key]==myName) {\n                              myNewRole = key;\n                          }\n                      }\n                      if (myNewRole!=myRole) {\n                          myRole = myNewRole;\n                          setNumber();\n                          if(window.sessionState.isActive){\n                              needToSetSubs=true;\n                              activateSession();  //rebuild UI for the newly assigned role, mid-session\n                          } \n                      }\n      \n                      //create or delete rooms according to assignments of Thirds\n      \n                      if (window.sessionState.roleOf.Room3A!='') {\n                          !$(\"#view-mode option[value=Room3\").length>0 && $(\"#view-mode\").append(\"<option value='Room3'>Room3</option>\");\n                        } else {\n                          $(\"#view-mode option[value=Room3\").remove();\n                        }\n      \n                      if (window.sessionState.roleOf.Room4A!='') {\n                          !$(\"#view-mode option[value=Room4\").length>0 && $(\"#view-mode\").append(\"<option value='Room4'>Room4</option>\");\n                        } else {\n                          $(\"#view-mode option[value=Room4\").remove();\n                        }\n      \n                      if (window.sessionState.roleOf.Room5A!='') {\n                          !$(\"#view-mode option[value=Room5\").length>0 && $(\"#view-mode\").append(\"<option value='Room5'>Room5</option>\");\n                        } else {\n                          $(\"#view-mode option[value=Room5\").remove();\n                        }\n                      \n      \n      \n                  }\n                  \n                  if (priorSessionState.isActive !== window.sessionState.isActive ||\n                      priorSessionState.AdminVisible!==window.sessionState.AdminVisible ) \n                      {\n                          needToSetSubs = true;\n                      }\n      \n                  //now, reset subscriptions if necessary\n                  if (needToSetSubs) {\n                      setSubscriptions();\n                  }\n                  \n                  //when session starts\n                  if (priorSessionState.isActive == false && window.sessionState.isActive == true) {\n                      activateSession();\n                  }\n                  //when session is paused\n                  else if (priorSessionState.isActive == true && window.sessionState.isActive == false) {\n                      pauseSession();\n                  }\n      \n          \n          } \n          //not used in this module, since there's no timer\n          \n          // if none of the above, just overlay the message\n          // else if (e.data.constructor !== Object) {    \n          //     overlayMessage(e.data,10000);\n          // }\n      \n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n  const enableStartButton = appState === STATE_IDLE;\n\n  return (\n    //  <SessionContext.Provider value={[sessionState,setSessionState]}>\n\n      /* <MyInfoContext.Provider value={[myInfo,setMyInfo]}> */\n\n\n    <div className=\"app\">\n    \n      {showCall ? (\n        // NOTE: for an app this size, it's not obvious that using a Context\n        // is the best choice. But for larger apps with deeply-nested components\n        // that want to access call object state and bind event listeners to the\n        // call object, this can be a helpful pattern.\n        <CallObjectContext.Provider value={callObject}>\n          <Call roomUrl={roomUrl} />\n          <Tray\n            disabled={!enableCallButtons}\n            onClickLeaveCall={startLeavingCall}\n          />\n        </CallObjectContext.Provider>\n      ) : (\n        <StartScreen\n          // disabled={!enableStartButton}\n          onClick={() => {\n            createCall().then((url) => startJoiningCall(url));\n          }}\n        />\n      )}\n    </div>\n    /* </MyInfoContext.Provider> */\n    // </SessionContext.Provider>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}