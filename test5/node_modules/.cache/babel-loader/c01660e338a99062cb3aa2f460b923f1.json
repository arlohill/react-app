{"ast":null,"code":"/*!\n * Mux Signing Keys\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base signing-key path for the Mux API\n * */\n\n\nconst PATH = '/video/v1/signing-keys';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nconst buildBasePath = keyId => `${PATH}/${keyId}`;\n/**\n * Signing Key Class - Provides access to the Mux Video Signing Key API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create a new signing key\n * Video.SigningKeys.create();\n */\n\n\nclass SigningKeys extends Base {\n  /**\n   * Creates a new Signing Key that can be used with the JWT module to sign URLs.\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new signing key\n   * Video.SigningKeys.create();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-url-signing-key\n   */\n  create() {\n    return this.http.post(PATH, {});\n  }\n  /**\n   * Get a signing key. *Note* The private key is _not_ returned.\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a signing key\n   * Video.SigningKeys.get(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-url-signing-key\n   */\n\n\n  get(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n\n    return this.http.get(buildBasePath(keyId));\n  }\n  /**\n   * Delete a signing key\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a signing key\n   * Video.SigningKeys.del(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-url-signing-key\n   */\n\n\n  del(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n\n    return this.http.delete(buildBasePath(keyId));\n  }\n  /**\n   * List signing keys\n   * @param {string} keyId - The ID for the signing key\n   * @param {object} params - Object to include as query params\n   * @param {number} params.limit - Number of signing keys to return in the response\n   * @param {number} params.page - Page of signing keys to return (limit * page)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all signing keys\n   * Video.SigningKeys.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-url-signing-keys\n   */\n\n\n  list(params = {}) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n\n}\n\nmodule.exports = SigningKeys;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/video/resources/signingKeys.js"],"names":["Base","require","PATH","buildBasePath","keyId","SigningKeys","create","http","post","get","Promise","reject","Error","del","delete","list","params","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,wBAAb;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGC,KAAK,IAAK,GAAEF,IAAK,IAAGE,KAAM,EAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAN,SAA0BL,IAA1B,CAA+B;AAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,IAAL,CAAUC,IAAV,CAAeN,IAAf,EAAqB,EAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,GAAG,CAACL,KAAD,EAAQ;AACT,QAAI,CAACA,KAAL,EAAY;AACV,aAAOM,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACD;;AACD,WAAO,KAAKL,IAAL,CAAUE,GAAV,CAAcN,aAAa,CAACC,KAAD,CAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,GAAG,CAACT,KAAD,EAAQ;AACT,QAAI,CAACA,KAAL,EAAY;AACV,aAAOM,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACD;;AACD,WAAO,KAAKL,IAAL,CAAUO,MAAV,CAAiBX,aAAa,CAACC,KAAD,CAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,IAAI,CAACC,MAAM,GAAG,EAAV,EAAc;AAChB,WAAO,KAAKT,IAAL,CAAUE,GAAV,CAAcP,IAAd,EAAoB;AAAEc,MAAAA;AAAF,KAApB,CAAP;AACD;;AA7E4B;;AAgF/BC,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["/*!\n * Mux Signing Keys\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base signing-key path for the Mux API\n * */\nconst PATH = '/video/v1/signing-keys';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = keyId => `${PATH}/${keyId}`;\n\n/**\n * Signing Key Class - Provides access to the Mux Video Signing Key API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create a new signing key\n * Video.SigningKeys.create();\n */\nclass SigningKeys extends Base {\n  /**\n   * Creates a new Signing Key that can be used with the JWT module to sign URLs.\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new signing key\n   * Video.SigningKeys.create();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-url-signing-key\n   */\n  create() {\n    return this.http.post(PATH, {});\n  }\n\n  /**\n   * Get a signing key. *Note* The private key is _not_ returned.\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a signing key\n   * Video.SigningKeys.get(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-url-signing-key\n   */\n  get(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.get(buildBasePath(keyId));\n  }\n\n  /**\n   * Delete a signing key\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a signing key\n   * Video.SigningKeys.del(keyId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-url-signing-key\n   */\n  del(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.delete(buildBasePath(keyId));\n  }\n\n  /**\n   * List signing keys\n   * @param {string} keyId - The ID for the signing key\n   * @param {object} params - Object to include as query params\n   * @param {number} params.limit - Number of signing keys to return in the response\n   * @param {number} params.page - Page of signing keys to return (limit * page)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all signing keys\n   * Video.SigningKeys.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-url-signing-keys\n   */\n  list(params = {}) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = SigningKeys;\n"]},"metadata":{},"sourceType":"script"}