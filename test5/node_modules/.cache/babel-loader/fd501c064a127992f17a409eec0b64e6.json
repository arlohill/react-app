{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/ParticipantsProvider.js\";\nimport React, { createContext, useCallback, useContext, useEffect, useReducer, useState, useMemo } from 'react';\nimport { useUIState, VIEW_MODE_SPEAKER } from '@custom/shared/contexts/UIStateProvider';\nimport PropTypes from 'prop-types';\nimport { VIDEO_QUALITY_AUTO, VIDEO_QUALITY_BANDWIDTH_SAVER, VIDEO_QUALITY_LOW, VIDEO_QUALITY_VERY_LOW } from '../constants';\nimport { sortByKey } from '../lib/sortByKey';\nimport { useCallState } from './CallProvider';\nimport { initialParticipantsState, isLocalId, ACTIVE_SPEAKER, PARTICIPANT_JOINED, PARTICIPANT_LEFT, PARTICIPANT_UPDATED, participantsReducer, SWAP_POSITION } from './participantsState';\nexport const ParticipantsContext = createContext();\nexport const ParticipantsProvider = ({\n  children\n}) => {\n  var _callObject$participa, _callObject$participa2, _callObject$participa3;\n\n  const {\n    callObject,\n    videoQuality,\n    networkState\n  } = useCallState();\n  const [state, dispatch] = useReducer(participantsReducer, initialParticipantsState);\n  const {\n    viewMode\n  } = useUIState();\n  const [participantMarkedForRemoval, setParticipantMarkedForRemoval] = useState(null);\n  /**\n   * ALL participants (incl. shared screens) in a convenient array\n   */\n\n  const allParticipants = useMemo(() => [...state.participants, ...state.screens], [state === null || state === void 0 ? void 0 : state.participants, state === null || state === void 0 ? void 0 : state.screens]);\n  /**\n   * Only return participants that should be visible in the call\n   */\n\n  const participants = useMemo(() => state.participants, [state.participants]);\n  /**\n   * Array of participant IDs\n   */\n\n  const participantIds = useMemo(() => participants.map(p => p.id).join(','), [participants]);\n  /**\n   * The number of participants, who are not a shared screen\n   * (technically a shared screen counts as a participant, but we shouldn't tell humans)\n   */\n\n  const participantCount = useMemo(() => participants.filter(({\n    isScreenshare\n  }) => !isScreenshare).length, [participants]);\n  /**\n   * The participant who most recently got mentioned via a `active-speaker-change` event\n   */\n\n  const activeParticipant = useMemo(() => participants.find(({\n    isActiveSpeaker\n  }) => isActiveSpeaker), [participants]);\n  /**\n   * The local participant\n   */\n\n  const localParticipant = useMemo(() => allParticipants.find(({\n    isLocal,\n    isScreenshare\n  }) => isLocal && !isScreenshare), [allParticipants]);\n  const isOwner = useMemo(() => !!(localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.isOwner), [localParticipant]);\n  /**\n   * The participant who should be rendered prominently right now\n   */\n\n  const currentSpeaker = useMemo(() => {\n    var _sorted$;\n\n    /**\n     * Ensure activeParticipant is still present in the call.\n     * The activeParticipant only updates to a new active participant so\n     * if everyone else is muted when AP leaves, the value will be stale.\n     */\n    const isPresent = participants.some(p => (p === null || p === void 0 ? void 0 : p.id) === (activeParticipant === null || activeParticipant === void 0 ? void 0 : activeParticipant.id));\n    const displayableParticipants = participants.filter(p => !(p === null || p === void 0 ? void 0 : p.isLocal));\n\n    if (!isPresent && displayableParticipants.length > 0 && displayableParticipants.every(p => p.isMicMuted && !p.lastActiveDate)) {\n      var _displayableParticipa;\n\n      // Return first cam on participant in case everybody is muted and nobody ever talked\n      // or first remote participant, in case everybody's cam is muted, too.\n      return (_displayableParticipa = displayableParticipants.find(p => !p.isCamMuted)) !== null && _displayableParticipa !== void 0 ? _displayableParticipa : displayableParticipants === null || displayableParticipants === void 0 ? void 0 : displayableParticipants[0];\n    }\n\n    const sorted = displayableParticipants.sort((a, b) => sortByKey(a, b, 'lastActiveDate')).reverse();\n    return isPresent ? activeParticipant : (_sorted$ = sorted === null || sorted === void 0 ? void 0 : sorted[0]) !== null && _sorted$ !== void 0 ? _sorted$ : localParticipant;\n  }, [activeParticipant, localParticipant, participants]);\n  /**\n   * Screen shares\n   */\n\n  const screens = useMemo(() => allParticipants.filter(({\n    isScreenshare\n  }) => isScreenshare), [allParticipants]);\n  /**\n   * The local participant's name\n   */\n\n  const username = (_callObject$participa = callObject === null || callObject === void 0 ? void 0 : (_callObject$participa2 = callObject.participants()) === null || _callObject$participa2 === void 0 ? void 0 : (_callObject$participa3 = _callObject$participa2.local) === null || _callObject$participa3 === void 0 ? void 0 : _callObject$participa3.user_name) !== null && _callObject$participa !== void 0 ? _callObject$participa : '';\n  const [muteNewParticipants, setMuteNewParticipants] = useState(false);\n  const muteAll = useCallback((muteFutureParticipants = false) => {\n    if (!localParticipant.isOwner) return;\n    setMuteNewParticipants(muteFutureParticipants);\n    const unmutedParticipants = participants.filter(p => !p.isLocal && !p.isMicMuted);\n    if (!unmutedParticipants.length) return;\n    const result = unmutedParticipants.reduce((o, p) => ({ ...o[p.id],\n      setAudio: false\n    }), {});\n    callObject.updateParticipants(result);\n  }, [callObject, localParticipant, participants]);\n  /**\n   * Sets the local participant's name in daily-js\n   * @param name The new username\n   */\n\n  const setUsername = name => {\n    callObject.setUserName(name);\n  };\n\n  const swapParticipantPosition = (id1, id2) => {\n    if (id1 === id2 || !id1 || !id2 || isLocalId(id1) || isLocalId(id2)) return;\n    dispatch({\n      type: SWAP_POSITION,\n      id1,\n      id2\n    });\n  };\n\n  const handleNewParticipantsState = useCallback((event = null) => {\n    switch (event === null || event === void 0 ? void 0 : event.action) {\n      case 'participant-joined':\n        dispatch({\n          type: PARTICIPANT_JOINED,\n          participant: event.participant\n        });\n        break;\n\n      case 'participant-updated':\n        dispatch({\n          type: PARTICIPANT_UPDATED,\n          participant: event.participant\n        });\n        break;\n\n      case 'participant-left':\n        dispatch({\n          type: PARTICIPANT_LEFT,\n          participant: event.participant\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [dispatch]);\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return false;\n    console.log('ðŸ‘¥ Participant provider events bound');\n    const events = ['joined-meeting', 'participant-joined', 'participant-updated', 'participant-left']; // Use initial state\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    events.forEach(event => callObject.on(event, handleNewParticipantsState)); // Stop listening for changes in state\n\n    return () => events.forEach(event => callObject.off(event, handleNewParticipantsState));\n  }, [callObject, handleNewParticipantsState]);\n  /**\n   * Change between the simulcast layers based on view / available bandwidth\n   */\n\n  const setBandWidthControls = useCallback(() => {\n    if (!(callObject && callObject.meetingState() === 'joined-meeting')) return;\n    const ids = participantIds.split(',');\n    const receiveSettings = {};\n    ids.forEach(id => {\n      if (isLocalId(id)) return;\n\n      if ( // weak or bad network\n      [VIDEO_QUALITY_LOW, VIDEO_QUALITY_VERY_LOW].includes(networkState) && videoQuality === VIDEO_QUALITY_AUTO || // Low quality or Bandwidth saver mode enabled\n      [VIDEO_QUALITY_BANDWIDTH_SAVER, VIDEO_QUALITY_LOW].includes(videoQuality)) {\n        receiveSettings[id] = {\n          video: {\n            layer: 0\n          }\n        };\n        return;\n      } // Speaker view settings based on speaker status or pinned user\n\n\n      if (viewMode === VIEW_MODE_SPEAKER) {\n        if ((currentSpeaker === null || currentSpeaker === void 0 ? void 0 : currentSpeaker.id) === id) {\n          receiveSettings[id] = {\n            video: {\n              layer: 2\n            }\n          };\n        } else {\n          receiveSettings[id] = {\n            video: {\n              layer: 0\n            }\n          };\n        }\n      } // Grid view settings are handled separately in GridView\n\n    });\n    callObject.updateReceiveSettings(receiveSettings);\n  }, [currentSpeaker === null || currentSpeaker === void 0 ? void 0 : currentSpeaker.id, callObject, networkState, participantIds, videoQuality, viewMode]);\n  useEffect(() => {\n    setBandWidthControls();\n  }, [setBandWidthControls]);\n  useEffect(() => {\n    if (!callObject) return false;\n\n    const handleActiveSpeakerChange = ({\n      activeSpeaker\n    }) => {\n      /**\n       * Ignore active-speaker-change events for the local user.\n       * Our UX doesn't ever highlight the local user as the active speaker.\n       */\n      const localId = callObject.participants().local.session_id;\n      if (localId === (activeSpeaker === null || activeSpeaker === void 0 ? void 0 : activeSpeaker.peerId)) return;\n      dispatch({\n        type: ACTIVE_SPEAKER,\n        id: activeSpeaker === null || activeSpeaker === void 0 ? void 0 : activeSpeaker.peerId\n      });\n    };\n\n    callObject.on('active-speaker-change', handleActiveSpeakerChange);\n    return () => callObject.off('active-speaker-change', handleActiveSpeakerChange);\n  }, [callObject]);\n  return /*#__PURE__*/React.createElement(ParticipantsContext.Provider, {\n    value: {\n      activeParticipant,\n      allParticipants,\n      currentSpeaker,\n      localParticipant,\n      participantCount,\n      participantMarkedForRemoval,\n      participants,\n      screens,\n      muteNewParticipants,\n      muteAll,\n      setParticipantMarkedForRemoval,\n      setUsername,\n      swapParticipantPosition,\n      username,\n      isOwner\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }\n  }, children);\n};\nParticipantsProvider.propTypes = {\n  children: PropTypes.node\n};\nexport const useParticipants = () => useContext(ParticipantsContext);","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/ParticipantsProvider.js"],"names":["React","createContext","useCallback","useContext","useEffect","useReducer","useState","useMemo","useUIState","VIEW_MODE_SPEAKER","PropTypes","VIDEO_QUALITY_AUTO","VIDEO_QUALITY_BANDWIDTH_SAVER","VIDEO_QUALITY_LOW","VIDEO_QUALITY_VERY_LOW","sortByKey","useCallState","initialParticipantsState","isLocalId","ACTIVE_SPEAKER","PARTICIPANT_JOINED","PARTICIPANT_LEFT","PARTICIPANT_UPDATED","participantsReducer","SWAP_POSITION","ParticipantsContext","ParticipantsProvider","children","callObject","videoQuality","networkState","state","dispatch","viewMode","participantMarkedForRemoval","setParticipantMarkedForRemoval","allParticipants","participants","screens","participantIds","map","p","id","join","participantCount","filter","isScreenshare","length","activeParticipant","find","isActiveSpeaker","localParticipant","isLocal","isOwner","currentSpeaker","isPresent","some","displayableParticipants","every","isMicMuted","lastActiveDate","isCamMuted","sorted","sort","a","b","reverse","username","local","user_name","muteNewParticipants","setMuteNewParticipants","muteAll","muteFutureParticipants","unmutedParticipants","result","reduce","o","setAudio","updateParticipants","setUsername","name","setUserName","swapParticipantPosition","id1","id2","type","handleNewParticipantsState","event","action","participant","console","log","events","forEach","on","off","setBandWidthControls","meetingState","ids","split","receiveSettings","includes","video","layer","updateReceiveSettings","handleActiveSpeakerChange","activeSpeaker","localId","session_id","peerId","propTypes","node","useParticipants"],"mappings":"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","sourcesContent":["import React, {\n    createContext,\n    useCallback,\n    useContext,\n    useEffect,\n    useReducer,\n    useState,\n    useMemo,\n  } from 'react';\n  import {\n    useUIState,\n    VIEW_MODE_SPEAKER,\n  } from '@custom/shared/contexts/UIStateProvider';\n  import PropTypes from 'prop-types';\n  \n  import {\n    VIDEO_QUALITY_AUTO,\n    VIDEO_QUALITY_BANDWIDTH_SAVER,\n    VIDEO_QUALITY_LOW,\n    VIDEO_QUALITY_VERY_LOW,\n  } from '../constants';\n  import { sortByKey } from '../lib/sortByKey';\n  \n  import { useCallState } from './CallProvider';\n  \n  import {\n    initialParticipantsState,\n    isLocalId,\n    ACTIVE_SPEAKER,\n    PARTICIPANT_JOINED,\n    PARTICIPANT_LEFT,\n    PARTICIPANT_UPDATED,\n    participantsReducer,\n    SWAP_POSITION,\n  } from './participantsState';\n  \n  export const ParticipantsContext = createContext();\n  \n  export const ParticipantsProvider = ({ children }) => {\n    const { callObject, videoQuality, networkState } = useCallState();\n    const [state, dispatch] = useReducer(\n      participantsReducer,\n      initialParticipantsState\n    );\n    const { viewMode } = useUIState();\n    const [participantMarkedForRemoval, setParticipantMarkedForRemoval] =\n      useState(null);\n  \n    /**\n     * ALL participants (incl. shared screens) in a convenient array\n     */\n    const allParticipants = useMemo(\n      () => [...state.participants, ...state.screens],\n      [state?.participants, state?.screens]\n    );\n  \n    /**\n     * Only return participants that should be visible in the call\n     */\n    const participants = useMemo(() => state.participants, [state.participants]);\n  \n    /**\n     * Array of participant IDs\n     */\n    const participantIds = useMemo(\n      () => participants.map((p) => p.id).join(','),\n      [participants]\n    );\n  \n    /**\n     * The number of participants, who are not a shared screen\n     * (technically a shared screen counts as a participant, but we shouldn't tell humans)\n     */\n    const participantCount = useMemo(\n      () => participants.filter(({ isScreenshare }) => !isScreenshare).length,\n      [participants]\n    );\n  \n    /**\n     * The participant who most recently got mentioned via a `active-speaker-change` event\n     */\n    const activeParticipant = useMemo(\n      () => participants.find(({ isActiveSpeaker }) => isActiveSpeaker),\n      [participants]\n    );\n  \n    /**\n     * The local participant\n     */\n    const localParticipant = useMemo(\n      () =>\n        allParticipants.find(\n          ({ isLocal, isScreenshare }) => isLocal && !isScreenshare\n        ),\n      [allParticipants]\n    );\n  \n    const isOwner = useMemo(\n      () => !!localParticipant?.isOwner,\n      [localParticipant]\n    );\n  \n    /**\n     * The participant who should be rendered prominently right now\n     */\n    const currentSpeaker = useMemo(() => {\n      /**\n       * Ensure activeParticipant is still present in the call.\n       * The activeParticipant only updates to a new active participant so\n       * if everyone else is muted when AP leaves, the value will be stale.\n       */\n      const isPresent = participants.some((p) => p?.id === activeParticipant?.id);\n  \n      const displayableParticipants = participants.filter((p) => !p?.isLocal);\n  \n      if (\n        !isPresent &&\n        displayableParticipants.length > 0 &&\n        displayableParticipants.every((p) => p.isMicMuted && !p.lastActiveDate)\n      ) {\n        // Return first cam on participant in case everybody is muted and nobody ever talked\n        // or first remote participant, in case everybody's cam is muted, too.\n        return (\n          displayableParticipants.find((p) => !p.isCamMuted) ??\n          displayableParticipants?.[0]\n        );\n      }\n  \n      const sorted = displayableParticipants\n        .sort((a, b) => sortByKey(a, b, 'lastActiveDate'))\n        .reverse();\n  \n      return isPresent ? activeParticipant : sorted?.[0] ?? localParticipant;\n    }, [activeParticipant, localParticipant, participants]);\n  \n    /**\n     * Screen shares\n     */\n    const screens = useMemo(\n      () => allParticipants.filter(({ isScreenshare }) => isScreenshare),\n      [allParticipants]\n    );\n  \n    /**\n     * The local participant's name\n     */\n    const username = callObject?.participants()?.local?.user_name ?? '';\n  \n    const [muteNewParticipants, setMuteNewParticipants] = useState(false);\n  \n    const muteAll = useCallback(\n      (muteFutureParticipants = false) => {\n        if (!localParticipant.isOwner) return;\n        setMuteNewParticipants(muteFutureParticipants);\n        const unmutedParticipants = participants.filter(\n          (p) => !p.isLocal && !p.isMicMuted\n        );\n        if (!unmutedParticipants.length) return;\n        const result = unmutedParticipants.reduce(\n          (o, p) => ({ ...o[p.id], setAudio: false }),\n          {}\n        );\n        callObject.updateParticipants(result);\n      },\n      [callObject, localParticipant, participants]\n    );\n  \n    /**\n     * Sets the local participant's name in daily-js\n     * @param name The new username\n     */\n    const setUsername = (name) => {\n      callObject.setUserName(name);\n    };\n  \n    const swapParticipantPosition = (id1, id2) => {\n      if (id1 === id2 || !id1 || !id2 || isLocalId(id1) || isLocalId(id2)) return;\n      dispatch({\n        type: SWAP_POSITION,\n        id1,\n        id2,\n      });\n    };\n  \n    const handleNewParticipantsState = useCallback(\n      (event = null) => {\n        switch (event?.action) {\n          case 'participant-joined':\n            dispatch({\n              type: PARTICIPANT_JOINED,\n              participant: event.participant,\n            });\n            break;\n          case 'participant-updated':\n            dispatch({\n              type: PARTICIPANT_UPDATED,\n              participant: event.participant,\n            });\n            break;\n          case 'participant-left':\n            dispatch({\n              type: PARTICIPANT_LEFT,\n              participant: event.participant,\n            });\n            break;\n          default:\n            break;\n        }\n      },\n      [dispatch]\n    );\n  \n    /**\n     * Start listening for participant changes, when the callObject is set.\n     */\n    useEffect(() => {\n      if (!callObject) return false;\n  \n      console.log('ðŸ‘¥ Participant provider events bound');\n  \n      const events = [\n        'joined-meeting',\n        'participant-joined',\n        'participant-updated',\n        'participant-left',\n      ];\n  \n      // Use initial state\n      handleNewParticipantsState();\n  \n      // Listen for changes in state\n      events.forEach((event) => callObject.on(event, handleNewParticipantsState));\n  \n      // Stop listening for changes in state\n      return () =>\n        events.forEach((event) =>\n          callObject.off(event, handleNewParticipantsState)\n        );\n    }, [callObject, handleNewParticipantsState]);\n  \n    /**\n     * Change between the simulcast layers based on view / available bandwidth\n     */\n    const setBandWidthControls = useCallback(() => {\n      if (!(callObject && callObject.meetingState() === 'joined-meeting')) return;\n  \n      const ids = participantIds.split(',');\n      const receiveSettings = {};\n  \n      ids.forEach((id) => {\n        if (isLocalId(id)) return;\n  \n        if (\n          // weak or bad network\n          ([VIDEO_QUALITY_LOW, VIDEO_QUALITY_VERY_LOW].includes(networkState) &&\n            videoQuality === VIDEO_QUALITY_AUTO) ||\n          // Low quality or Bandwidth saver mode enabled\n          [VIDEO_QUALITY_BANDWIDTH_SAVER, VIDEO_QUALITY_LOW].includes(\n            videoQuality\n          )\n        ) {\n          receiveSettings[id] = { video: { layer: 0 } };\n          return;\n        }\n  \n        // Speaker view settings based on speaker status or pinned user\n        if (viewMode === VIEW_MODE_SPEAKER) {\n          if (currentSpeaker?.id === id) {\n            receiveSettings[id] = { video: { layer: 2 } };\n          } else {\n            receiveSettings[id] = { video: { layer: 0 } };\n          }\n        }\n  \n        // Grid view settings are handled separately in GridView\n      });\n      callObject.updateReceiveSettings(receiveSettings);\n    }, [\n      currentSpeaker?.id,\n      callObject,\n      networkState,\n      participantIds,\n      videoQuality,\n      viewMode,\n    ]);\n  \n    useEffect(() => {\n      setBandWidthControls();\n    }, [setBandWidthControls]);\n  \n    useEffect(() => {\n      if (!callObject) return false;\n      const handleActiveSpeakerChange = ({ activeSpeaker }) => {\n        /**\n         * Ignore active-speaker-change events for the local user.\n         * Our UX doesn't ever highlight the local user as the active speaker.\n         */\n        const localId = callObject.participants().local.session_id;\n        if (localId === activeSpeaker?.peerId) return;\n  \n        dispatch({\n          type: ACTIVE_SPEAKER,\n          id: activeSpeaker?.peerId,\n        });\n      };\n      callObject.on('active-speaker-change', handleActiveSpeakerChange);\n      return () =>\n        callObject.off('active-speaker-change', handleActiveSpeakerChange);\n    }, [callObject]);\n  \n    return (\n      <ParticipantsContext.Provider\n        value={{\n          activeParticipant,\n          allParticipants,\n          currentSpeaker,\n          localParticipant,\n          participantCount,\n          participantMarkedForRemoval,\n          participants,\n          screens,\n          muteNewParticipants,\n          muteAll,\n          setParticipantMarkedForRemoval,\n          setUsername,\n          swapParticipantPosition,\n          username,\n          isOwner,\n        }}\n      >\n        {children}\n      </ParticipantsContext.Provider>\n    );\n  };\n  \n  ParticipantsProvider.propTypes = {\n    children: PropTypes.node,\n  };\n  \n  export const useParticipants = () => useContext(ParticipantsContext);"]},"metadata":{},"sourceType":"module"}