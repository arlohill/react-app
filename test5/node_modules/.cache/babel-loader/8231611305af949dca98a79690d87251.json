{"ast":null,"code":"/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base asset path for the Mux API\n * */\n\n\nconst PATH = '/video/v1/assets';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nconst buildBasePath = assetId => `${PATH}/${assetId}`;\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\n\n\nclass Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(new Error('Params are required for creating an asset'));\n    }\n\n    return this.http.post(PATH, params);\n  }\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset\n   */\n\n\n  del(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to delete an asset'));\n    }\n\n    return this.http.delete(buildBasePath(assetId));\n  }\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset\n   */\n\n\n  get(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to get an asset'));\n    }\n\n    return this.http.get(buildBasePath(assetId));\n  }\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info\n   */\n\n\n  inputInfo(assetId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required to get input-info'));\n    }\n\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-assets\n   */\n\n\n  list(params) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n\n\n  playbackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n\n    return this.http.get(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);\n  }\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id\n   */\n\n\n  createPlaybackId(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id\n   */\n\n\n  deletePlaybackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n\n    return this.http.delete(`${buildBasePath(assetId)}/playback-ids/${playbackId}`);\n  }\n  /**\n   * Create a subtitle text track\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - subtitle text track JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset text track\n   * Video.Assets.createTrack(assetId, {\n   *   url: \"https://example.com/myVIdeo_en.srt\",\n   *   type: \"text\",\n   *   text_type: \"subtitles\",\n   *   language_code: \"en-US\",\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-track\n   */\n\n\n  createTrack(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Text track params are required'));\n    }\n\n    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);\n  }\n  /**\n   * Delete an asset text track\n   * @param {string} assetId - The ID for the asset\n   * @param {string} trackId - The ID for the asset text track to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset text track\n   * Video.Assets.deleteTrack(assetId, trackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track\n   */\n\n\n  deleteTrack(assetId, trackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!trackId) {\n      return Promise.reject(new Error('A track ID is required'));\n    }\n\n    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);\n  }\n  /**\n   * Update mp4 support for an asset\n   * @param {Object} params - mp4 support JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Updates mp4 support for an asset\n   * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support\n   */\n\n\n  updateMp4Support(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.mp4_support)) {\n      return Promise.reject(new Error('params.mp4_support is required'));\n    }\n\n    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);\n  }\n  /**\n   * Update master access for an asset\n   * @param {Object} params - master access JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Update master access for an asset\n   * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access\n   */\n\n\n  updateMasterAccess(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.master_access)) {\n      return Promise.reject(new Error('params.master_access is required'));\n    }\n\n    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);\n  }\n\n}\n\nmodule.exports = Assets;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/video/resources/assets.js"],"names":["Base","require","PATH","buildBasePath","assetId","Assets","create","params","Promise","reject","Error","http","post","del","delete","get","inputInfo","list","playbackId","createPlaybackId","deletePlaybackId","createTrack","deleteTrack","trackId","updateMp4Support","mp4_support","put","updateMasterAccess","master_access","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/assets';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = assetId => `${PATH}/${assetId}`;\n\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\nclass Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating an asset')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see hhttps://docs.mux.com/api-reference/video#operation/delete-asset\n   */\n  del(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to delete an asset')\n      );\n    }\n    return this.http.delete(buildBasePath(assetId));\n  }\n\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset\n   */\n  get(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(assetId));\n  }\n\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-input-info\n   */\n  inputInfo(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get input-info')\n      );\n    }\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/list-assets\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/get-asset-playback-id\n   */\n  playbackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-playback-id\n   */\n  createPlaybackId(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-playback-id\n   */\n  deletePlaybackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.delete(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a subtitle text track\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - subtitle text track JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset text track\n   * Video.Assets.createTrack(assetId, {\n   *   url: \"https://example.com/myVIdeo_en.srt\",\n   *   type: \"text\",\n   *   text_type: \"subtitles\",\n   *   language_code: \"en-US\",\n   * });\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/create-asset-track\n   */\n  createTrack(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Text track params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);\n  }\n\n  /**\n   * Delete an asset text track\n   * @param {string} assetId - The ID for the asset\n   * @param {string} trackId - The ID for the asset text track to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset text track\n   * Video.Assets.deleteTrack(assetId, trackId);\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/delete-asset-track\n   */\n  deleteTrack(assetId, trackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!trackId) {\n      return Promise.reject(new Error('A track ID is required'));\n    }\n    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);\n  }\n\n  /**\n   * Update mp4 support for an asset\n   * @param {Object} params - mp4 support JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Updates mp4 support for an asset\n   * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-mp4-support\n   */\n  updateMp4Support(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.mp4_support)) {\n      return Promise.reject(new Error('params.mp4_support is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);\n  }\n\n  /**\n   * Update master access for an asset\n   * @param {Object} params - master access JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Update master access for an asset\n   * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n   *\n   * @see https://docs.mux.com/api-reference/video#operation/update-asset-master-access\n   */\n  updateMasterAccess(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.master_access)) {\n      return Promise.reject(new Error('params.master_access is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);\n  }\n}\n\nmodule.exports = Assets;\n"]},"metadata":{},"sourceType":"script"}