{"ast":null,"code":"/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base metrics path for the Mux API\n * */\n\n\nconst PATH = '/data/v1/metrics';\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\n\nclass Metrics extends Base {\n  /**\n   * List the breakdown values for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} params - example: {group_by: 'browser'}\n   * NOTE: the group_by query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List all of the values across every breakdown for a specific metric grouped by browser\n   * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-breakdown-values\n   */\n  breakdown(metricId, params) {\n    return this.http.get(`${PATH}/${metricId}/breakdown`, {\n      params\n    });\n  }\n  /**\n   * List all of the values across every breakdown for a specific metric\n   *\n   * @param {Object} params - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown values for a specific metric within the last 24 hours\n   * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n   * Note: the value query parameter is required\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-all-metric-values\n   */\n\n\n  comparison(params) {\n    if (!params || params && !params.value) {\n      throw new Error('The value query parameter is required for comparing metrics');\n    }\n\n    return this.http.get(`${PATH}/comparison`, {\n      params\n    });\n  }\n  /**\n   * Returns a list of insights for a metric. These are the worst performing values across all\n   * breakdowns sorted by how much they negatively impact a specific metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} [params] - example { measurement: 'median', order_direction: 'desc' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get a list of insights for a metric measured by median and ordered descending\n   * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-insights\n   */\n\n\n  insights(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for insight metrics.');\n    }\n\n    return this.http.get(`${PATH}/${metricId}/insights`, {\n      params\n    });\n  }\n  /**\n   * Returns the overall value for a specific metric, as well as the total view count,\n   * watch time, and the Mux Global metric value for the metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get the overall value for a specific metric within the past 7 days\n   * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-overall-values\n   */\n\n\n  overall(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for overall metrics.');\n    }\n\n    return this.http.get(`${PATH}/${metricId}/overall`, {\n      params\n    });\n  }\n  /**\n   * Returns timeseries data for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get timeseries data for a specific metric within the past 7 days\n   * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-metric-timeseries-data\n   */\n\n\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for timeseries metrics.');\n    }\n\n    return this.http.get(`${PATH}/${metricId}/timeseries`, {\n      params\n    });\n  }\n\n}\n\nmodule.exports = Metrics;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/@mux/mux-node/src/data/resources/metrics.js"],"names":["Base","require","PATH","Metrics","breakdown","metricId","params","http","get","comparison","value","Error","insights","overall","timeseries","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,kBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBH,IAAtB,CAA2B;AACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,SAAS,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC1B,WAAO,KAAKC,IAAL,CAAUC,GAAV,CAAe,GAAEN,IAAK,IAAGG,QAAS,YAAlC,EAA+C;AAAEC,MAAAA;AAAF,KAA/C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,UAAU,CAACH,MAAD,EAAS;AACjB,QAAI,CAACA,MAAD,IAAYA,MAAM,IAAI,CAACA,MAAM,CAACI,KAAlC,EAA0C;AACxC,YAAM,IAAIC,KAAJ,CACJ,6DADI,CAAN;AAGD;;AACD,WAAO,KAAKJ,IAAL,CAAUC,GAAV,CAAe,GAAEN,IAAK,aAAtB,EAAoC;AAAEI,MAAAA;AAAF,KAApC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,QAAQ,CAACP,QAAD,EAAWC,MAAX,EAAmB;AACzB,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIM,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,WAAO,KAAKJ,IAAL,CAAUC,GAAV,CAAe,GAAEN,IAAK,IAAGG,QAAS,WAAlC,EAA8C;AAAEC,MAAAA;AAAF,KAA9C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,OAAO,CAACR,QAAD,EAAWC,MAAX,EAAmB;AACxB,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIM,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,WAAO,KAAKJ,IAAL,CAAUC,GAAV,CAAe,GAAEN,IAAK,IAAGG,QAAS,UAAlC,EAA6C;AAAEC,MAAAA;AAAF,KAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEQ,EAAAA,UAAU,CAACT,QAAD,EAAWC,MAAX,EAAmB;AAC3B,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIM,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,WAAO,KAAKJ,IAAL,CAAUC,GAAV,CAAe,GAAEN,IAAK,IAAGG,QAAS,aAAlC,EAAgD;AAAEC,MAAAA;AAAF,KAAhD,CAAP;AACD;;AApHwB;;AAuH3BS,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base metrics path for the Mux API\n * */\nconst PATH = '/data/v1/metrics';\n\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\nclass Metrics extends Base {\n  /**\n   * List the breakdown values for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} params - example: {group_by: 'browser'}\n   * NOTE: the group_by query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List all of the values across every breakdown for a specific metric grouped by browser\n   * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-breakdown-values\n   */\n  breakdown(metricId, params) {\n    return this.http.get(`${PATH}/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List all of the values across every breakdown for a specific metric\n   *\n   * @param {Object} params - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown values for a specific metric within the last 24 hours\n   * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n   * Note: the value query parameter is required\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-all-metric-values\n   */\n  comparison(params) {\n    if (!params || (params && !params.value)) {\n      throw new Error(\n        'The value query parameter is required for comparing metrics'\n      );\n    }\n    return this.http.get(`${PATH}/comparison`, { params });\n  }\n\n  /**\n   * Returns a list of insights for a metric. These are the worst performing values across all\n   * breakdowns sorted by how much they negatively impact a specific metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} [params] - example { measurement: 'median', order_direction: 'desc' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get a list of insights for a metric measured by median and ordered descending\n   * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-insights\n   */\n  insights(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for insight metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/insights`, { params });\n  }\n\n  /**\n   * Returns the overall value for a specific metric, as well as the total view count,\n   * watch time, and the Mux Global metric value for the metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get the overall value for a specific metric within the past 7 days\n   * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-overall-values\n   */\n  overall(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for overall metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/overall`, { params });\n  }\n\n  /**\n   * Returns timeseries data for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get timeseries data for a specific metric within the past 7 days\n   * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-metric-timeseries-data\n   */\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for timeseries metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/timeseries`, { params });\n  }\n}\n\nmodule.exports = Metrics;\n"]},"metadata":{},"sourceType":"script"}