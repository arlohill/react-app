{"ast":null,"code":"/*!\n * Mux Real-Time\n * Copyright(c) 2020 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base real-time path for the Mux API\n * */\n\n\nconst PATH = '/data/v1/realtime';\n/**\n * Real-Time Class - Provides access to the Mux Data Real-Time API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available real-time dimensions\n * Data.RealTime.dimensions();\n */\n\nclass RealTime extends Base {\n  /**\n   * List of available real-time dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time dimensions\n   * Data.RealTime.dimensions();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-dimensions\n   */\n  dimensions() {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n  /**\n   * List available real-time metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time metrics\n   * Data.RealTime.metrics();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-metrics\n   */\n\n\n  metrics() {\n    return this.http.get(`${PATH}/metrics`);\n  }\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-breakdown\n   */\n\n\n  breakdown(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for real-time breakdown information');\n    }\n\n    if (!params || params && !params.dimension) {\n      throw new Error('The dimension query parameter is required for real-time breakdown information');\n    }\n\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, {\n      params\n    });\n  }\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-histogram-timeseries\n   */\n\n\n  histogramTimeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for real-time histogram timeseries information');\n    }\n\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params\n    });\n  }\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-timeseries\n   */\n\n\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for real-time timeseries information.');\n    }\n\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params\n    });\n  }\n\n}\n\nmodule.exports = RealTime;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/data/resources/real_time.js"],"names":["Base","require","PATH","RealTime","dimensions","http","get","metrics","breakdown","metricId","params","Error","dimension","histogramTimeseries","timeseries","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,mBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBH,IAAvB,CAA4B;AAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKC,IAAL,CAAUC,GAAV,CAAe,GAAEJ,IAAK,aAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKF,IAAL,CAAUC,GAAV,CAAe,GAAEJ,IAAK,UAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,SAAS,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC1B,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,KAAJ,CACJ,6DADI,CAAN;AAGD;;AAED,QAAI,CAACD,MAAD,IAAYA,MAAM,IAAI,CAACA,MAAM,CAACE,SAAlC,EAA8C;AAC5C,YAAM,IAAID,KAAJ,CACJ,+EADI,CAAN;AAGD;;AACD,WAAO,KAAKN,IAAL,CAAUC,GAAV,CAAe,GAAEJ,IAAK,YAAWO,QAAS,YAA1C,EAAuD;AAAEC,MAAAA;AAAF,KAAvD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,mBAAmB,CAACJ,QAAD,EAAWC,MAAX,EAAmB;AACpC,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,KAAJ,CACJ,wEADI,CAAN;AAGD;;AACD,WAAO,KAAKN,IAAL,CAAUC,GAAV,CAAe,GAAEJ,IAAK,YAAWO,QAAS,uBAA1C,EAAkE;AACvEC,MAAAA;AADuE,KAAlE,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,UAAU,CAACL,QAAD,EAAWC,MAAX,EAAmB;AAC3B,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,WAAO,KAAKN,IAAL,CAAUC,GAAV,CAAe,GAAEJ,IAAK,YAAWO,QAAS,aAA1C,EAAwD;AAC7DC,MAAAA;AAD6D,KAAxD,CAAP;AAGD;;AAxHyB;;AA0H5BK,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/*!\n * Mux Real-Time\n * Copyright(c) 2020 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base real-time path for the Mux API\n * */\nconst PATH = '/data/v1/realtime';\n\n/**\n * Real-Time Class - Provides access to the Mux Data Real-Time API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available real-time dimensions\n * Data.RealTime.dimensions();\n */\nclass RealTime extends Base {\n  /**\n   * List of available real-time dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time dimensions\n   * Data.RealTime.dimensions();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-dimensions\n   */\n  dimensions() {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n\n  /**\n   * List available real-time metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time metrics\n   * Data.RealTime.metrics();\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-realtime-metrics\n   */\n  metrics() {\n    return this.http.get(`${PATH}/metrics`);\n  }\n\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-breakdown\n   */\n  breakdown(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time breakdown information'\n      );\n    }\n\n    if (!params || (params && !params.dimension)) {\n      throw new Error(\n        'The dimension query parameter is required for real-time breakdown information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-histogram-timeseries\n   */\n  histogramTimeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time histogram timeseries information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params,\n    });\n  }\n\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-realtime-timeseries\n   */\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time timeseries information.'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params,\n    });\n  }\n}\nmodule.exports = RealTime;\n"]},"metadata":{},"sourceType":"script"}