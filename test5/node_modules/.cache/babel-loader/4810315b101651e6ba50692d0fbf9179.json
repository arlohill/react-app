{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Livestorm/AppLivestorm/AppLivestorm.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../../apiLivestorm';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../../urlUtils';\nimport Daily from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../../logUtils';\nimport audioPlayer from '../../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n    type: 'sessionState',\n    isKnown: false,\n    isActive: false,\n    AdminVisible: false,\n    hasAnUpdate: false,\n    roleOf: {\n      Buyer1: '',\n      Buyer2: '',\n      Buyer3: '',\n      Buyer4: '',\n      Seller: '',\n      Shadow1: '',\n      Shadow2: '',\n      Shadow3: '',\n      Shadow4: '',\n      Shadow5: '',\n      Shadow6: ''\n    },\n    chatHistory: []\n  });\n  const [myState, setMyState] = useState({\n    name: 'Username',\n    role: window.myRole,\n    sidebar: true,\n    amAdmin: true,\n    //LIVESTORM PILOT CHANGE: setting all users to admin — to undo, change to: window.amAdmin\n    userList: {\n      names: [],\n      sessionIdFor: {}\n    },\n    adminPresent: false,\n    viewMode: null,\n    audioIsPlaying: false,\n    camOnAtSessionStart: null,\n    micOnAtSessionStart: null,\n    number: null\n  });\n\n  const setName = newName => {\n    setMyState(prev => ({ ...prev,\n      name: newName\n    }));\n  };\n\n  const setSidebar = boolean => {\n    setMyState(prev => ({ ...prev,\n      sidebar: boolean\n    }));\n  };\n\n  const setViewMode = newViewMode => {\n    setMyState(prev => ({ ...prev,\n      viewMode: newViewMode\n    }));\n  };\n\n  const setRole = newRole => {\n    setMyState(prev => ({ ...prev,\n      role: newRole\n    }));\n  };\n\n  const setUserList = newUserList => {\n    setMyState(prev => ({ ...prev,\n      userList: newUserList\n    }));\n  };\n\n  const setAmAdmin = boolean => {\n    setMyState(prev => ({ ...prev,\n      amAdmin: boolean\n    }));\n  };\n\n  const setAdminPresent = boolean => {\n    setMyState(prev => ({ ...prev,\n      adminPresent: boolean\n    }));\n  };\n\n  const setMicOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      micOnAtSessionStart: boolean\n    }));\n  };\n\n  const setCamOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      camOnAtSessionStart: boolean\n    }));\n  };\n\n  const setNumber = newNum => {\n    setMyState(prev => ({ ...prev,\n      number: newNum\n    }));\n  }; //check password\n  // if (!window.pass.includes(window.myP)) {\n  //   //redirect if password is wrong\n  //   window.location.href = \"http://secondbody.co\"\n  // }\n\n  /**\n   * Creates a new call room.\n   */\n\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    const join = async () => {\n      const newCallObject = Daily.createCallObject({\n        subscribeToTracksAutomatically: false,\n        url: url\n      });\n      setRoomUrl(url);\n      setCallObject(newCallObject);\n      setAppState(STATE_JOINING);\n      await newCallObject.startCamera();\n      await newCallObject.setUserName(myState.name);\n\n      if (window.initialInputs) {\n        console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n        newCallObject.join({\n          audioSource: window.initialInputs[0],\n          videoSource: window.initialInputs[1],\n          token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzcyI6dHJ1ZSwibyI6dHJ1ZSwiciI6IkxpdmVzdG9ybSIsImQiOiJlMjU1MmE0Yy02OGM4LTRlYmEtYTYyMS1mZThjZTk4ODA5ZTciLCJpYXQiOjE2MzU0NzEwNzV9.h6xMg3Nm48eYOX0c7ADu3vZCf4VtlIAY03RjlDadcrg\"\n        });\n      } else {\n        navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: true\n        }).then(mediaStream => {\n          if (mediaStream) {\n            let localAudio = mediaStream.getAudioTracks();\n            let localVideo = mediaStream.getVideoTracks();\n\n            if (localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0) {\n              newCallObject.join({\n                audioSource: localAudio[0],\n                videoSource: localVideo[0]\n              });\n            }\n          } else {//message e.g. you need a mic to join\n          }\n        });\n      }\n\n      console.log('joining the call as ' + myState.name);\n      const pageUrl = pageUrlFromRoomUrl(roomUrl) + '&N=' + myState.name + '&R=' + myState.role;\n    };\n\n    join();\n  }, [myState.name]);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording(); // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  // useEffect(() => {\n  //   const url = roomUrlFromPageUrl();\n  //   url && window.initialInputs && startJoiningCall(url);\n  // }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl = pageUrl; // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n    //append role to URL — LIVESTORM PILOT CHANGE: TOOK THIS OUT\n    // if (myState.role) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&R=' + window.myRole;\n    //   }else{\n    //     pageUrl += '?R=' + window.myRole;\n    //   }\n    // }\n\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&P=' + window.myP;\n      } else {\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]);\n  /**\n  * Attach myState object to window for debugging purposes.\n  */\n\n  useEffect(() => {\n    window.myState = myState;\n  }, [myState]);\n  /**\n  * Attach userList to window for debugging\n  */\n\n  useEffect(() => {\n    window.userList = myState.userList;\n  }, [myState.userList]);\n  /**\n    * Attach sessionState to window for debugging\n    */\n\n  useEffect(() => {\n    window.sessionState = sessionState;\n  }, [sessionState]);\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    window.record = () => {\n      callObject.startRecording();\n    };\n\n    window.stop = () => {\n      callObject.stopRecording();\n    };\n  }, [appState]); //Ask for State when Admin becomes present and State is not known\n\n  useEffect(() => {\n    let stateRequest;\n\n    if (!callObject) {\n      return;\n    }\n\n    if (!sessionState.isKnown && myState.adminPresent) {\n      stateRequest = setInterval(getState, 1000);\n\n      function getState() {\n        if (sessionState.isKnown) {\n          clearInterval(stateRequest);\n          return;\n        }\n\n        callObject.sendAppMessage(\"State please?\", '*');\n        console.log('Requesting meeting state...');\n      }\n    } //cleanup before useEffect runs the next time\n\n\n    return function cleanup() {\n      stateRequest && clearInterval(stateRequest);\n    };\n  }, [sessionState.isKnown, myState.adminPresent]);\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          }); // window.userList.push(window.myName);\n\n          console.log('*****JOINED MEETING'); // if(myState.name==\"\"){callObject.leave();}\n\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          let newSessionState = e.data;\n          newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n\n          setSessionState(newSessionState);\n        } //TODO AUDIO TEST\n        else if (e.data.constructor === Object && e.data.type == \"instructions\" && e.data.recipient == callObject.participants().local.session_id) {\n            audioPlayer(e.data.target, e.data.action);\n          } else if (e.data == \"State please?\") {\n            console.log('*******Received state request');\n\n            if (myState.amAdmin && sessionState.isKnown) {\n              console.log(\"Sending current state...\");\n              callObject.sendAppMessage(sessionState, '*');\n            }\n          }\n      }\n    } //end handleAppMessage\n\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, sessionState]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SessionStateContext.Provider, {\n    value: {\n      session: [sessionState, setSessionState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      myStateArray: [myState, setMyState],\n      setName: setName,\n      setRole: setRole,\n      setSidebar: setSidebar,\n      setUserList: setUserList,\n      setViewMode: setViewMode,\n      setCamOnAtSessionStart: setCamOnAtSessionStart,\n      setMicOnAtSessionStart: setMicOnAtSessionStart,\n      setAdminPresent: setAdminPresent,\n      setAmAdmin: setAmAdmin,\n      setNumber: setNumber\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 9\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }), myState.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 18\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 10\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Livestorm/AppLivestorm/AppLivestorm.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionStateContext","MyContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","Daily","logDailyEvent","audioPlayer","AdminPanel","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","AppLivestorm","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","sessionState","setSessionState","type","isKnown","isActive","AdminVisible","hasAnUpdate","roleOf","Buyer1","Buyer2","Buyer3","Buyer4","Seller","Shadow1","Shadow2","Shadow3","Shadow4","Shadow5","Shadow6","chatHistory","myState","setMyState","name","role","window","myRole","sidebar","amAdmin","userList","names","sessionIdFor","adminPresent","viewMode","audioIsPlaying","camOnAtSessionStart","micOnAtSessionStart","number","setName","newName","prev","setSidebar","boolean","setViewMode","newViewMode","setRole","newRole","setUserList","newUserList","setAmAdmin","setAdminPresent","setMicOnAtSessionStart","setCamOnAtSessionStart","setNumber","newNum","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","join","newCallObject","createCallObject","subscribeToTracksAutomatically","startCamera","setUserName","initialInputs","audioSource","videoSource","token","navigator","mediaDevices","getUserMedia","audio","video","mediaStream","localAudio","getAudioTracks","localVideo","getVideoTracks","length","pageUrl","startLeavingCall","stopRecording","destroy","initialize","leave","myP","indexOf","location","href","history","replaceState","record","startRecording","stop","stateRequest","setInterval","getState","clearInterval","sendAppMessage","cleanup","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","on","off","handleAppMessage","e","fromId","data","constructor","Object","newSessionState","recipient","participants","local","session_id","target","action","showCall","includes","session","myStateArray"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../../apiLivestorm';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext'\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../../urlUtils';\n\n\nimport Daily from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../../logUtils';\nimport audioPlayer from '../../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\n\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\n\n\n\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n                                                    type: 'sessionState',\n                                                    isKnown:false,\n                                                    isActive:false,\n                                                    AdminVisible:false,\n                                                    hasAnUpdate: false,\n                                                    roleOf: {\n                                                              Buyer1: '',\n                                                              Buyer2: '',\n                                                              Buyer3: '',\n                                                              Buyer4: '',\n                                                              Seller: '',\n                                                              Shadow1: '',\n                                                              Shadow2: '',\n                                                              Shadow3: '',\n                                                              Shadow4: '',\n                                                              Shadow5: '',\n                                                              Shadow6: '',\n                                                            },\n                                                    chatHistory:[],\n                                                    });\n\n\n  const [myState, setMyState] = useState({\n                                name: 'Username',\n                                role: window.myRole,\n                                sidebar:true,\n                                amAdmin: true,   //LIVESTORM PILOT CHANGE: setting all users to admin — to undo, change to: window.amAdmin\n                                userList: {\n                                  names:[],\n                                  sessionIdFor: {},\n                                },\n                                adminPresent: false,\n                                viewMode: null,\n                                audioIsPlaying: false,\n                                camOnAtSessionStart: null,\n                                micOnAtSessionStart: null,\n                                number: null,\n                              });\n\n  const setName = (newName) => {\n    setMyState(prev=>({\n      ...prev,\n      name: newName,\n    }));\n  };\n\n  const setSidebar = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      sidebar: boolean,\n    }));\n  }\n\n  const setViewMode = (newViewMode) => {\n    setMyState(prev=>({\n      ...prev,\n      viewMode:newViewMode,\n    }));\n  };\n\n  const setRole = (newRole) => {\n    setMyState(prev=>({\n      ...prev,\n      role:newRole,\n    }));\n  };\n\n  const setUserList = (newUserList) => {\n    setMyState(prev=>({\n      ...prev,\n      userList:newUserList,\n    }));\n  };\n\n  const setAmAdmin = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      amAdmin:boolean,\n    }));\n  };\n\n  const setAdminPresent = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      adminPresent:boolean,\n    }));\n  };\n\n  const setMicOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      micOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setCamOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      camOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setNumber = (newNum) => {\n    setMyState(prev=>({\n      ...prev,\n      number: newNum,\n    }));\n  };\n\n  \n\n //check password\n\n  // if (!window.pass.includes(window.myP)) {\n  //   //redirect if password is wrong\n  //   window.location.href = \"http://secondbody.co\"\n  // }\n\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n  const startJoiningCall = useCallback((url) => {\n\n    const join = async() => {\n      const newCallObject = Daily.createCallObject({ \n        subscribeToTracksAutomatically: false, \n        url:url,\n      });\n      setRoomUrl(url);\n      setCallObject(newCallObject);\n      setAppState(STATE_JOINING); \n      \n      await newCallObject.startCamera();\n      await newCallObject.setUserName(myState.name);\n\n\n      if(window.initialInputs) {\n        console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n        newCallObject.join({\n                              audioSource: window.initialInputs[0],\n                              videoSource:window.initialInputs[1],\n                              token:\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzcyI6dHJ1ZSwibyI6dHJ1ZSwiciI6IkxpdmVzdG9ybSIsImQiOiJlMjU1MmE0Yy02OGM4LTRlYmEtYTYyMS1mZThjZTk4ODA5ZTciLCJpYXQiOjE2MzU0NzEwNzV9.h6xMg3Nm48eYOX0c7ADu3vZCf4VtlIAY03RjlDadcrg\",\n                              }); \n   \n      } else {\n        navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n          if(mediaStream){\n            let localAudio = mediaStream.getAudioTracks();\n            let localVideo = mediaStream.getVideoTracks();\n            if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n                {\n                  newCallObject.join({ audioSource: localAudio[0], videoSource:localVideo[0]});\n                }\n          }else{\n            //message e.g. you need a mic to join\n          }\n        })\n      }\n\n\n\n      console.log('joining the call as ' + myState.name); \n      const pageUrl = pageUrlFromRoomUrl(roomUrl)+'&N='+myState.name+'&R='+myState.role;\n     \n    }\n    \n    join();\n    \n  }, [myState.name]); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording();   // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();    \n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  // useEffect(() => {\n  //   const url = roomUrlFromPageUrl();\n  //   url && window.initialInputs && startJoiningCall(url);\n  // }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl=pageUrl;\n    \n    // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n\n    //append role to URL — LIVESTORM PILOT CHANGE: TOOK THIS OUT\n    // if (myState.role) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&R=' + window.myRole;\n    //   }else{\n    //     pageUrl += '?R=' + window.myRole;\n    //   }\n    // }\n    \n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&P=' + window.myP;\n      }else{\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); \n\n    /**\n   * Attach myState object to window for debugging purposes.\n   */\n     useEffect(() => {\n      window.myState = myState;\n    }, [myState]); \n\n     /**\n   * Attach userList to window for debugging\n   */\n  useEffect (()=> {\n    window.userList=myState.userList;\n  },[myState.userList])\n\n /**\n   * Attach sessionState to window for debugging\n   */\n  useEffect(()=> {\n    window.sessionState=sessionState;\n},[sessionState]);\n\nuseEffect(()=>{\n  if (!callObject) {return;}\n  window.record = () => {\n    callObject.startRecording();\n  }\n  window.stop = () => {\n    callObject.stopRecording();\n  }\n},[appState]);\n\n\n\n  \n//Ask for State when Admin becomes present and State is not known\nuseEffect(()=>{\n  let stateRequest;\n  if(!callObject) {return;}\n  if(!sessionState.isKnown && myState.adminPresent) {\n    stateRequest = setInterval(getState,1000);\n    function getState() {\n      if (sessionState.isKnown) {\n        clearInterval(stateRequest);            \n        return;\n      }\n      callObject.sendAppMessage(\"State please?\", '*'); \n      console.log('Requesting meeting state...');\n    }\n  }\n  //cleanup before useEffect runs the next time\n  return function cleanup() {\n    stateRequest && clearInterval(stateRequest);\n  }\n\n},[sessionState.isKnown,myState.adminPresent]);\n\n\n\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          // window.userList.push(window.myName);\n          console.log('*****JOINED MEETING');\n          // if(myState.name==\"\"){callObject.leave();}\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n            let newSessionState = e.data;\n            newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n            setSessionState(newSessionState);\n                \n            }\n\n            //TODO AUDIO TEST\n            else if (e.data.constructor === Object && e.data.type==\"instructions\" && e.data.recipient==callObject.participants().local.session_id) {\n              audioPlayer(e.data.target,e.data.action)\n            }\n\n\n            else if (e.data==\"State please?\") {\n              console.log('*******Received state request');\n              if (myState.amAdmin && sessionState.isKnown) {\n                console.log (\"Sending current state...\");\n                callObject.sendAppMessage(sessionState, '*'); \n              }\n            } \n          }\n      \n      \n    } //end handleAppMessage\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject,sessionState]);\n\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n\n\n\n  return (\n\n\n    <div className=\"app\">\n      <SessionStateContext.Provider \n      value={{session: [sessionState,setSessionState]}}\n      >\n        <MyContext.Provider \n        value={{\n        myStateArray: [myState,setMyState], \n        setName: setName, \n        setRole: setRole, \n        setSidebar: setSidebar,\n        setUserList: setUserList,\n        setViewMode: setViewMode, \n        setCamOnAtSessionStart: setCamOnAtSessionStart, \n        setMicOnAtSessionStart: setMicOnAtSessionStart,\n        setAdminPresent: setAdminPresent,\n        setAmAdmin: setAmAdmin,\n        setNumber: setNumber,\n        }}\n        >\n\n        {(showCall) ? (\n          // NOTE: for an app this size, it's not obvious that using a Context\n          // is the best choice. But for larger apps with deeply-nested components\n          // that want to access call object state and bind event listeners to the\n          // call object, this can be a helpful pattern.\n          <CallObjectContext.Provider value={callObject}>\n\n            <Call roomUrl={roomUrl} />\n            <Tray\n              onClickLeaveCall={startLeavingCall}\n            />\n            {myState.amAdmin && \n                (<AdminPanel/>)\n            }\n          </CallObjectContext.Provider>\n        ) : (\n         <StartScreen\n            // disabled={!enableStartButton}\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          />\n         \n        )}\n        </MyContext.Provider>\n      </SessionStateContext.Provider>\n    </div>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}