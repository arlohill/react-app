{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/arlosb/Documents/GitHub/new react app/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\nexport default function setSubscriptions(callObject){console.log('Setting subscriptions...');console.log('****My role is: '+window.myRole);var subscribedTo=0;window.currentSubs=[];//if session is active, set currentSubs according to my role\nif(window.sessionState.isActive){switch(window.myRole){case'Participant1':window.currentSubs=[];window.sessionState.roleOf.Actor2&&window.currentSubs.push(window.sessionState.roleOf.Actor2);!window.sessionState.roleOf.Actor2&&window.sessionState.roleOf.Participant2&&window.currentSubs.push(window.sessionState.roleOf.Participant2);break;case'Participant2':window.currentSubs=[];window.sessionState.roleOf.Actor1&&window.currentSubs.push(window.sessionState.roleOf.Actor1);!window.sessionState.roleOf.Actor1&&window.sessionState.roleOf.Participant1&&window.currentSubs.push(window.sessionState.roleOf.Participant1);break;case'Actor1':window.currentSubs=[];window.sessionState.roleOf.Participant2&&window.currentSubs.push(window.sessionState.roleOf.Participant2);window.sessionState.roleOf.Participant1&&window.currentSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');break;case'Actor2':window.currentSubs=[];window.sessionState.roleOf.Participant1&&window.currentSubs.push(window.sessionState.roleOf.Participant1);window.sessionState.roleOf.Participant2&&window.currentSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');break;case'Attendee':window.currentSubs=[];break;default:window.currentSubs=[];break;}//Add Admin to currentSubs if applicable\nif(window.sessionState.AdminVisible){window.currentSubs.push(\"Admin\");}}//if NOT active, set audio-filtered subs for the Seconds\n// else if (!window.sessionState.isActive) {\n//     switch (window.myRole) {\n//         case 'Actor1':\n//             window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1);\n//             break;\n//         case 'Actor2':\n//             window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2);\n//             break;\n//         default:\n//             break;\n//     }\n//     window.filteredSubs=filteredSubs;\n// }\nfunction setTracks(){return new Promise(function(resolve){//cycle through each participant in meeting\nvar ps=callObject.participants();Object.keys(ps).forEach(function(p){var participant=ps[p];var thisUserName=participant.user_name;if(p==='local'){return;}console.log(\"This username is: \"+thisUserName);//If NOT ACTIVE, subscribe to everyone in the meeting\nif(!window.sessionState.isActive){//audio only if currently Seconding\nif(window.myRole.includes('Actor')){switch(window.myRole){case'Actor1':if(thisUserName==window.sessionState.roleOf.Participant1){console.log('Subscribing to audio only for: '+thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:false});callObject.updateParticipant(participant.session_id,{setSubscribedTracks:{audio:true,video:false,screenVideo:false}});}else{console.log('Subscribing to: '+thisUserName);window.currentSubs.push(thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:true});subscribedTo++;}break;case'Actor2':if(thisUserName==window.sessionState.roleOf.Participant2){console.log('Subscribing to audio only for: '+thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:false});callObject.updateParticipant(participant.session_id,{setSubscribedTracks:{audio:true,video:false,screenVideo:false}});}else{console.log('Subscribing to: '+thisUserName);window.currentSubs.push(thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:true});subscribedTo++;}break;default:break;}}// audio and video for everyone else\nelse{console.log('Subscribing to: '+thisUserName);window.currentSubs.push(thisUserName);if(!callObject.participants()[participant.session_id].tracks.video.subscribed){callObject.updateParticipant(participant.session_id,{setSubscribedTracks:false});}callObject.updateParticipant(participant.session_id,{setSubscribedTracks:true});subscribedTo++;}//  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n//     console.log('Subscribing to Admin:');\n//     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n//     subscribedTo++;\n//     console.log('Subscribed to session id: ' + participant.session_id);\n// } \n}//IF ACTIVE, just subscribe to those listed in currentSubs;\nelse if(window.sessionState.isActive){if(window.currentSubs.includes(thisUserName+'_AUDIO')){console.log('Subscribing to audio only for: '+thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:{audio:true,video:false,screenVideo:false}});}else if(window.currentSubs.includes(thisUserName)){console.log('Subscribing to: '+thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:true});subscribedTo++;}else if(!window.currentSubs.includes(thisUserName)){console.log('NOT subscribing to: '+thisUserName);callObject.updateParticipant(participant.session_id,{setSubscribedTracks:false});}}});resolve();});}setTracks().then(function(){//print subscriptions\nvar iterator=window.currentSubs.values();console.log(\"Currently subscribed to:\");var _iterator=_createForOfIteratorHelper(iterator),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var elements=_step.value;console.log(elements);}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(window.currentSubs.length<1){console.log(\"No one.\");}window.setSubscriptions=setSubscriptions;window.updateCall();//if no admin (or admin has left), start asking for state\n// if (adminPresent==false) {\n//     window.sessionState.isKnown=false;\n//     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n//     stateRequest = setInterval(getState,2500);\n//     console.log('no Admin present');\n// }\n// if (subscribedTo==0) {\n//     window.isPopulated = false;\n//     document.getElementById('empty-room').style.opacity='1';\n//     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n//     if (window.sessionState.isActive==true) {\n//         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n//     } else if (window.sessionState.isActive==false) {\n//         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n//     }\n// } else if (subscribedTo>0) {\n//     window.isPopulated = true;\n//     document.getElementById('empty-room').style.opacity='0';\n//     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n//         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n//     }\n// }\n});};","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/hooks/setSubscriptions.js"],"names":["setSubscriptions","callObject","console","log","window","myRole","subscribedTo","currentSubs","sessionState","isActive","roleOf","Actor2","push","Participant2","Actor1","Participant1","AdminVisible","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","includes","updateParticipant","session_id","setSubscribedTracks","audio","video","screenVideo","tracks","subscribed","then","iterator","values","elements","length","updateCall"],"mappings":"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","sourcesContent":["// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\n\nexport default function setSubscriptions(callObject) {\n\n    console.log('Setting subscriptions...');\n    console.log('****My role is: ' + window.myRole);\n    let subscribedTo=0;\n    window.currentSubs=[];\n    \n    //if session is active, set currentSubs according to my role\n        if (window.sessionState.isActive) {\n            switch (window.myRole) {\n                case 'Participant1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                    !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    break;\n                case 'Participant2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                    !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    break;\n                case 'Actor1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');\n                    break;\n                case 'Actor2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');\n                    break;\n                case 'Attendee':\n                    window.currentSubs=[];\n                    break;\n                default:\n                    window.currentSubs=[];\n                    break;\n            }\n            //Add Admin to currentSubs if applicable\n            if (window.sessionState.AdminVisible) {\n            window.currentSubs.push (\"Admin\");\n        }\n    }\n\n    //if NOT active, set audio-filtered subs for the Seconds\n    // else if (!window.sessionState.isActive) {\n    //     switch (window.myRole) {\n    //         case 'Actor1':\n    //             window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1);\n    //             break;\n    //         case 'Actor2':\n    //             window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //     window.filteredSubs=filteredSubs;\n    // }\n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            Object.keys(ps).forEach((p) => {\n\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local') {\n                    return;\n                } \n\n\n\n                console.log(\"This username is: \" +thisUserName);\n                //If NOT ACTIVE, subscribe to everyone in the meeting\n                if (!window.sessionState.isActive) {\n\n                    //audio only if currently Seconding\n                    if (window.myRole.includes('Actor')) {\n                        switch (window.myRole) {\n                            case 'Actor1':\n                                    if (thisUserName==window.sessionState.roleOf.Participant1) {\n                                        console.log('Subscribing to audio only for: ' + thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                    } else {\n                                        console.log('Subscribing to: ' + thisUserName);\n                                        window.currentSubs.push(thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                        subscribedTo++;\n                                    }\n                                break;\n                            case 'Actor2':\n                                if (thisUserName==window.sessionState.roleOf.Participant2) {\n                                    console.log('Subscribing to audio only for: ' + thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                } else {\n                                    console.log('Subscribing to: ' + thisUserName);\n                                    window.currentSubs.push(thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                    subscribedTo++;\n                                }\n                            break;\n                        \n                            default:\n                                break;\n                        }\n                    }\n\n                    // audio and video for everyone else\n                    else {  \n                        console.log('Subscribing to: ' + thisUserName);\n                        window.currentSubs.push(thisUserName);\n                        if (!callObject.participants()[participant.session_id].tracks.video.subscribed){\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                        }\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    //  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n                    //     console.log('Subscribing to Admin:');\n                    //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                    //     subscribedTo++;\n                    //     console.log('Subscribed to session id: ' + participant.session_id);\n                    // } \n\n                } \n\n                //IF ACTIVE, just subscribe to those listed in currentSubs;\n                else if (window.sessionState.isActive) {\n                    if(window.currentSubs.includes(thisUserName+'_AUDIO')) {\n                        console.log('Subscribing to audio only for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n                    else if(window.currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!window.currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve()\n        })\n    }\n    \n    setTracks().then(()=>{\n\n        //print subscriptions\n    var iterator = window.currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (window.currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n    window.setSubscriptions=setSubscriptions;\n    window.updateCall();\n\n        //if no admin (or admin has left), start asking for state\n        // if (adminPresent==false) {\n        //     window.sessionState.isKnown=false;\n        //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n        //     stateRequest = setInterval(getState,2500);\n        //     console.log('no Admin present');\n        // }\n        // if (subscribedTo==0) {\n        //     window.isPopulated = false;\n        //     document.getElementById('empty-room').style.opacity='1';\n        //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n        //     if (window.sessionState.isActive==true) {\n        //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n        //     } else if (window.sessionState.isActive==false) {\n        //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n\n        //     }\n        // } else if (subscribedTo>0) {\n        //     window.isPopulated = true;\n        //     document.getElementById('empty-room').style.opacity='0';\n        //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n        //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n        //     }\n\n        // }\n\n    })\n\n    \n   \n};\n\n"]},"metadata":{},"sourceType":"module"}