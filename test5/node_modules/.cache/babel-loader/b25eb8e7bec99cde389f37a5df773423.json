{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base metrics path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/metrics';\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\n\nvar Metrics = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Metrics, _Base);\n\n  var _super = _createSuper(Metrics);\n\n  function Metrics() {\n    _classCallCheck(this, Metrics);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Metrics, [{\n    key: \"breakdown\",\n\n    /**\n     * List the breakdown values for a specific metric\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n     * @param {Object} params - example: {group_by: 'browser'}\n     * NOTE: the group_by query parameter is required\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // List all of the values across every breakdown for a specific metric grouped by browser\n     * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-breakdown-values\n     */\n    value: function breakdown(metricId, params) {\n      return this.http.get(\"\".concat(PATH, \"/\").concat(metricId, \"/breakdown\"), {\n        params: params\n      });\n    }\n    /**\n     * List all of the values across every breakdown for a specific metric\n     *\n     * @param {Object} params - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // List the breakdown values for a specific metric within the last 24 hours\n     * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n     * Note: the value query parameter is required\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-all-metric-values\n     */\n\n  }, {\n    key: \"comparison\",\n    value: function comparison(params) {\n      if (!params || params && !params.value) {\n        throw new Error('The value query parameter is required for comparing metrics');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/comparison\"), {\n        params: params\n      });\n    }\n    /**\n     * Returns a list of insights for a metric. These are the worst performing values across all\n     * breakdowns sorted by how much they negatively impact a specific metric.\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n     * @param {Object} [params] - example { measurement: 'median', order_direction: 'desc' }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Get a list of insights for a metric measured by median and ordered descending\n     * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-insights\n     */\n\n  }, {\n    key: \"insights\",\n    value: function insights(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for insight metrics.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(metricId, \"/insights\"), {\n        params: params\n      });\n    }\n    /**\n     * Returns the overall value for a specific metric, as well as the total view count,\n     * watch time, and the Mux Global metric value for the metric.\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n     * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Get the overall value for a specific metric within the past 7 days\n     * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-overall-values\n     */\n\n  }, {\n    key: \"overall\",\n    value: function overall(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for overall metrics.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(metricId, \"/overall\"), {\n        params: params\n      });\n    }\n    /**\n     * Returns timeseries data for a specific metric\n     *\n     * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n     * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Get timeseries data for a specific metric within the past 7 days\n     * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-metric-timeseries-data\n     */\n\n  }, {\n    key: \"timeseries\",\n    value: function timeseries(metricId, params) {\n      if (!metricId) {\n        throw new Error('A metric Id is required for timeseries metrics.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(metricId, \"/timeseries\"), {\n        params: params\n      });\n    }\n  }]);\n\n  return Metrics;\n}(Base);\n\nmodule.exports = Metrics;","map":null,"metadata":{},"sourceType":"script"}