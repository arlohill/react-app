{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/arlosb/Documents/GitHub/new react app/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useContext,useReducer,useCallback}from'react';import'./Call.css';import Tile from'../Tile/Tile';import CallObjectContext from'../../CallObjectContext';import CallMessage from'../CallMessage/CallMessage';import{initialCallState,CLICK_ALLOW_TIMEOUT,PARTICIPANTS_CHANGE,CAM_OR_MIC_ERROR,FATAL_ERROR,callReducer,isLocal,isScreenShare,containsScreenShare,getMessage}from'./callState';import{logDailyEvent}from'../../logUtils';export default function Call(){var callObject=useContext(CallObjectContext);var _useReducer=useReducer(callReducer,initialCallState),_useReducer2=_slicedToArray(_useReducer,2),callState=_useReducer2[0],dispatch=_useReducer2[1];/**\n   * Start listening for participant changes, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;var events=['participant-joined','participant-updated','participant-left'];function handleNewParticipantsState(event){event&&logDailyEvent(event);dispatch({type:PARTICIPANTS_CHANGE,participants:callObject.participants()});}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\nfor(var _i=0,_events=events;_i<_events.length;_i++){var event=_events[_i];callObject.on(event,handleNewParticipantsState);}// Stop listening for changes in state\nreturn function cleanup(){var _iterator=_createForOfIteratorHelper(events),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _event=_step.value;callObject.off(_event,handleNewParticipantsState);}}catch(err){_iterator.e(err);}finally{_iterator.f();}};},[callObject]);/**\n   * Start listening for call errors, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;function handleCameraErrorEvent(event){logDailyEvent(event);dispatch({type:CAM_OR_MIC_ERROR,message:event&&event.errorMsg&&event.errorMsg.errorMsg||'Unknown'});}// We're making an assumption here: there is no camera error when callObject\n// is first assigned.\ncallObject.on('camera-error',handleCameraErrorEvent);return function cleanup(){callObject.off('camera-error',handleCameraErrorEvent);};},[callObject]);/**\n   * Start listening for fatal errors, when the callObject is set.\n   */useEffect(function(){if(!callObject)return;function handleErrorEvent(e){logDailyEvent(e);dispatch({type:FATAL_ERROR,message:e&&e.errorMsg||'Unknown'});}// We're making an assumption here: there is no error when callObject is\n// first assigned.\ncallObject.on('error',handleErrorEvent);return function cleanup(){callObject.off('error',handleErrorEvent);};},[callObject]);/**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */useEffect(function(){var t=setTimeout(function(){dispatch({type:CLICK_ALLOW_TIMEOUT});},2500);return function cleanup(){clearTimeout(t);};},[]);/**\n   * Send an app message to the remote participant whose tile was clicked on.\n   */var sendHello=useCallback(function(participantId){callObject&&callObject.sendAppMessage({hello:'world'},participantId);},[callObject]);function getTiles(){var largeTiles=[];var smallTiles=[];Object.entries(callState.callItems).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),id=_ref2[0],callItem=_ref2[1];var isLarge=isScreenShare(id)||!isLocal(id)&&!containsScreenShare(callState.callItems);var tile=/*#__PURE__*/React.createElement(Tile,{key:id,videoTrackState:callItem.videoTrackState,audioTrackState:callItem.audioTrackState,isLocalPerson:isLocal(id),isLarge:isLarge,disableCornerMessage:isScreenShare(id),onClick:isLocal(id)?null:function(){sendHello(id);}});if(isLarge){largeTiles.push(tile);}else{smallTiles.push(tile);}});return[largeTiles,smallTiles];}var _getTiles=getTiles(),_getTiles2=_slicedToArray(_getTiles,2),largeTiles=_getTiles2[0],smallTiles=_getTiles2[1];var message=getMessage(callState);return/*#__PURE__*/React.createElement(\"div\",{className:\"call\"},/*#__PURE__*/React.createElement(\"div\",{className:\"large-tiles\"},!message?largeTiles:null/* Avoid showing large tiles to make room for the message */),/*#__PURE__*/React.createElement(\"div\",{className:\"small-tiles\"},smallTiles),message&&/*#__PURE__*/React.createElement(CallMessage,{header:message.header,detail:message.detail,isError:message.isError}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","Tile","CallObjectContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","Call","callObject","callState","dispatch","events","handleNewParticipantsState","event","type","participants","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","e","t","setTimeout","clearTimeout","sendHello","participantId","sendAppMessage","hello","getTiles","largeTiles","smallTiles","Object","entries","callItems","forEach","id","callItem","isLarge","tile","videoTrackState","audioTrackState","push","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n    ];\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  /**\n   * Send an app message to the remote participant whose tile was clicked on.\n   */\n  const sendHello = useCallback(\n    (participantId) => {\n      callObject &&\n        callObject.sendAppMessage({ hello: 'world' }, participantId);\n    },\n    [callObject]\n  );\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems));\n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          onClick={\n            isLocal(id)\n              ? null\n              : () => {\n                  sendHello(id);\n                }\n          }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  const message = getMessage(callState);\n  return (\n    <div className=\"call\">\n      <div className=\"large-tiles\">\n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}