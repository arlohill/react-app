{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/Tile.js\";\nimport React, { memo, useEffect, useState, useRef } from 'react';\nimport useVideoTrack from '@custom/shared/hooks/useVideoTrack';\nimport { ReactComponent as IconMicMute } from \"@svgr/webpack?-svgo,+titleProp,+ref!@custom/shared/icons/mic-off-sm.svg\";\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { DEFAULT_ASPECT_RATIO } from '../../constants';\nimport Video from './Video';\nimport { ReactComponent as Avatar } from \"@svgr/webpack?-svgo,+titleProp,+ref!./avatar.svg\";\nconst SM_TILE_MAX_WIDTH = 300;\nexport const Tile = memo(({\n  participant,\n  mirrored = true,\n  showName = true,\n  showAvatar = true,\n  showActiveSpeaker = true,\n  videoFit = 'contain',\n  aspectRatio = DEFAULT_ASPECT_RATIO,\n  onVideoResize,\n  ...props\n}) => {\n  const videoTrack = useVideoTrack(participant);\n  const videoRef = useRef(null);\n  const tileRef = useRef(null);\n  const [tileWidth, setTileWidth] = useState(0);\n  /**\n   * Effect: Resize\n   *\n   * Add optional event listener for resize event so the parent component\n   * can know the video's native aspect ratio.\n   */\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!onVideoResize || !video) return false;\n\n    const handleResize = () => {\n      if (!video) return;\n      const width = video === null || video === void 0 ? void 0 : video.videoWidth;\n      const height = video === null || video === void 0 ? void 0 : video.videoHeight;\n\n      if (width && height) {\n        // Return the video's aspect ratio to the parent's handler\n        onVideoResize(width / height);\n      }\n    };\n\n    handleResize();\n    video === null || video === void 0 ? void 0 : video.addEventListener('resize', handleResize);\n    return () => video === null || video === void 0 ? void 0 : video.removeEventListener('resize', handleResize);\n  }, [onVideoResize, videoRef, participant]);\n  /**\n   * Effect: Resize Observer\n   *\n   * Adjust size of text overlay based on tile size\n   */\n\n  useEffect(() => {\n    const tile = tileRef.current;\n    if (!tile || typeof ResizeObserver === 'undefined') return false;\n    let frame;\n    const resizeObserver = new ResizeObserver(() => {\n      if (frame) cancelAnimationFrame(frame);\n      frame = requestAnimationFrame(() => {\n        if (!tile) return;\n        const dimensions = tile === null || tile === void 0 ? void 0 : tile.getBoundingClientRect();\n        const {\n          width\n        } = dimensions;\n        setTileWidth(width);\n      });\n    });\n    resizeObserver.observe(tile);\n    return () => {\n      if (frame) cancelAnimationFrame(frame);\n      resizeObserver.disconnect();\n    };\n  }, [tileRef]);\n  const cx = classNames('tile', videoFit, {\n    mirrored,\n    avatar: showAvatar && !videoTrack,\n    screenShare: participant.isScreenShare,\n    active: showActiveSpeaker && participant.isActiveSpeaker,\n    small: tileWidth < SM_TILE_MAX_WIDTH\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: tileRef,\n    className: cx\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, showName && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, participant.isMicMuted && !participant.isScreenShare && /*#__PURE__*/React.createElement(IconMicMute, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), participant.name), videoTrack ? /*#__PURE__*/React.createElement(Video, {\n    ref: videoRef,\n    participantId: participant === null || participant === void 0 ? void 0 : participant.id,\n    videoTrack: videoTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }) : showAvatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    style: {\n      width: '35%',\n      height: '35%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"style\", {\n    jsx: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, `\n          .tile .content {\n            padding-bottom: ${100 / aspectRatio}%;\n          }\n        `), /*#__PURE__*/React.createElement(\"style\", {\n    jsx: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, `\n          .tile {\n            background: var(--blue-dark);\n            min-width: 1px;\n            overflow: hidden;\n            position: relative;\n            width: 100%;\n            box-sizing: border-box;\n          }\n\n          .tile.active:before {\n            content: '';\n            position: absolute;\n            top: 0px;\n            right: 0px;\n            left: 0px;\n            bottom: 0px;\n            border: 2px solid var(--primary-default);\n            box-sizing: border-box;\n            pointer-events: none;\n            z-index: 2;\n          }\n\n          .tile .name {\n            position: absolute;\n            bottom: 0px;\n            display: flex;\n            align-items: center;\n            left: 0px;\n            z-index: 2;\n            line-height: 1;\n            font-size: 0.875rem;\n            color: white;\n            font-weight: var(--weight-medium);\n            padding: var(--spacing-xxs);\n            text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.45);\n            gap: var(--spacing-xxs);\n          }\n\n          .tile .name :global(svg) {\n            color: var(--red-default);\n          }\n\n          .tile.small .name {\n            font-size: 12px;\n          }\n\n          .tile :global(video) {\n            height: calc(100% + 4px);\n            left: -2px;\n            object-position: center;\n            position: absolute;\n            top: -2px;\n            width: calc(100% + 4px);\n            z-index: 1;\n          }\n\n          .tile.contain :global(video) {\n            object-fit: contain;\n          }\n\n          .tile.cover :global(video) {\n            object-fit: cover;\n          }\n\n          .tile.mirrored :global(video) {\n            transform: scale(-1, 1);\n          }\n\n          .tile .avatar {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n        `));\n});\nTile.propTypes = {\n  participant: PropTypes.object.isRequired,\n  mirrored: PropTypes.bool,\n  showName: PropTypes.bool,\n  showAvatar: PropTypes.bool,\n  aspectRatio: PropTypes.number,\n  onVideoResize: PropTypes.func,\n  showActiveSpeaker: PropTypes.bool,\n  videoFit: PropTypes.string\n};\nexport default Tile;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/Tile.js"],"names":["React","memo","useEffect","useState","useRef","useVideoTrack","classNames","PropTypes","DEFAULT_ASPECT_RATIO","Video","SM_TILE_MAX_WIDTH","Tile","participant","mirrored","showName","showAvatar","showActiveSpeaker","videoFit","aspectRatio","onVideoResize","props","videoTrack","videoRef","tileRef","tileWidth","setTileWidth","video","current","handleResize","width","videoWidth","height","videoHeight","addEventListener","removeEventListener","tile","ResizeObserver","frame","resizeObserver","cancelAnimationFrame","requestAnimationFrame","dimensions","getBoundingClientRect","observe","disconnect","cx","avatar","screenShare","isScreenShare","active","isActiveSpeaker","small","isMicMuted","name","id","propTypes","object","isRequired","bool","number","func","string"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState, useRef } from 'react';\nimport useVideoTrack from '@custom/shared/hooks/useVideoTrack';\nimport { ReactComponent as IconMicMute } from '@custom/shared/icons/mic-off-sm.svg';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { DEFAULT_ASPECT_RATIO } from '../../constants';\nimport Video from './Video';\nimport { ReactComponent as Avatar } from './avatar.svg';\n\nconst SM_TILE_MAX_WIDTH = 300;\n\nexport const Tile = memo(\n  ({\n    participant,\n    mirrored = true,\n    showName = true,\n    showAvatar = true,\n    showActiveSpeaker = true,\n    videoFit = 'contain',\n    aspectRatio = DEFAULT_ASPECT_RATIO,\n    onVideoResize,\n    ...props\n  }) => {\n    const videoTrack = useVideoTrack(participant);\n    const videoRef = useRef(null);\n    const tileRef = useRef(null);\n    const [tileWidth, setTileWidth] = useState(0);\n\n    /**\n     * Effect: Resize\n     *\n     * Add optional event listener for resize event so the parent component\n     * can know the video's native aspect ratio.\n     */\n    useEffect(() => {\n      const video = videoRef.current;\n      if (!onVideoResize || !video) return false;\n\n      const handleResize = () => {\n        if (!video) return;\n        const width = video?.videoWidth;\n        const height = video?.videoHeight;\n        if (width && height) {\n          // Return the video's aspect ratio to the parent's handler\n          onVideoResize(width / height);\n        }\n      };\n\n      handleResize();\n      video?.addEventListener('resize', handleResize);\n\n      return () => video?.removeEventListener('resize', handleResize);\n    }, [onVideoResize, videoRef, participant]);\n\n    /**\n     * Effect: Resize Observer\n     *\n     * Adjust size of text overlay based on tile size\n     */\n    useEffect(() => {\n      const tile = tileRef.current;\n      if (!tile || typeof ResizeObserver === 'undefined') return false;\n      let frame;\n      const resizeObserver = new ResizeObserver(() => {\n        if (frame) cancelAnimationFrame(frame);\n        frame = requestAnimationFrame(() => {\n          if (!tile) return;\n          const dimensions = tile?.getBoundingClientRect();\n          const { width } = dimensions;\n          setTileWidth(width);\n        });\n      });\n      resizeObserver.observe(tile);\n      return () => {\n        if (frame) cancelAnimationFrame(frame);\n        resizeObserver.disconnect();\n      };\n    }, [tileRef]);\n\n    const cx = classNames('tile', videoFit, {\n      mirrored,\n      avatar: showAvatar && !videoTrack,\n      screenShare: participant.isScreenShare,\n      active: showActiveSpeaker && participant.isActiveSpeaker,\n      small: tileWidth < SM_TILE_MAX_WIDTH,\n    });\n\n    return (\n      <div ref={tileRef} className={cx} {...props}>\n        <div className=\"content\">\n          {showName && (\n            <div className=\"name\">\n              {participant.isMicMuted && !participant.isScreenShare && (\n                <IconMicMute />\n              )}\n              {participant.name}\n            </div>\n          )}\n          {videoTrack ? (\n            <Video\n              ref={videoRef}\n              participantId={participant?.id}\n              videoTrack={videoTrack}\n            />\n          ) : (\n            showAvatar && (\n              <div className=\"avatar\">\n                <Avatar style={{ width: '35%', height: '35%' }} />\n              </div>\n            )\n          )}\n        </div>\n        <style jsx>{`\n          .tile .content {\n            padding-bottom: ${100 / aspectRatio}%;\n          }\n        `}</style>\n        <style jsx>{`\n          .tile {\n            background: var(--blue-dark);\n            min-width: 1px;\n            overflow: hidden;\n            position: relative;\n            width: 100%;\n            box-sizing: border-box;\n          }\n\n          .tile.active:before {\n            content: '';\n            position: absolute;\n            top: 0px;\n            right: 0px;\n            left: 0px;\n            bottom: 0px;\n            border: 2px solid var(--primary-default);\n            box-sizing: border-box;\n            pointer-events: none;\n            z-index: 2;\n          }\n\n          .tile .name {\n            position: absolute;\n            bottom: 0px;\n            display: flex;\n            align-items: center;\n            left: 0px;\n            z-index: 2;\n            line-height: 1;\n            font-size: 0.875rem;\n            color: white;\n            font-weight: var(--weight-medium);\n            padding: var(--spacing-xxs);\n            text-shadow: 0px 1px 3px rgba(0, 0, 0, 0.45);\n            gap: var(--spacing-xxs);\n          }\n\n          .tile .name :global(svg) {\n            color: var(--red-default);\n          }\n\n          .tile.small .name {\n            font-size: 12px;\n          }\n\n          .tile :global(video) {\n            height: calc(100% + 4px);\n            left: -2px;\n            object-position: center;\n            position: absolute;\n            top: -2px;\n            width: calc(100% + 4px);\n            z-index: 1;\n          }\n\n          .tile.contain :global(video) {\n            object-fit: contain;\n          }\n\n          .tile.cover :global(video) {\n            object-fit: cover;\n          }\n\n          .tile.mirrored :global(video) {\n            transform: scale(-1, 1);\n          }\n\n          .tile .avatar {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n        `}</style>\n      </div>\n    );\n  }\n);\n\nTile.propTypes = {\n  participant: PropTypes.object.isRequired,\n  mirrored: PropTypes.bool,\n  showName: PropTypes.bool,\n  showAvatar: PropTypes.bool,\n  aspectRatio: PropTypes.number,\n  onVideoResize: PropTypes.func,\n  showActiveSpeaker: PropTypes.bool,\n  videoFit: PropTypes.string,\n};\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}