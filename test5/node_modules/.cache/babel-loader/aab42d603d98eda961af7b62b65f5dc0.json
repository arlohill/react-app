{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/RoleSelector/RoleSelector.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport './RoleSelector.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nexport default function RoleSelector(props) {\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n\n  const setSubs = () => {\n    setSubscriptions(callObject, window.viewMode);\n  };\n\n  const role = props.role; // const [selectedOption, setSelectedOption] = useState('');\n\n  const sendState = () => {\n    console.log(\"Sending current state...\");\n    callObject.sendAppMessage(window.sessionState, '*');\n  };\n\n  let handleRoleChange = e => {\n    window.sessionState.roleOf[e.target.id] = e.target.value;\n    setSessionState(prevState => ({ ...prevState,\n      roleOf: { ...prevState.roleOf,\n        [e.target.id]: e.target.value\n      }\n    }));\n    console.log(e.target.id + ' is now: ' + e.target.value);\n    sendState();\n    let myNewRole = 'Attendee'; //default, if no role assigned\n\n    for (const key in window.sessionState.roleOf) {\n      if (window.sessionState.roleOf[key] == window.myName) {\n        myNewRole = key;\n      }\n    }\n\n    if (myNewRole != window.myRole) {\n      window.myRole = myNewRole;\n\n      if (window.myRole.includes('1')) {\n        window.myNumber = 1;\n      } else if (window.myRole.includes('2')) {\n        window.myNumber = 2;\n      }\n    }\n\n    if (window.sessionState.isActive) {// activateSession();  //rebuild UI for the newly assigned role, mid-session\n    }\n\n    setSubs();\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: \"selector\",\n    id: role,\n    onChange: handleRoleChange,\n    value: sessionState.roleOf[role],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), window.userList && window.userList.length > 0 && window.userList.map(user => /*#__PURE__*/React.createElement(\"option\", {\n    value: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 95\n    }\n  }, user.includes('_Admin') ? user.split('_Admin').join('') : user))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/RoleSelector/RoleSelector.js"],"names":["React","useContext","useEffect","useState","setSubscriptions","CallObjectContext","SessionStateContext","RoleSelector","props","callObject","session","sessionState","setSessionState","setSubs","window","viewMode","role","sendState","console","log","sendAppMessage","handleRoleChange","e","roleOf","target","id","value","prevState","myNewRole","key","myName","myRole","includes","myNumber","isActive","userList","length","map","user","split","join"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './RoleSelector.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\n\n\n\nexport default function RoleSelector(props) {\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;\n    const setSubs = () => {setSubscriptions(callObject,window.viewMode)};  \n    const role = props.role;\n    // const [selectedOption, setSelectedOption] = useState('');\n\n    \n    const sendState = () => {\n        console.log (\"Sending current state...\");\n        callObject.sendAppMessage(window.sessionState, '*'); \n    }\n\n\n    let handleRoleChange = (e) => {\n        window.sessionState.roleOf[e.target.id]=e.target.value;\n        setSessionState((prevState)=>(\n            {\n            ...prevState,\n            roleOf: {\n                    ...prevState.roleOf,\n                    [e.target.id]: e.target.value\n                    }\n            }\n            ))\n        console.log (e.target.id + ' is now: ' + e.target.value);\n        sendState();\n    \n        let myNewRole = 'Attendee'; //default, if no role assigned\n        for (const key in window.sessionState.roleOf) {\n            if(window.sessionState.roleOf[key]==window.myName) {\n                myNewRole = key;\n            }\n        }\n        if (myNewRole!=window.myRole) {\n            window.myRole = myNewRole;\n              if (window.myRole.includes('1')) {\n                  window.myNumber=1;\n              } else if (window.myRole.includes('2')) {\n                  window.myNumber=2;\n              }\n          }\n            if(window.sessionState.isActive){\n                // activateSession();  //rebuild UI for the newly assigned role, mid-session\n            } \n            setSubs();\n      }\n\n\n    return (\n\n\n\n\n    <form className='dropdown'>\n            <select className='selector' id={role} onChange={handleRoleChange} value={sessionState.roleOf[role]}>            \n            <option value={null}></option>\n                {window.userList && window.userList.length>0 && window.userList.map((user) => <option value={user}>{user.includes('_Admin') ? user.split('_Admin').join('') : user}</option>)}\n                </select>\n    </form>\n                    \n\n    );\n  }\n\n        "]},"metadata":{},"sourceType":"module"}