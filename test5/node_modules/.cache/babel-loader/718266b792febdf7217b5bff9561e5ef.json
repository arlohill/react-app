{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base live stream path for the Mux API\n * */\n\n\nvar PATH = '/video/v1/live-streams';\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\n\nvar buildBasePath = function buildBasePath(liveStreamId) {\n  return \"\".concat(PATH, \"/\").concat(liveStreamId);\n};\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\n\n\nvar LiveStreams = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(LiveStreams, _Base);\n\n  var _super = _createSuper(LiveStreams);\n\n  function LiveStreams() {\n    _classCallCheck(this, LiveStreams);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LiveStreams, [{\n    key: \"create\",\n\n    /**\n     * Creates a Mux live stream with the specified JSON parameters\n     * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Video } = muxClient;\n     *\n     * // Create a live stream\n     * Video.LiveStreams.create({\n     *  playback_policy: 'public',\n     *  new_asset_settings: { playback_policy: 'public' }\n     * });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-live-stream\n     */\n    value: function create(params) {\n      return this.http.post(PATH, params);\n    }\n    /**\n     * Deletes a Mux Live Stream\n     * @param {string} liveStreamId - The ID for the live stream intended for deletion\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete a mux live stream\n     * Video.LiveStreams.del(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to delete a live stream'));\n      }\n\n      return this.http.delete(buildBasePath(liveStreamId));\n    }\n    /**\n     * Get an Live Stream\n     * @param {string} liveStreamId - The ID for the live stream\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get a live stream\n     * Video.LiveStreams.get(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-live-stream\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to get a live stream'));\n      }\n\n      return this.http.get(buildBasePath(liveStreamId));\n    }\n    /**\n     * List all live streams for a Mux Environment (tied to your access token)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // List all live streams for a Mux Environment\n     * Video.LiveStreams.list();\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/list-live-streams\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n    /**\n     * Signal a live stream is finished\n     * @param {string} liveStreamId - The ID for the live stream\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Signal a live stream is finished\n     * Video.LiveStreams.signalComplete(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/signal-live-stream-complete\n     */\n\n  }, {\n    key: \"signalComplete\",\n    value: function signalComplete(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to signal a stream is complete'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(liveStreamId), \"/complete\"));\n    }\n    /**\n     * Reset a stream key\n     * @param {string} liveStreamId - The ID for the live stream\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Reset a live stream key if you want to immediately stop the current stream key\n     * // from working and create a new stream key that can be used for future broadcasts.\n     * Video.LiveStreams.resetStreamKey(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/reset-stream-key\n     */\n\n  }, {\n    key: \"resetStreamKey\",\n    value: function resetStreamKey(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to reset a live stream key'));\n      }\n\n      return this.http.post(\"\".concat(buildBasePath(liveStreamId), \"/reset-stream-key\"));\n    }\n    /**\n     * Create a live stream playback id\n     * @param {string} liveStreamId - The ID for the live stream\n     * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Create a live stream playback ID\n     * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-playback-id\n     */\n\n  }, {\n    key: \"createPlaybackId\",\n    value: function createPlaybackId(liveStreamId, params) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to create a live stream playback ID'));\n      }\n\n      if (!params) {\n        return Promise.reject(new Error('A playback policy is required to create a live stream playback ID'));\n      }\n\n      return this.http.post(\"\".concat(buildBasePath(liveStreamId), \"/playback-ids\"), params);\n    }\n    /**\n     * Delete a live stream playback ID\n     * @param {string} liveStreamId - The ID for the live stream\n     * @param {string} playbackId - The ID for the live stream playback ID to delete\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete a live stream playback ID\n     * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-playback-id\n     */\n\n  }, {\n    key: \"deletePlaybackId\",\n    value: function deletePlaybackId(liveStreamId, playbackId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to delete a live stream playback ID'));\n      }\n\n      if (!playbackId) {\n        return Promise.reject(new Error('A live stream playback ID is required to delete a live stream playback ID'));\n      }\n\n      return this.http.delete(\"\".concat(buildBasePath(liveStreamId), \"/playback-ids/\").concat(playbackId));\n    }\n    /**\n     * Create a simulcast target\n     * @param {string} liveStreamId - The ID for the live stream\n     * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Create a live simulcast target\n     * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-live-stream-simulcast-target\n     */\n\n  }, {\n    key: \"createSimulcastTarget\",\n    value: function createSimulcastTarget(liveStreamId, params) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to create a simulcast target'));\n      }\n\n      if (!(params && params.url)) {\n        return Promise.reject(new Error('A url is required to create a simulcast target'));\n      }\n\n      return this.http.post(\"\".concat(buildBasePath(liveStreamId), \"/simulcast-targets\"), params);\n    }\n    /**\n     * Get a simulcast target\n     * @param {string} liveStreamId - The ID for the live stream\n     * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get a live simulcast target\n     * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-live-stream-simulcast-target\n     */\n\n  }, {\n    key: \"getSimulcastTarget\",\n    value: function getSimulcastTarget(liveStreamId, simulcastTargetId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to get a simulcast target'));\n      }\n\n      if (!simulcastTargetId) {\n        return Promise.reject(new Error('A simulcast target ID is required to get a simulcast target'));\n      }\n\n      return this.http.get(\"\".concat(buildBasePath(liveStreamId), \"/simulcast-targets/\").concat(simulcastTargetId));\n    }\n    /**\n     * Delete a simulcast target\n     * @param {string} liveStreamId - The ID for the live stream\n     * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete a simulcast target\n     * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-live-stream-simulcast-target\n     */\n\n  }, {\n    key: \"deleteSimulcastTarget\",\n    value: function deleteSimulcastTarget(liveStreamId, simulcastTargetId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to delete a simulcast target'));\n      }\n\n      if (!simulcastTargetId) {\n        return Promise.reject(new Error('A simulcast target ID is required to delete a simulcast target'));\n      }\n\n      return this.http.delete(\"\".concat(buildBasePath(liveStreamId), \"/simulcast-targets/\").concat(simulcastTargetId));\n    }\n    /**\n     * Disable a Live Stream\n     * @param {string} liveStreamId - The ID for the live stream\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Disable a live stream\n     * Video.LiveStreams.disable(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/disable-live-stream\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to disable a live stream'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(liveStreamId), \"/disable\"));\n    }\n    /**\n     * Enable a Live Stream\n     * @param {string} liveStreamId - The ID for the live stream\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Enable a Live Stream\n     * Video.LiveStreams.enable(liveStreamId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/enable-live-stream\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable(liveStreamId) {\n      if (!liveStreamId) {\n        return Promise.reject(new Error('A live stream ID is required to enable a live stream'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(liveStreamId), \"/enable\"));\n    }\n  }]);\n\n  return LiveStreams;\n}(Base);\n\nmodule.exports = LiveStreams;","map":null,"metadata":{},"sourceType":"script"}