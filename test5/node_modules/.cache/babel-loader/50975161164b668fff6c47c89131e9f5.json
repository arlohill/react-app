{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/AdminPanel/AdminPanel.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport RoleSelector from '../RoleSelector/RoleSelector';\nimport SessionStateContext from '../../SessionStateContext'; // import { sendState } from '../AdminPanel/AdminFunctions'\n// import SessionContext from '../../SessionContext';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext); // const [sessionState, setSessionState ] = useContext(SessionContext);\n\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n\n  const setSubs = () => {\n    setSubscriptions(callObject);\n  };\n\n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel = forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play practice audio');\n  const [targetRecording, setTargetRecording] = useState('monologue1'); ///////HAVE TO CHANGE THIS IN TWO PLACES\n\n  useEffect(() => {\n    //listen for participants leaving or joining and update component\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-left', 'joined-meeting'];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(() => forceUpdate(), 100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(() => forceUpdate(), 100));\n      }\n    };\n  }, [callObject]);\n\n  const sendState = () => {\n    console.log(\"Sending current state...\");\n    callObject.sendAppMessage(window.sessionState, '*');\n  };\n\n  useEffect(() => {\n    window.sendState = sendState;\n  }, [sendState]);\n\n  function toggleSessionActive() {\n    setSessionState(prevState => ({ ...prevState,\n      isActive: !prevState.isActive\n    }));\n    window.sessionState.isActive = !window.sessionState.isActive;\n    sendState();\n\n    if (window.sessionState.isActive && !window.myRole.includes('Actor') && !window.myRole.includes('Participant')) {\n      setSubscriptions(callObject, 'Shadow1');\n    } else {\n      setSubs();\n    }\n  }\n\n  function togglePractice() {\n    let recipientA = window.sessionState.roleOf.Actor1 && window[window.sessionState.roleOf.Actor1 + '_SessionID'];\n    let recipientB = window.sessionState.roleOf.Actor2 && window[window.sessionState.roleOf.Actor2 + '_SessionID'];\n\n    if (window.sessionState.roleOf.Actor1 == window.myName) {\n      recipientA = 'me';\n    }\n\n    if (window.sessionState.roleOf.Actor2 == window.myName) {\n      recipientB = 'me';\n    }\n\n    if (!recipientA && !recipientB) {\n      return;\n    }\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA\n    };\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    };\n\n    if (recipientA) {\n      if (recipientA != 'me') {\n        callObject.sendAppMessage(instructionsA, recipientA);\n      } else if (recipientA == 'me') {\n        audioPlayer(targetRecording, action);\n      }\n\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor1}`);\n    }\n\n    if (recipientB) {\n      if (recipientB != 'me') {\n        callObject.sendAppMessage(instructionsB, recipientB);\n      } else if (recipientB == 'me') {\n        audioPlayer(targetRecording + 'B', action);\n      }\n\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor2}`);\n    }\n\n    window.audioIsPlaying = !window.audioIsPlaying;\n    setPlayButtonText(!window.audioIsPlaying ? 'Play practice audio' : 'Pause practice audio');\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  /* // Play practice audio for users */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 16\n    }\n  }), \"Buyer(s)\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer1\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer2\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Buyer3\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, \"Seller\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Seller\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selector-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, \"Seller's shadow(s)\", /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow1\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow2\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow3\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(RoleSelector, {\n    role: \"Shadow4\",\n    selectedRoles: \"selectedRoles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"session-toggle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    class: \"switch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"state\",\n    checked: sessionState.isActive,\n    onChange: toggleSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"slider round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 25\n    }\n  }, \"Session active\")));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/AdminPanel/AdminPanel.js"],"names":["React","useContext","useEffect","useState","CallObjectContext","logDailyEvent","setSubscriptions","audioPlayer","RoleSelector","SessionStateContext","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","AdminPanel","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","session","sessionState","setSessionState","setSubs","forceUpdate","window","updateAdminPanel","playButtonText","setPlayButtonText","targetRecording","setTargetRecording","events","event","on","setTimeout","cleanup","off","sendState","console","log","sendAppMessage","toggleSessionActive","prevState","isActive","myRole","includes","togglePractice","recipientA","roleOf","Actor1","recipientB","Actor2","myName","action","audioIsPlaying","instructionsA","type","target","recipient","instructionsB","handleNewParticipantsState"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport RoleSelector from '../RoleSelector/RoleSelector';\nimport SessionStateContext from '../../SessionStateContext';\n\n// import { sendState } from '../AdminPanel/AdminFunctions'\n// import SessionContext from '../../SessionContext';\n\n\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext);\n  // const [sessionState, setSessionState ] = useContext(SessionContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const setSubs = () => {setSubscriptions(callObject)};  \n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel=forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play practice audio');\n  const [targetRecording, setTargetRecording] = useState('monologue1') ///////HAVE TO CHANGE THIS IN TWO PLACES\n\n  useEffect(() => {           //listen for participants leaving or joining and update component\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-left',\n      'joined-meeting',\n    ];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(()=>forceUpdate(),100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(()=>forceUpdate(),100));\n      }\n    };\n\n  }, [callObject]);\n\n\n\nconst sendState = () => {\n    console.log (\"Sending current state...\");\n    callObject.sendAppMessage(window.sessionState, '*'); \n}\n\n  useEffect(()=> {\n    window.sendState = sendState;\n  },[sendState]);\n\n\n  function toggleSessionActive() {\n    setSessionState((prevState)=>({\n      ...prevState,\n      isActive: !prevState.isActive\n      }));\n    window.sessionState.isActive=!window.sessionState.isActive;\n    sendState();\n    if (window.sessionState.isActive && !window.myRole.includes('Actor') && !window.myRole.includes('Participant')) {\n      setSubscriptions(callObject,'Shadow1')\n    }\n    else {\n      setSubs();\n\n    }\n  }\n\n  function togglePractice() {\n    let recipientA = window.sessionState.roleOf.Actor1 && window[window.sessionState.roleOf.Actor1 + '_SessionID'];\n    let recipientB = window.sessionState.roleOf.Actor2 && window[window.sessionState.roleOf.Actor2 + '_SessionID'];\n    if(window.sessionState.roleOf.Actor1==window.myName) {recipientA='me'}\n    if(window.sessionState.roleOf.Actor2==window.myName) {recipientB='me'}\n\n    if (!recipientA && !recipientB) {return}\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA,\n    }\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    }\n\n    if (recipientA) {\n      if(recipientA!='me') {\n        callObject.sendAppMessage(instructionsA,recipientA);\n      }\n      else if(recipientA=='me') {\n        audioPlayer(targetRecording,action);\n      }\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor1}`);\n    }\n    if (recipientB) {\n      if(recipientB!='me') {\n        callObject.sendAppMessage(instructionsB,recipientB);\n      }\n      else if(recipientB=='me') {\n        audioPlayer(targetRecording+'B',action);\n      }\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor2}`);\n    }\n      \n    window.audioIsPlaying=(!window.audioIsPlaying);\n    setPlayButtonText(!window.audioIsPlaying ? 'Play practice audio' : 'Pause practice audio');\n\n\n  }\n\n\n\n\n  \n\n                  \n         \n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n\n    /* // Play practice audio for users */\n\n    \n\n  return (\n\n        <div className=\"admin-panel\">\n\n\n      {/* <p style={{fontSize:'20px',weight:'bolder'}}>Roles</p> */}\n        <div className=\"selector-box\">\n          <br/><br/>\n            Buyer(s)\n            <RoleSelector \n              role=\"Buyer1\"\n              selectedRoles='selectedRoles'\n            />\n            <RoleSelector \n              role=\"Buyer2\"\n              selectedRoles='selectedRoles'\n            />\n            <RoleSelector \n              role=\"Buyer3\"\n              selectedRoles='selectedRoles'\n            />\n        </div>\n        \n        <div className=\"selector-box\">\n            Seller\n            \n            <RoleSelector \n                role=\"Seller\"\n                selectedRoles='selectedRoles'\n              />\n        </div>\n\n        <div className=\"selector-box\">\n\n          Seller's shadow(s)\n            <RoleSelector \n                role=\"Shadow1\"\n                selectedRoles='selectedRoles'\n              />\n              <RoleSelector \n                role=\"Shadow2\"\n                selectedRoles='selectedRoles'\n              />\n              <RoleSelector \n                role=\"Shadow3\"\n                selectedRoles='selectedRoles'\n              />\n              <RoleSelector \n                role=\"Shadow4\"\n                selectedRoles='selectedRoles'\n              />\n\n          </div>\n\n\n          {/* <!-- start / stop session --> */}\n        <div className='session-toggle'>\n                        <label class=\"switch\">\n                            <input type=\"checkbox\" id='state' checked={sessionState.isActive} onChange={toggleSessionActive}/>\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <p>Session active</p>\n        </div>\n\n\n\n\n                \n\n\n        </div>\n\n    \n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}