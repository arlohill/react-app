{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Livestorm/AppLivestorm/AppLivestorm.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen'; // import HairCheck from '../../General/Haircheck/Haircheck';\n\nimport api from '../../../apiLivestormTesting';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../../urlUtils';\nimport Daily from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../../logUtils';\nimport setSubscriptions from '../../../hooks/setSubscriptions';\nimport audioPlayer from '../../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n    type: 'sessionState',\n    isKnown: false,\n    isActive: false,\n    AdminVisible: false,\n    hasAnUpdate: false,\n    roleOf: {\n      Buyer1: '',\n      Buyer2: '',\n      Buyer3: '',\n      Buyer4: '',\n      Seller: '',\n      Shadow1: '',\n      Shadow2: '',\n      Shadow3: '',\n      Shadow4: '',\n      Shadow5: '',\n      Shadow6: ''\n    },\n    chatHistory: []\n  });\n  const [myState, setMyState] = useState({\n    name: 'Username',\n    role: window.myRole,\n    sidebar: true,\n    amAdmin: true,\n    //LIVESTORM PILOT CHANGE: setting all users to admin — otherwise change to: window.amAdmin\n    userList: {\n      names: [],\n      sessionIdFor: {}\n    },\n    adminPresent: false,\n    viewMode: null,\n    audioIsPlaying: false,\n    camOnAtSessionStart: null,\n    micOnAtSessionStart: null,\n    number: null\n  });\n\n  const setName = newName => {\n    setMyState(prev => ({ ...prev,\n      name: newName\n    }));\n  };\n\n  const setSidebar = boolean => {\n    setMyState(prev => ({ ...prev,\n      sidebar: boolean\n    }));\n  };\n\n  const setViewMode = newViewMode => {\n    setMyState(prev => ({ ...prev,\n      viewMode: newViewMode\n    }));\n  };\n\n  const setRole = newRole => {\n    setMyState(prev => ({ ...prev,\n      role: newRole\n    }));\n  };\n\n  const setUserList = newUserList => {\n    setMyState(prev => ({ ...prev,\n      userList: newUserList\n    }));\n  };\n\n  const setAmAdmin = boolean => {\n    setMyState(prev => ({ ...prev,\n      amAdmin: boolean\n    }));\n  };\n\n  const setAdminPresent = boolean => {\n    setMyState(prev => ({ ...prev,\n      adminPresent: boolean\n    }));\n  };\n\n  const setMicOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      micOnAtSessionStart: boolean\n    }));\n  };\n\n  const setCamOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      camOnAtSessionStart: boolean\n    }));\n  };\n\n  const setNumber = newNum => {\n    setMyState(prev => ({ ...prev,\n      number: newNum\n    }));\n  }; //check password\n  // if (!window.pass.includes(window.myP)) {\n  //   //redirect if password is wrong\n  //   window.location.href = \"http://secondbody.co\"\n  // }\n\n  /**\n   * Creates a new call room.\n   */\n\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    const join = async () => {\n      const newCallObject = Daily.createCallObject({\n        subscribeToTracksAutomatically: false\n      });\n      setRoomUrl(url);\n      setCallObject(newCallObject);\n      setAppState(STATE_JOINING);\n      ``; //await <--- if used on setUserName, it never returns\n\n      await newCallObject.startCamera();\n      newCallObject.setUserName('Ted Lasso');\n      await newCallObject.join({\n        url,\n        audioSource: window.initialInputs[0],\n        videoSource: window.initialInputs[1]\n      });\n      /**\n       * COMMENTED OUT FOR TESTING\n      */\n      // if(window.initialInputs) {\n      //   console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n      //   //await <--- if used on setUserName, it never returns\n      //   newCallObject.setUserName(myState.name);\n      //   await newCallObject.join({  //userName:myState.name, \n      //                         url, \n      //                         audioSource: window.initialInputs[0],\n      //                         videoSource:window.initialInputs[1],\n      //                         }); \n      // } else {\n      //   navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n      //     if(mediaStream){\n      //       let localAudio = mediaStream.getAudioTracks();\n      //       let localVideo = mediaStream.getVideoTracks();\n      //       if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n      //           {\n      //             newCallObject.join({ userName:myState.name, url, audioSource: localAudio[0], videoSource:localVideo[0]});\n      //           }\n      //     }else{\n      //       //message e.g. you need a mic to join\n      //     }\n      //   })\n      // }\n\n      console.log('joining the call as ' + myState.name);\n      const pageUrl = pageUrlFromRoomUrl(roomUrl) + '&N=' + myState.name + '&R=' + myState.role;\n    };\n\n    join();\n  }, [myState.name]);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording(); // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl = pageUrl; // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n    //append role to URL — LIVESTORM PILOT CHANGE: TOOK THIS OUT\n    // if (myState.role) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&R=' + window.myRole;\n    //   }else{\n    //     pageUrl += '?R=' + window.myRole;\n    //   }\n    // }\n\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&P=' + window.myP;\n      } else {\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]);\n  /**\n  * Attach myState object to window for debugging purposes.\n  */\n\n  useEffect(() => {\n    window.myState = myState;\n  }, [myState]);\n  /**\n  * Attach userList to window for debugging\n  */\n\n  useEffect(() => {\n    window.userList = myState.userList;\n  }, [myState.userList]);\n  /**\n    * Attach sessionState to window for debugging\n    */\n\n  useEffect(() => {\n    window.sessionState = sessionState;\n  }, [sessionState]);\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    window.record = () => {\n      callObject.startRecording();\n    };\n\n    window.stop = () => {\n      callObject.stopRecording();\n    };\n  }, [appState]); //Ask for State when Admin becomes present and State is not known\n\n  useEffect(() => {\n    let stateRequest;\n\n    if (!callObject) {\n      return;\n    }\n\n    if (!sessionState.isKnown && myState.adminPresent) {\n      stateRequest = setInterval(getState, 1000);\n\n      function getState() {\n        if (sessionState.isKnown) {\n          clearInterval(stateRequest);\n          return;\n        }\n\n        callObject.sendAppMessage(\"State please?\", '*');\n        console.log('Requesting meeting state...');\n      }\n    } //cleanup before useEffect runs the next time\n\n\n    return function cleanup() {\n      stateRequest && clearInterval(stateRequest);\n    };\n  }, [sessionState.isKnown, myState.adminPresent]);\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error', 'participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          }); // window.userList.push(window.myName);\n\n          console.log('*****JOINED MEETING');\n\n          if (myState.name == \"\") {\n            callObject.leave();\n          } // useUpdateUserList().then((isAnAdminPresent)=>{\n          //   if(window.myRole==\"Admin\") {\n          //     setSessionState(prev=>({\n          //       ...prev,\n          //       isKnown: isAnAdminPresent ? false : true\n          //     }))\n          //   }\n          // })\n\n\n          if (!window.sessionState.isKnown) {// if (window.myRole==\"Admin\") {\n            //   checkIfAdminPresent().then((anAdminIsPresent)=> {\n            //     setAdminPresent(anAdminIsPresent);\n            //     setSessionState(prev=>({\n            //       ...prev,\n            //       isKnown: anAdminIsPresent ? false : true,\n            //     }));                              //if there's already another admin, make session state 'not known'; otherwise make 'known'\n            //     anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n            //     // if (anAdminIsPresent) {\n            //     //   window.stateRequest = setInterval(()=>{getState()},2500);\n            //     // }\n            //   })\n            // } \n            // else {\n            //   // window.stateRequest = setInterval(()=>{getState()},2500);\n            // }\n          }\n\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n\n        case 'participant-joined':\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          let newSessionState = e.data;\n          newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n\n          setSessionState(newSessionState);\n        } //TODO AUDIO TEST\n        else if (e.data.constructor === Object && e.data.type == \"instructions\" && e.data.recipient == callObject.participants().local.session_id) {\n            audioPlayer(e.data.target, e.data.action);\n          } else if (e.data == \"State please?\") {\n            console.log('*******Received state request, and sessionState.isKnown: ' + sessionState.isKnown);\n\n            if (myState.amAdmin && sessionState.isKnown) {\n              console.log(\"Sending current state...\");\n              callObject.sendAppMessage(sessionState, '*');\n            }\n          }\n      }\n    } //end handleAppMessage\n\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, sessionState]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SessionStateContext.Provider, {\n    value: {\n      session: [sessionState, setSessionState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      myStateArray: [myState, setMyState],\n      setName: setName,\n      setRole: setRole,\n      setSidebar: setSidebar,\n      setUserList: setUserList,\n      setViewMode: setViewMode,\n      setCamOnAtSessionStart: setCamOnAtSessionStart,\n      setMicOnAtSessionStart: setMicOnAtSessionStart,\n      setAdminPresent: setAdminPresent,\n      setAmAdmin: setAmAdmin,\n      setNumber: setNumber\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 9\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 13\n    }\n  }), myState.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 18\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 10\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/src/components/Livestorm/AppLivestorm/AppLivestorm.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionStateContext","MyContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","Daily","logDailyEvent","setSubscriptions","audioPlayer","AdminPanel","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","AppLivestorm","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","sessionState","setSessionState","type","isKnown","isActive","AdminVisible","hasAnUpdate","roleOf","Buyer1","Buyer2","Buyer3","Buyer4","Seller","Shadow1","Shadow2","Shadow3","Shadow4","Shadow5","Shadow6","chatHistory","myState","setMyState","name","role","window","myRole","sidebar","amAdmin","userList","names","sessionIdFor","adminPresent","viewMode","audioIsPlaying","camOnAtSessionStart","micOnAtSessionStart","number","setName","newName","prev","setSidebar","boolean","setViewMode","newViewMode","setRole","newRole","setUserList","newUserList","setAmAdmin","setAdminPresent","setMicOnAtSessionStart","setCamOnAtSessionStart","setNumber","newNum","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","join","newCallObject","createCallObject","subscribeToTracksAutomatically","startCamera","setUserName","audioSource","initialInputs","videoSource","pageUrl","startLeavingCall","stopRecording","destroy","initialize","leave","myP","indexOf","location","href","history","replaceState","record","startRecording","stop","stateRequest","setInterval","getState","clearInterval","sendAppMessage","cleanup","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","on","off","handleAppMessage","e","fromId","data","constructor","Object","newSessionState","recipient","participants","local","session_id","target","action","showCall","includes","session","myStateArray"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\n// import HairCheck from '../../General/Haircheck/Haircheck';\nimport api from '../../../apiLivestormTesting';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext'\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../../urlUtils';\nimport Daily from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../../logUtils';\nimport setSubscriptions from '../../../hooks/setSubscriptions';\nimport audioPlayer from '../../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\n\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\n\n\n\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n                                                    type: 'sessionState',\n                                                    isKnown:false,\n                                                    isActive:false,\n                                                    AdminVisible:false,\n                                                    hasAnUpdate: false,\n                                                    roleOf: {\n                                                              Buyer1: '',\n                                                              Buyer2: '',\n                                                              Buyer3: '',\n                                                              Buyer4: '',\n                                                              Seller: '',\n                                                              Shadow1: '',\n                                                              Shadow2: '',\n                                                              Shadow3: '',\n                                                              Shadow4: '',\n                                                              Shadow5: '',\n                                                              Shadow6: '',\n                                                            },\n                                                    chatHistory:[],\n                                                    });\n\n\n  const [myState, setMyState] = useState({\n                                name: 'Username',\n                                role: window.myRole,\n                                sidebar:true,\n                                amAdmin: true,   //LIVESTORM PILOT CHANGE: setting all users to admin — otherwise change to: window.amAdmin\n                                userList: {\n                                  names:[],\n                                  sessionIdFor: {},\n                                },\n                                adminPresent: false,\n                                viewMode: null,\n                                audioIsPlaying: false,\n                                camOnAtSessionStart: null,\n                                micOnAtSessionStart: null,\n                                number: null,\n                              });\n\n  const setName = (newName) => {\n    setMyState(prev=>({\n      ...prev,\n      name: newName,\n    }));\n  };\n\n  const setSidebar = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      sidebar: boolean,\n    }));\n  }\n\n  const setViewMode = (newViewMode) => {\n    setMyState(prev=>({\n      ...prev,\n      viewMode:newViewMode,\n    }));\n  };\n\n  const setRole = (newRole) => {\n    setMyState(prev=>({\n      ...prev,\n      role:newRole,\n    }));\n  };\n\n  const setUserList = (newUserList) => {\n    setMyState(prev=>({\n      ...prev,\n      userList:newUserList,\n    }));\n  };\n\n  const setAmAdmin = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      amAdmin:boolean,\n    }));\n  };\n\n  const setAdminPresent = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      adminPresent:boolean,\n    }));\n  };\n\n  const setMicOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      micOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setCamOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      camOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setNumber = (newNum) => {\n    setMyState(prev=>({\n      ...prev,\n      number: newNum,\n    }));\n  };\n\n  \n\n //check password\n\n  // if (!window.pass.includes(window.myP)) {\n  //   //redirect if password is wrong\n  //   window.location.href = \"http://secondbody.co\"\n  // }\n\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n  const startJoiningCall = useCallback((url) => {\n\n    const join = async() => {\n      const newCallObject = Daily.createCallObject({ \n        subscribeToTracksAutomatically: false, \n      });\n      setRoomUrl(url);\n      setCallObject(newCallObject);\n      setAppState(STATE_JOINING); ``\n\n      //await <--- if used on setUserName, it never returns\n      await newCallObject.startCamera();\n      \n      newCallObject.setUserName('Ted Lasso');\n\n      await newCallObject.join({\n                            url, \n                            audioSource: window.initialInputs[0],\n                            videoSource:window.initialInputs[1],\n                            }); \n\n\n\n     /**\n      * COMMENTED OUT FOR TESTING\n     */\n\n      // if(window.initialInputs) {\n      //   console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n      //   //await <--- if used on setUserName, it never returns\n      //   newCallObject.setUserName(myState.name);\n      //   await newCallObject.join({  //userName:myState.name, \n      //                         url, \n      //                         audioSource: window.initialInputs[0],\n      //                         videoSource:window.initialInputs[1],\n      //                         }); \n      // } else {\n      //   navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n      //     if(mediaStream){\n      //       let localAudio = mediaStream.getAudioTracks();\n      //       let localVideo = mediaStream.getVideoTracks();\n      //       if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n      //           {\n      //             newCallObject.join({ userName:myState.name, url, audioSource: localAudio[0], videoSource:localVideo[0]});\n      //           }\n      //     }else{\n      //       //message e.g. you need a mic to join\n      //     }\n      //   })\n      // }\n\n\n\n      console.log('joining the call as ' + myState.name); \n      const pageUrl = pageUrlFromRoomUrl(roomUrl)+'&N='+myState.name+'&R='+myState.role;\n     \n    }\n    \n    join();\n    \n  }, [myState.name]); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording();   // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();    \n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl=pageUrl;\n    \n    // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n\n    //append role to URL — LIVESTORM PILOT CHANGE: TOOK THIS OUT\n    // if (myState.role) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&R=' + window.myRole;\n    //   }else{\n    //     pageUrl += '?R=' + window.myRole;\n    //   }\n    // }\n    \n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&P=' + window.myP;\n      }else{\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); \n\n    /**\n   * Attach myState object to window for debugging purposes.\n   */\n     useEffect(() => {\n      window.myState = myState;\n    }, [myState]); \n\n     /**\n   * Attach userList to window for debugging\n   */\n  useEffect (()=> {\n    window.userList=myState.userList;\n  },[myState.userList])\n\n /**\n   * Attach sessionState to window for debugging\n   */\n  useEffect(()=> {\n    window.sessionState=sessionState;\n},[sessionState]);\n\nuseEffect(()=>{\n  if (!callObject) {return;}\n  window.record = () => {\n    callObject.startRecording();\n  }\n  window.stop = () => {\n    callObject.stopRecording();\n  }\n},[appState]);\n\n\n\n  \n//Ask for State when Admin becomes present and State is not known\nuseEffect(()=>{\n  let stateRequest;\n  if(!callObject) {return;}\n  if(!sessionState.isKnown && myState.adminPresent) {\n    stateRequest = setInterval(getState,1000);\n    function getState() {\n      if (sessionState.isKnown) {\n        clearInterval(stateRequest);            \n        return;\n      }\n      callObject.sendAppMessage(\"State please?\", '*'); \n      console.log('Requesting meeting state...');\n    }\n  }\n  //cleanup before useEffect runs the next time\n  return function cleanup() {\n    stateRequest && clearInterval(stateRequest);\n  }\n\n},[sessionState.isKnown,myState.adminPresent]);\n\n\n\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error','participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          // window.userList.push(window.myName);\n          console.log('*****JOINED MEETING');\n          if(myState.name==\"\"){callObject.leave();}\n\n\n          // useUpdateUserList().then((isAnAdminPresent)=>{\n          //   if(window.myRole==\"Admin\") {\n          //     setSessionState(prev=>({\n          //       ...prev,\n          //       isKnown: isAnAdminPresent ? false : true\n          //     }))\n          //   }\n          // })\n          if (!window.sessionState.isKnown) {\n\n            // if (window.myRole==\"Admin\") {\n            //   checkIfAdminPresent().then((anAdminIsPresent)=> {\n            //     setAdminPresent(anAdminIsPresent);\n            //     setSessionState(prev=>({\n            //       ...prev,\n            //       isKnown: anAdminIsPresent ? false : true,\n            //     }));                              //if there's already another admin, make session state 'not known'; otherwise make 'known'\n            //     anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n            //     // if (anAdminIsPresent) {\n            //     //   window.stateRequest = setInterval(()=>{getState()},2500);\n            //     // }\n            //   })\n\n            // } \n            // else {\n            //   // window.stateRequest = setInterval(()=>{getState()},2500);\n            // }\n          }\n          \n\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n        case 'participant-joined':\n\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n            let newSessionState = e.data;\n            newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n            setSessionState(newSessionState);\n                \n            }\n\n            //TODO AUDIO TEST\n            else if (e.data.constructor === Object && e.data.type==\"instructions\" && e.data.recipient==callObject.participants().local.session_id) {\n              audioPlayer(e.data.target,e.data.action)\n            }\n\n\n            else if (e.data==\"State please?\") {\n              console.log('*******Received state request, and sessionState.isKnown: ' + sessionState.isKnown);\n              if (myState.amAdmin && sessionState.isKnown) {\n                console.log (\"Sending current state...\");\n                callObject.sendAppMessage(sessionState, '*'); \n              }\n            } \n          }\n      \n      \n    } //end handleAppMessage\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject,sessionState]);\n\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n\n\n\n  return (\n\n\n    <div className=\"app\">\n      <SessionStateContext.Provider \n      value={{session: [sessionState,setSessionState]}}\n      >\n        <MyContext.Provider \n        value={{\n        myStateArray: [myState,setMyState], \n        setName: setName, \n        setRole: setRole, \n        setSidebar: setSidebar,\n        setUserList: setUserList,\n        setViewMode: setViewMode, \n        setCamOnAtSessionStart: setCamOnAtSessionStart, \n        setMicOnAtSessionStart: setMicOnAtSessionStart,\n        setAdminPresent: setAdminPresent,\n        setAmAdmin: setAmAdmin,\n        setNumber: setNumber,\n        }}\n        >\n\n        {(showCall) ? (\n          // NOTE: for an app this size, it's not obvious that using a Context\n          // is the best choice. But for larger apps with deeply-nested components\n          // that want to access call object state and bind event listeners to the\n          // call object, this can be a helpful pattern.\n          <CallObjectContext.Provider value={callObject}>\n\n            <Call roomUrl={roomUrl} />\n            <Tray\n              onClickLeaveCall={startLeavingCall}\n            />\n            {myState.amAdmin && \n                (<AdminPanel/>)\n            }\n          </CallObjectContext.Provider>\n        ) : (\n         <StartScreen\n            // disabled={!enableStartButton}\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          />\n         \n        )}\n        {/* <HairCheck\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          /> */}\n        </MyContext.Provider>\n      </SessionStateContext.Provider>\n    </div>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}