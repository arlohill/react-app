{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Errors\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base errors path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/errors';\n/**\n * Errors Class - Provides access to the Mux Data Errors API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of playback errors filtered by the windows operating system\n * Data.Errors.list({ filters: ['operating_system:windows'] });\n */\n\nvar Errors = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Errors, _Base);\n\n  var _super = _createSuper(Errors);\n\n  function Errors() {\n    _classCallCheck(this, Errors);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Errors, [{\n    key: \"list\",\n\n    /**\n     * Returns a list of playback errors\n     *\n     * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Data } = new Mux(accessToken, secret);\n     *\n     * // Returns a list of playback errors filtered by the windows operating system\n     * Data.Errors.list({ filters: ['operating_system:windows'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-errors\n     */\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n  }]);\n\n  return Errors;\n}(Base);\n\nmodule.exports = Errors;","map":null,"metadata":{},"sourceType":"script"}