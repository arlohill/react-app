{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base asset path for the Mux API\n * */\n\n\nvar PATH = '/video/v1/uploads';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nvar buildBasePath = function buildBasePath(uploadId) {\n  return \"\".concat(PATH, \"/\").concat(uploadId);\n};\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\n\n\nvar Uploads = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Uploads, _Base);\n\n  var _super = _createSuper(Uploads);\n\n  function Uploads() {\n    _classCallCheck(this, Uploads);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Uploads, [{\n    key: \"create\",\n\n    /**\n     * Creates a direct upload with the specified JSON parameters\n     * @extends Base\n     * @param {Object} params - Upload JSON parameters (e.g timeout)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Video } = muxClient;\n     *\n     * // Create a new upload\n     * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n     * // Now push a file to the URL returned.\n     * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-direct-upload\n     */\n    value: function create(params) {\n      if (!params) {\n        return Promise.reject(new Error('Params are required for creating a direct upload'));\n      }\n\n      return this.http.post(PATH, params);\n    }\n    /**\n     * Cancels an upload\n     * @param {string} uploadId - The ID for the upload intended for cancellation\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Cancels an upload\n     * Video.Uploads.cancel(uploadId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/cancel-direct-upload\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(uploadId) {\n      if (!uploadId) {\n        return Promise.reject(new Error('An upload ID is required'));\n      }\n\n      return this.http.put(\"\".concat(buildBasePath(uploadId), \"/cancel\"));\n    }\n    /**\n     * Get an upload\n     * @param {string} uploadId - The ID for the upload\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get an upload\n     * Video.Uploads.get(uploadId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-direct-upload\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(uploadId) {\n      if (!uploadId) {\n        return Promise.reject(new Error('An upload ID is required to get an asset'));\n      }\n\n      return this.http.get(buildBasePath(uploadId));\n    }\n    /**\n     * List all uploads\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // List all uploads\n     * Video.Uploads.list();\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/list-direct-uploads\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n  }]);\n\n  return Uploads;\n}(Base);\n\nmodule.exports = Uploads;","map":null,"metadata":{},"sourceType":"script"}