{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Incidents\n * Copyright(c) 2019 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base incidents path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/incidents';\n/**\n * Incidents Class - Provides access to the Mux Data Incidents API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of all open incidents\n * Data.Incidents.list({ status: 'open' });\n */\n\nvar Incidents = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Incidents, _Base);\n\n  var _super = _createSuper(Incidents);\n\n  function Incidents() {\n    _classCallCheck(this, Incidents);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Incidents, [{\n    key: \"list\",\n\n    /**\n     * Returns a list of all open incidents\n     *\n     * @param {Object} [params] - example { status: 'open', severity: 'warning' }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Data } = new Mux(accessToken, secret);\n     *\n     * // Returns a list of all open incidents\n     * Data.Incidents.list({ status: 'open' });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-incidents\n     */\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n    /**\n     * Returns the details for a single incident\n     *\n     * @param {string} incidentId - The ID for the incident\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * //Returns the details for a single incident\n     * Data.Incidents.get('ABCD1234');\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-incident\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(incidentId) {\n      if (!incidentId) {\n        throw new Error('An incident Id is required for incident details.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(incidentId));\n    }\n    /**\n     * Returns all the incidents that seem related to a specific incident\n     *\n     * @param {string} incidentId - The ID for the incident\n     * @param {Object} [params] - example { measurement: 'median' }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * //Returns all the incidents that seem related to a specific incident\n     * Data.Incidents.related('ABCD1234');\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-related-incidents\n     */\n\n  }, {\n    key: \"related\",\n    value: function related(incidentId, params) {\n      if (!incidentId) {\n        throw new Error('An incident Id is required for related incidents.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(incidentId, \"/related\"), {\n        params: params\n      });\n    }\n  }]);\n\n  return Incidents;\n}(Base);\n\nmodule.exports = Incidents;","map":null,"metadata":{},"sourceType":"script"}