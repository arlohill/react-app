{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Signing Keys\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base signing-key path for the Mux API\n * */\n\n\nvar PATH = '/video/v1/signing-keys';\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\n\nvar buildBasePath = function buildBasePath(keyId) {\n  return \"\".concat(PATH, \"/\").concat(keyId);\n};\n/**\n * Signing Key Class - Provides access to the Mux Video Signing Key API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create a new signing key\n * Video.SigningKeys.create();\n */\n\n\nvar SigningKeys = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(SigningKeys, _Base);\n\n  var _super = _createSuper(SigningKeys);\n\n  function SigningKeys() {\n    _classCallCheck(this, SigningKeys);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SigningKeys, [{\n    key: \"create\",\n\n    /**\n     * Creates a new Signing Key that can be used with the JWT module to sign URLs.\n     * @extends Base\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Video } = muxClient;\n     *\n     * // Create a new signing key\n     * Video.SigningKeys.create();\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/create-url-signing-key\n     */\n    value: function create() {\n      return this.http.post(PATH, {});\n    }\n    /**\n     * Get a signing key. *Note* The private key is _not_ returned.\n     * @param {string} keyId - The ID for the signing key\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Get a signing key\n     * Video.SigningKeys.get(keyId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/get-url-signing-key\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(keyId) {\n      if (!keyId) {\n        return Promise.reject(new Error('An signing key ID is required.'));\n      }\n\n      return this.http.get(buildBasePath(keyId));\n    }\n    /**\n     * Delete a signing key\n     * @param {string} keyId - The ID for the signing key\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // Delete a signing key\n     * Video.SigningKeys.del(keyId);\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/delete-url-signing-key\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(keyId) {\n      if (!keyId) {\n        return Promise.reject(new Error('An signing key ID is required.'));\n      }\n\n      return this.http.delete(buildBasePath(keyId));\n    }\n    /**\n     * List signing keys\n     * @param {string} keyId - The ID for the signing key\n     * @param {object} params - Object to include as query params\n     * @param {number} params.limit - Number of signing keys to return in the response\n     * @param {number} params.page - Page of signing keys to return (limit * page)\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const { Video } = new Mux(accessToken, secret);\n     *\n     * // List all signing keys\n     * Video.SigningKeys.list();\n     *\n     * @see https://docs.mux.com/api-reference/video#operation/list-url-signing-keys\n     */\n\n  }, {\n    key: \"list\",\n    value: function list() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n  }]);\n\n  return SigningKeys;\n}(Base);\n\nmodule.exports = SigningKeys;","map":null,"metadata":{},"sourceType":"script"}