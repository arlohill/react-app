{"ast":null,"code":"/*!\n * Mux Incidents\n * Copyright(c) 2019 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base incidents path for the Mux API\n * */\n\n\nconst PATH = '/data/v1/incidents';\n/**\n * Incidents Class - Provides access to the Mux Data Incidents API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of all open incidents\n * Data.Incidents.list({ status: 'open' });\n */\n\nclass Incidents extends Base {\n  /**\n   * Returns a list of all open incidents\n   *\n   * @param {Object} [params] - example { status: 'open', severity: 'warning' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of all open incidents\n   * Data.Incidents.list({ status: 'open' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-incidents\n   */\n  list(params) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n  /**\n   * Returns the details for a single incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single incident\n   * Data.Incidents.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-incident\n   */\n\n\n  get(incidentId) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for incident details.');\n    }\n\n    return this.http.get(`${PATH}/${incidentId}`);\n  }\n  /**\n   * Returns all the incidents that seem related to a specific incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @param {Object} [params] - example { measurement: 'median' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns all the incidents that seem related to a specific incident\n   * Data.Incidents.related('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-related-incidents\n   */\n\n\n  related(incidentId, params) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for related incidents.');\n    }\n\n    return this.http.get(`${PATH}/${incidentId}/related`, {\n      params\n    });\n  }\n\n}\n\nmodule.exports = Incidents;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/node_modules/@mux/mux-node/src/data/resources/incidents.js"],"names":["Base","require","PATH","Incidents","list","params","http","get","incidentId","Error","related","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,oBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBH,IAAxB,CAA6B;AAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,IAAI,CAACC,MAAD,EAAS;AACX,WAAO,KAAKC,IAAL,CAAUC,GAAV,CAAcL,IAAd,EAAoB;AAAEG,MAAAA;AAAF,KAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,GAAG,CAACC,UAAD,EAAa;AACd,QAAI,CAACA,UAAL,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,WAAO,KAAKH,IAAL,CAAUC,GAAV,CAAe,GAAEL,IAAK,IAAGM,UAAW,EAApC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACF,UAAD,EAAaH,MAAb,EAAqB;AAC1B,QAAI,CAACG,UAAL,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,WAAO,KAAKH,IAAL,CAAUC,GAAV,CAAe,GAAEL,IAAK,IAAGM,UAAW,UAApC,EAA+C;AAAEH,MAAAA;AAAF,KAA/C,CAAP;AACD;;AA9D0B;;AAiE7BM,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["/*!\n * Mux Incidents\n * Copyright(c) 2019 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base incidents path for the Mux API\n * */\nconst PATH = '/data/v1/incidents';\n\n/**\n * Incidents Class - Provides access to the Mux Data Incidents API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of all open incidents\n * Data.Incidents.list({ status: 'open' });\n */\nclass Incidents extends Base {\n  /**\n   * Returns a list of all open incidents\n   *\n   * @param {Object} [params] - example { status: 'open', severity: 'warning' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of all open incidents\n   * Data.Incidents.list({ status: 'open' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-incidents\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single incident\n   * Data.Incidents.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-incident\n   */\n  get(incidentId) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for incident details.');\n    }\n    return this.http.get(`${PATH}/${incidentId}`);\n  }\n\n  /**\n   * Returns all the incidents that seem related to a specific incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @param {Object} [params] - example { measurement: 'median' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns all the incidents that seem related to a specific incident\n   * Data.Incidents.related('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-related-incidents\n   */\n  related(incidentId, params) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for related incidents.');\n    }\n    return this.http.get(`${PATH}/${incidentId}/related`, { params });\n  }\n}\n\nmodule.exports = Incidents;\n"]},"metadata":{},"sourceType":"script"}