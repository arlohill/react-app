{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base exports path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/video-views';\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\n\nvar VideoViews = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(VideoViews, _Base);\n\n  var _super = _createSuper(VideoViews);\n\n  function VideoViews() {\n    _classCallCheck(this, VideoViews);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VideoViews, [{\n    key: \"list\",\n\n    /**\n     * Returns a list of video views for a property that occurred within the specified timeframe.\n     * Results are ordered by view_end, according to what you provide for order_direction.\n     *\n     * @extends Base\n     * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Returns a list of video views for a property that occurred within the specified timeframe.\n     * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-video-views\n     */\n    value: function list(params) {\n      return this.http.get(PATH, {\n        params: params\n      });\n    }\n    /**\n     * Returns the details for a single video view\n     *\n     * @param {string} videoViewId - The ID for the video view\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * //Returns the details for a single video view\n     * Data.VideoViews.get('ABCD1234');\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/get-video-view\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(videoViewId) {\n      if (!videoViewId) {\n        throw new Error('A video view Id is required for video view details.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(videoViewId));\n    }\n  }]);\n\n  return VideoViews;\n}(Base);\n\nmodule.exports = VideoViews;","map":null,"metadata":{},"sourceType":"script"}