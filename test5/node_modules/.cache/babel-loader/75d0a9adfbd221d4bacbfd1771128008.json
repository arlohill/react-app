{"ast":null,"code":"/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n/**\n * @private Base exports path for the Mux API\n * */\n\n\nconst PATH = '/data/v1/video-views';\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\n\nclass VideoViews extends Base {\n  /**\n   * Returns a list of video views for a property that occurred within the specified timeframe.\n   * Results are ordered by view_end, according to what you provide for order_direction.\n   *\n   * @extends Base\n   * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of video views for a property that occurred within the specified timeframe.\n   * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-video-views\n   */\n  list(params) {\n    return this.http.get(PATH, {\n      params\n    });\n  }\n  /**\n   * Returns the details for a single video view\n   *\n   * @param {string} videoViewId - The ID for the video view\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single video view\n   * Data.VideoViews.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-video-view\n   */\n\n\n  get(videoViewId) {\n    if (!videoViewId) {\n      throw new Error('A video view Id is required for video view details.');\n    }\n\n    return this.http.get(`${PATH}/${videoViewId}`);\n  }\n\n}\n\nmodule.exports = VideoViews;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/@mux/mux-node/src/data/resources/video_views.js"],"names":["Base","require","PATH","VideoViews","list","params","http","get","videoViewId","Error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,IAAI,GAAG,sBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBH,IAAzB,CAA8B;AAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,IAAI,CAACC,MAAD,EAAS;AACX,WAAO,KAAKC,IAAL,CAAUC,GAAV,CAAcL,IAAd,EAAoB;AAAEG,MAAAA;AAAF,KAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,GAAG,CAACC,WAAD,EAAc;AACf,QAAI,CAACA,WAAL,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,WAAO,KAAKH,IAAL,CAAUC,GAAV,CAAe,GAAEL,IAAK,IAAGM,WAAY,EAArC,CAAP;AACD;;AA1C2B;;AA6C9BE,MAAM,CAACC,OAAP,GAAiBR,UAAjB","sourcesContent":["/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/video-views';\n\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\nclass VideoViews extends Base {\n  /**\n   * Returns a list of video views for a property that occurred within the specified timeframe.\n   * Results are ordered by view_end, according to what you provide for order_direction.\n   *\n   * @extends Base\n   * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of video views for a property that occurred within the specified timeframe.\n   * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/list-video-views\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single video view\n   *\n   * @param {string} videoViewId - The ID for the video view\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single video view\n   * Data.VideoViews.get('ABCD1234');\n   *\n   * @see https://docs.mux.com/api-reference/data#operation/get-video-view\n   */\n  get(videoViewId) {\n    if (!videoViewId) {\n      throw new Error('A video view Id is required for video view details.');\n    }\n    return this.http.get(`${PATH}/${videoViewId}`);\n  }\n}\n\nmodule.exports = VideoViews;\n"]},"metadata":{},"sourceType":"script"}