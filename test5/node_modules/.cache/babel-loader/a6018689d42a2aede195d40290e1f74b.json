{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Chat/Chat.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport './Chat.css';\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray\n  } = useContext(MyContext);\n  const [myState] = myStateArray;\n  const chatHistory = sessionState.chatHistory;\n\n  const setChatHistory = newHistoryObject => {\n    setSessionState(prev => ({ ...prev,\n      chatHistory: [...prev.chatHistory, newHistoryObject]\n    }));\n  };\n\n  const lastMessage = React.createRef();\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (!inputValue) {\n      return;\n    }\n\n    callObject.sendAppMessage({\n      type: 'chat',\n      message: inputValue\n    }, '*');\n    const name = callObject.participants().local.user_name.includes('_Admin') ? callObject.participants().local.user_name.split('_Admin').join('') : callObject.participants().local.user_name;\n    setChatHistory({\n      sender: name,\n      message: inputValue\n    });\n    setInputValue('');\n  }\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name.includes('_Admin') ? participants[event.fromId].user_name.split('_Admin').join('') : participants[event.fromId].user_name;\n      event.data.type == 'chat' && setChatHistory({\n        sender: name,\n        message: event.data.message\n      }); // Make other icons light up\n\n      event.data.type == 'chat' && props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n  useEffect(() => {}, [chatHistory]);\n\n  function scrollToBottom() {\n    lastMessage.current && lastMessage.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatHistory]);\n  return props.onClickDisplay ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-history\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, chatHistory.map((entry, index, array) => entry.sender == myState.Name || entry.sender == myState.name.split('_Admin').join('') ? /*#__PURE__*/React.createElement(\"div\", {\n    key: `entry-${index}`,\n    className: \"my message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 24\n    }\n  }, entry.message) : entry.sender == array[index - 1].sender ? /*#__PURE__*/React.createElement(\"div\", {\n    key: `entry-${index}`,\n    className: \"received message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 31\n    }\n  }, entry.message) : /*#__PURE__*/React.createElement(\"div\", {\n    key: `entry-${index}`,\n    className: \"received message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 31\n    }\n  }, entry.sender), \": \", entry.message)), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    ref: lastMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"chatInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"chatInput\",\n    className: \"chat-input\",\n    type: \"text\",\n    placeholder: \"Type your message here..\",\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"send-chat-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Send\"))) : null;\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","MyContext","SessionStateContext","Chat","props","callObject","inputValue","setInputValue","session","sessionState","setSessionState","myStateArray","myState","chatHistory","setChatHistory","newHistoryObject","prev","lastMessage","createRef","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","type","message","name","participants","local","user_name","includes","split","join","sender","handleAppMessage","fromId","data","notification","on","cleanup","off","scrollToBottom","current","scrollIntoView","behavior","onClickDisplay","map","entry","index","array","Name","float","clear"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const {myStateArray}  = useContext(MyContext);\n  const [ myState ] = myStateArray;\n  const chatHistory = sessionState.chatHistory;\n  const setChatHistory = (newHistoryObject) => {\n    setSessionState((prev)=>({\n        ...prev,\n        chatHistory:\n          [\n            ...prev.chatHistory,\n            newHistoryObject,\n          ]\n    }))\n  };\n  const lastMessage = React.createRef();\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!inputValue) {return}\n    callObject.sendAppMessage({ type:'chat', message: inputValue }, '*');\n    const name = callObject.participants().local.user_name.includes('_Admin')\n      ? callObject.participants().local.user_name.split('_Admin').join('')\n      : callObject.participants().local.user_name;\n    setChatHistory(\n      {\n        sender: name,\n        message: inputValue,\n      },\n    );\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name.includes('_Admin')\n      ? participants[event.fromId].user_name.split('_Admin').join('')\n      : participants[event.fromId].user_name;\n      event.data.type=='chat'&& setChatHistory(\n        {\n          sender: name,\n          message: event.data.message,\n        }\n      );\n      // Make other icons light up\n      event.data.type=='chat'&& props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  function scrollToBottom() {\n    lastMessage.current && lastMessage.current.scrollIntoView({behavior:\"smooth\"});\n  }\n\n  useEffect(()=>{\n    scrollToBottom();\n  },[chatHistory])\n  \n  \n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n            <div>\n          \n            <div className=\"chat-history\">\n            {\n                chatHistory.map((entry, index, array) => (\n                  entry.sender == myState.Name || entry.sender == myState.name.split('_Admin').join('') \n                    ? \n                      \n                      (<div key={`entry-${index}`} className='my message'>\n                      {entry.message}\n                      </div>)\n\n                    :\n\n                      (\n                        entry.sender == array[index-1].sender \n                          ? \n\n                              <div key={`entry-${index}`} className='received message'>\n                                  {entry.message}\n                            </div>\n\n                          :\n\n                            <div key={`entry-${index}`} className='received message'>\n                              <b>{entry.sender}</b>: {entry.message}\n                            </div>\n                        \n                      )\n\n              ))}\n              <div style={{ float:\"left\", clear: \"both\" }}\n                ref={lastMessage}>\n              </div>\n          </div>\n          \n          </div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}