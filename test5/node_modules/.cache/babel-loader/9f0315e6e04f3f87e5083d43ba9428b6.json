{"ast":null,"code":"var _classCallCheck = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/arlosb/Documents/GitHub/new react app/test5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nvar Base = require('../../base');\n/**\n * @private Base filters path for the Mux API\n * */\n\n\nvar PATH = '/data/v1/filters';\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\n\nvar Filters = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(Filters, _Base);\n\n  var _super = _createSuper(Filters);\n\n  function Filters() {\n    _classCallCheck(this, Filters);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Filters, [{\n    key: \"get\",\n\n    /**\n     * Lists the values for a filter along with a total count of related views\n     *\n     * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n     * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Lists the values for a filter along with a total count of related views\n     * Data.Filters.get('browser', { timeframe: ['7:days'] });\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-filter-values\n     */\n    value: function get(filterId, params) {\n      if (!filterId) {\n        throw new Error('Filter Id is required to get filter information.');\n      }\n\n      return this.http.get(\"\".concat(PATH, \"/\").concat(filterId), {\n        params: params\n      });\n    }\n    /**\n     * Lists all the filters broken out into basic and advanced\n     * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n     *\n     * @example\n     * const muxClient = new Mux(accessToken, secret);\n     * const { Data } = muxClient;\n     *\n     * // Lists the available video view exports along with URLs to retrieve them\n     * Data.Filters.list();\n     *\n     * @see https://docs.mux.com/api-reference/data#operation/list-filters\n     */\n\n  }, {\n    key: \"list\",\n    value: function list() {\n      return this.http.get(PATH);\n    }\n  }]);\n\n  return Filters;\n}(Base);\n\nmodule.exports = Filters;","map":null,"metadata":{},"sourceType":"script"}