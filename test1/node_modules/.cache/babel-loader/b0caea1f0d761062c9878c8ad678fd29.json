{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/arlosb/Documents/GitHub/new react app/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useCallback}from'react';import Call from'../Call/Call';import StartButton from'../StartButton/StartButton';import api from'../../api';import'./App.css';import Tray from'../Tray/Tray';import CallObjectContext from'../../CallObjectContext';import{roomUrlFromPageUrl,pageUrlFromRoomUrl}from'../../urlUtils';import DailyIframe from'@daily-co/daily-js';import{logDailyEvent}from'../../logUtils';var STATE_IDLE='STATE_IDLE';var STATE_CREATING='STATE_CREATING';var STATE_JOINING='STATE_JOINING';var STATE_JOINED='STATE_JOINED';var STATE_LEAVING='STATE_LEAVING';var STATE_ERROR='STATE_ERROR';export default function App(){var _useState=useState(STATE_IDLE),_useState2=_slicedToArray(_useState,2),appState=_useState2[0],setAppState=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),roomUrl=_useState4[0],setRoomUrl=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),callObject=_useState6[0],setCallObject=_useState6[1];/**\n   * Creates a new call room.\n   */var createCall=useCallback(function(){setAppState(STATE_CREATING);return api.createRoom().then(function(room){return room.url;}).catch(function(error){console.log('Error creating room',error);setRoomUrl(null);setAppState(STATE_IDLE);});},[]);/**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */var startJoiningCall=useCallback(function(url){var newCallObject=DailyIframe.createCallObject();setRoomUrl(url);setCallObject(newCallObject);setAppState(STATE_JOINING);newCallObject.join({url:url});},[]);/**\n   * Starts leaving the current call.\n   */var startLeavingCall=useCallback(function(){if(!callObject)return;// If we're in the error state, we've already \"left\", so just clean up\nif(appState===STATE_ERROR){callObject.destroy().then(function(){setRoomUrl(null);setCallObject(null);setAppState(STATE_IDLE);});}else{setAppState(STATE_LEAVING);callObject.leave();}},[callObject,appState]);/**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */useEffect(function(){var url=roomUrlFromPageUrl();url&&startJoiningCall(url);},[startJoiningCall]);/**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */useEffect(function(){var pageUrl=pageUrlFromRoomUrl(roomUrl);if(pageUrl===window.location.href)return;window.history.replaceState(null,null,pageUrl);},[roomUrl]);/**\n   * Uncomment to attach call object to window for debugging purposes.\n   */ // useEffect(() => {\n//   window.callObject = callObject;\n// }, [callObject]);\n/**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */useEffect(function(){if(!callObject)return;var events=['joined-meeting','left-meeting','error'];function handleNewMeetingState(event){event&&logDailyEvent(event);switch(callObject.meetingState()){case'joined-meeting':setAppState(STATE_JOINED);break;case'left-meeting':callObject.destroy().then(function(){setRoomUrl(null);setCallObject(null);setAppState(STATE_IDLE);});break;case'error':setAppState(STATE_ERROR);break;default:break;}}// Use initial state\nhandleNewMeetingState();// Listen for changes in state\nfor(var _i=0,_events=events;_i<_events.length;_i++){var event=_events[_i];callObject.on(event,handleNewMeetingState);}// Stop listening for changes in state\nreturn function cleanup(){var _iterator=_createForOfIteratorHelper(events),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _event=_step.value;callObject.off(_event,handleNewMeetingState);}}catch(err){_iterator.e(err);}finally{_iterator.f();}};},[callObject]);/**\n   * Listen for app messages from other call participants.\n   */useEffect(function(){if(!callObject){return;}function handleAppMessage(event){if(event){logDailyEvent(event);console.log(\"received app message from \".concat(event.fromId,\": \"),event.data);}}callObject.on('app-message',handleAppMessage);return function cleanup(){callObject.off('app-message',handleAppMessage);};},[callObject]);/**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */var showCall=[STATE_JOINING,STATE_JOINED,STATE_ERROR].includes(appState);/**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */var enableCallButtons=[STATE_JOINED,STATE_ERROR].includes(appState);/**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */var enableStartButton=appState===STATE_IDLE;return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},showCall?/*#__PURE__*/ // NOTE: for an app this size, it's not obvious that using a Context\n// is the best choice. But for larger apps with deeply-nested components\n// that want to access call object state and bind event listeners to the\n// call object, this can be a helpful pattern.\nReact.createElement(CallObjectContext.Provider,{value:callObject},/*#__PURE__*/React.createElement(Call,{roomUrl:roomUrl}),/*#__PURE__*/React.createElement(Tray,{disabled:!enableCallButtons,onClickLeaveCall:startLeavingCall})):/*#__PURE__*/React.createElement(StartButton,{disabled:!enableStartButton,onClick:function onClick(){createCall().then(function(url){return startJoiningCall(url);});}}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/App/App.js"],"names":["React","useEffect","useState","useCallback","Call","StartButton","api","Tray","CallObjectContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","join","startLeavingCall","destroy","leave","pageUrl","window","location","href","history","replaceState","events","handleNewMeetingState","event","meetingState","on","cleanup","off","handleAppMessage","fromId","data","showCall","includes","enableCallButtons","enableStartButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartButton from '../StartButton/StartButton';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n\n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n  const startJoiningCall = useCallback((url) => {\n    const newCallObject = DailyIframe.createCallObject();\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({ url });\n  }, []);\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  // useEffect(() => {\n  //   window.callObject = callObject;\n  // }, [callObject]);\n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      if (event) {\n        logDailyEvent(event);\n        console.log(`received app message from ${event.fromId}: `, event.data);\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n  const enableStartButton = appState === STATE_IDLE;\n\n  return (\n    <div className=\"app\">\n      {showCall ? (\n        // NOTE: for an app this size, it's not obvious that using a Context\n        // is the best choice. But for larger apps with deeply-nested components\n        // that want to access call object state and bind event listeners to the\n        // call object, this can be a helpful pattern.\n        <CallObjectContext.Provider value={callObject}>\n          <Call roomUrl={roomUrl} />\n          <Tray\n            disabled={!enableCallButtons}\n            onClickLeaveCall={startLeavingCall}\n          />\n        </CallObjectContext.Provider>\n      ) : (\n        <StartButton\n          disabled={!enableStartButton}\n          onClick={() => {\n            createCall().then((url) => startJoiningCall(url));\n          }}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}