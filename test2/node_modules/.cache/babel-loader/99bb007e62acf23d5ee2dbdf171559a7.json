{"ast":null,"code":"// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\nexport default function setSubscriptions(callObject) {\n  console.log('Setting subscriptions...');\n  let subscribedTo = 0;\n  let currentSubs = []; //if session is active, set currentSubs according to my role\n\n  if (window.sessionState.isActive) {\n    switch (window.myRole) {\n      case 'Participant1':\n        currentSubs = [];\n        window.sessionState.roleOf.Actor2 && currentSubs.push(window.sessionState.roleOf.Actor2);\n        !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      case 'Participant2':\n        currentSubs = [];\n        window.sessionState.roleOf.Actor1 && currentSubs.push(window.sessionState.roleOf.Actor1);\n        !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1);\n        break;\n\n      case 'Actor1':\n        currentSubs = [];\n        window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2);\n        window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1 + '_AUDIO');\n        break;\n\n      case 'Actor2':\n        currentSubs = [];\n        window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2 + '_AUDIO');\n        break;\n\n      case 'Attendee':\n        currentSubs = [];\n        break;\n\n      default:\n        currentSubs = [];\n        break;\n    } //Add Admin to currentSubs if applicable\n\n\n    if (window.sessionState.AdminVisible) {\n      currentSubs.push(\"Admin\");\n    }\n  } //if NOT active, set audio-filtered subs for the Seconds\n  else if (!window.sessionState.isActive) {\n      let filteredSubs = [];\n\n      switch (window.myRole) {\n        case 'Actor1':\n          window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1 + '_AUDIO');\n          break;\n\n        case 'Actor2':\n          window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2 + '_AUDIO');\n          break;\n\n        default:\n          break;\n      }\n    }\n\n  function setTracks() {\n    return new Promise(resolve => {\n      //cycle through each participant in meeting\n      let ps = callObject.participants();\n      Object.keys(ps).forEach(p => {\n        let participant = ps[p];\n        let thisUserName = participant.user_name;\n\n        if (p === 'local') {\n          return;\n        }\n\n        console.log(\"This username is: \" + thisUserName); //If NOT ACTIVE, subscribe to everyone in the meeting\n\n        if (!window.sessionState.isActive) {\n          //audio only if currently Seconding\n          if (filteredSubs.contains(thisUserName)) {\n            console.log('Subscribing to audio for: ' + thisUserName);\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: {\n                audio: true,\n                video: false,\n                screenVideo: false\n              }\n            });\n          } else if (thisUserName != 'Admin') {\n            // && thisUserName!=mutedParticipant\n            console.log('Subscribing to: ' + thisUserName);\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: true\n            });\n            subscribedTo++;\n          } else if (thisUserName == 'Admin' && window.sessionState.AdminVisible) {\n            console.log('Subscribing to Admin:');\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: true\n            });\n            subscribedTo++;\n            console.log('Subscribed to session id: ' + participant.session_id);\n          }\n        } //IF ACTIVE, just subscribe to those listed in currentSubs;\n        else if (window.sessionState.isActive) {\n            if (currentSubs.includes(thisUserName + '_AUDIO')) {\n              console.log('Subscribing to audio only for: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: {\n                  audio: true,\n                  video: false,\n                  screenVideo: false\n                }\n              });\n            } else if (currentSubs.includes(thisUserName)) {\n              console.log('Subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } else if (!currentSubs.includes(thisUserName)) {\n              console.log('NOT subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: false\n              });\n            }\n          }\n      });\n      resolve();\n    });\n  }\n\n  setTracks().then(() => {//if no admin (or admin has left), start asking for state\n    // if (adminPresent==false) {\n    //     window.sessionState.isKnown=false;\n    //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n    //     stateRequest = setInterval(getState,2500);\n    //     console.log('no Admin present');\n    // }\n    // if (subscribedTo==0) {\n    //     window.isPopulated = false;\n    //     document.getElementById('empty-room').style.opacity='1';\n    //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n    //     if (window.sessionState.isActive==true) {\n    //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n    //     } else if (window.sessionState.isActive==false) {\n    //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n    //     }\n    // } else if (subscribedTo>0) {\n    //     window.isPopulated = true;\n    //     document.getElementById('empty-room').style.opacity='0';\n    //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n    //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n    //     }\n    // }\n  }); //print subscriptions\n\n  var iterator = currentSubs.values();\n  console.log(\"Currently subscribed to:\");\n\n  for (let elements of iterator) {\n    console.log(elements);\n  }\n\n  if (currentSubs.length < 1) {\n    console.log(\"No one.\");\n  }\n\n  window.setSubscriptions = setSubscriptions;\n  window.currentSubs = currentSubs;\n}\n;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/hooks/setSubscriptions.js"],"names":["setSubscriptions","callObject","console","log","subscribedTo","currentSubs","window","sessionState","isActive","myRole","roleOf","Actor2","push","Participant2","Actor1","Participant1","AdminVisible","filteredSubs","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","contains","updateParticipant","session_id","setSubscribedTracks","audio","video","screenVideo","includes","then","iterator","values","elements","length"],"mappings":"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","sourcesContent":["// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\n\nexport default function setSubscriptions(callObject) {\n\n    console.log('Setting subscriptions...');\n    let subscribedTo=0;\n    let currentSubs=[];\n    \n    //if session is active, set currentSubs according to my role\n    if (window.sessionState.isActive) {\n        switch (window.myRole) {\n            case 'Participant1':\n                currentSubs=[];\n                window.sessionState.roleOf.Actor2 && currentSubs.push(window.sessionState.roleOf.Actor2);\n                !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2);\n                break;\n            case 'Participant2':\n                currentSubs=[];\n                window.sessionState.roleOf.Actor1 && currentSubs.push(window.sessionState.roleOf.Actor1);\n                !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1);\n                break;\n            case 'Actor1':\n                currentSubs=[];\n                window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2);\n                window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');\n                break;\n            case 'Actor2':\n                currentSubs=[];\n                window.sessionState.roleOf.Participant1 && currentSubs.push(window.sessionState.roleOf.Participant1);\n                window.sessionState.roleOf.Participant2 && currentSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');\n                break;\n            case 'Attendee':\n                currentSubs=[];\n                break;\n            default:\n                currentSubs=[];\n                break;\n        }\n        //Add Admin to currentSubs if applicable\n        if (window.sessionState.AdminVisible) {\n        currentSubs.push (\"Admin\");\n    }\n    }\n\n    //if NOT active, set audio-filtered subs for the Seconds\n    else if (!window.sessionState.isActive) {\n        let filteredSubs=[];\n        switch (window.myRole) {\n            case 'Actor1':\n                window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');\n                break;\n            case 'Actor2':\n                window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');\n                break;\n            default:\n                break;\n        }\n    }\n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            Object.keys(ps).forEach((p) => {\n\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local') {\n                    return;\n                } \n\n\n\n                console.log(\"This username is: \" +thisUserName);\n                //If NOT ACTIVE, subscribe to everyone in the meeting\n                if (!window.sessionState.isActive) {\n\n                    //audio only if currently Seconding\n                    if (filteredSubs.contains(thisUserName)) {\n                        console.log('Subscribing to audio for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n\n\n                    else if (thisUserName!='Admin') {  // && thisUserName!=mutedParticipant\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    } else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n                        console.log('Subscribing to Admin:');\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                        console.log('Subscribed to session id: ' + participant.session_id);\n                    } \n\n                } \n\n                //IF ACTIVE, just subscribe to those listed in currentSubs;\n                else if (window.sessionState.isActive) {\n                    if(currentSubs.includes(thisUserName+'_AUDIO')) {\n                        console.log('Subscribing to audio only for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n                    else if(currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve()\n        })\n    }\n    \n    setTracks().then(()=>{\n        //if no admin (or admin has left), start asking for state\n        // if (adminPresent==false) {\n        //     window.sessionState.isKnown=false;\n        //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n        //     stateRequest = setInterval(getState,2500);\n        //     console.log('no Admin present');\n        // }\n        // if (subscribedTo==0) {\n        //     window.isPopulated = false;\n        //     document.getElementById('empty-room').style.opacity='1';\n        //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n        //     if (window.sessionState.isActive==true) {\n        //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n        //     } else if (window.sessionState.isActive==false) {\n        //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n\n        //     }\n        // } else if (subscribedTo>0) {\n        //     window.isPopulated = true;\n        //     document.getElementById('empty-room').style.opacity='0';\n        //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n        //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n        //     }\n\n        // }\n\n    })\n\n    //print subscriptions\n    var iterator = currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n\n  \n        window.setSubscriptions=setSubscriptions;\n        window.currentSubs=currentSubs;\n   \n};\n\n"]},"metadata":{},"sourceType":"module"}