{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./Tray.css';import TrayButton,{TYPE_MUTE_CAMERA,TYPE_MUTE_MIC,TYPE_SCREEN,TYPE_LEAVE,TYPE_CHAT}from'../TrayButton/TrayButton';import InputSelector from'../InputSelector/InputSelector';import Chat from'../Chat/Chat';import AdminPanel from'../AdminPanel/AdminPanel';import CallObjectContext from'../../CallObjectContext';import{logDailyEvent}from'../../logUtils';import DailyIframe from'@daily-co/daily-js';function useForceUpdate(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// integer state\nreturn function(){return setValue(function(value){return value+1;});};// update the state to force render\n}/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */function getStreamStates(callObject){var isCameraMuted,isMicMuted,isSharingScreen=false;if(callObject&&callObject.participants()&&callObject.participants().local){var localParticipant=callObject.participants().local;isCameraMuted=!localParticipant.video;isMicMuted=!localParticipant.audio;isSharingScreen=localParticipant.screen;}return[isCameraMuted,isMicMuted,isSharingScreen];}/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */export default function Tray(props){var callObject=useContext(CallObjectContext);var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCameraMuted=_useState4[0],setCameraMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isMicMuted=_useState6[0],setMicMuted=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isSharingScreen=_useState8[0],setSharingScreen=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),displayChat=_useState10[0],setChatDisplay=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),highlightedChat=_useState12[0],setChatHighlight=_useState12[1];var forceUpdate=useForceUpdate();var micCaret=React.createRef();var micSettings=React.createRef();var camCaret=React.createRef();var camSettings=React.createRef();window.updateTray=function(){forceUpdate();};var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),showMicSettings=_useState14[0],setShowMicSettings=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),showCamSettings=_useState16[0],setShowCamSettings=_useState16[1];function toggleCamera(){callObject.setLocalVideo(isCameraMuted);}function toggleMic(){callObject.setLocalAudio(isMicMuted);}useEffect(function(){document.addEventListener(\"mousedown\",handleClickOutside);return function cleanup(){document.removeEventListener(\"mousedown\",handleClickOutside);};});var handleClickOutside=function handleClickOutside(event){console.log('handling click');if(micSettings.current&&!micSettings.current.contains(event.target)&&!micCaret.current.contains(event.target)){setShowMicSettings(false);}else if(camSettings.current&&!camSettings.current.contains(event.target)&&!camCaret.current.contains(event.target)){setShowCamSettings(false);}};// function toggleSharingScreen() {\n//   isSharingScreen\n//     ? callObject.stopScreenShare()\n//     : navigator.mediaDevices.getDisplayMedia({\n//       video: true,\n//       audio: true,\n//     }).then((stream)=>callObject.startScreenShare({\n//       mediaStream:stream}))\n//       // share getDisplayMedia stream\n//       // mediaStream: window.screenStream,\n//       // share getDisplayMedia audio track only\n//       // mediaStream: window.screenStream,\n//       // share local cam via screen stream\n//       // mediaStream: window.localCam,\n//       // share only audio from local cam via screen stream\n//       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n//     // });\n// }\nfunction leaveCall(){props.onClickLeaveCall&&props.onClickLeaveCall();}function toggleChat(){setChatDisplay(!displayChat);if(highlightedChat){setChatHighlight(!highlightedChat);}}function handleNewChat(){setChatHighlight(!highlightedChat);}function openScreenShareWindow(){window.open(\"http://\"+window.location.host+\"/share\",\"test\",\"width=300, height=300\");}/**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */useEffect(function(){if(!callObject)return;function handleNewParticipantsState(event){event&&logDailyEvent(event);var _getStreamStates=getStreamStates(callObject),_getStreamStates2=_slicedToArray(_getStreamStates,3),isCameraMuted=_getStreamStates2[0],isMicMuted=_getStreamStates2[1],isSharingScreen=_getStreamStates2[2];setCameraMuted(isCameraMuted);setMicMuted(isMicMuted);setSharingScreen(isSharingScreen);}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\ncallObject.on('participant-updated',handleNewParticipantsState);// Stop listening for changes in state\nreturn function cleanup(){callObject.off('participant-updated',handleNewParticipantsState);};},[callObject]);return/*#__PURE__*/React.createElement(\"div\",{className:\"tray\"},/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_CAMERA// disabled={props.disabled}\n,highlighted:isCameraMuted,onClick:toggleCamera}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowCamSettings(!showCamSettings);},style:{position:'absolute',left:'55px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:camCaret},\"^\"),showCamSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"video\",page:\"main\",ref:camSettings}):null),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_MIC// disabled={props.disabled}\n,highlighted:isMicMuted,onClick:toggleMic}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowMicSettings(!showMicSettings);},style:{position:'absolute',left:'125px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:micCaret},\"^\"),showMicSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"audio\",page:\"main\",ref:micSettings}):null),DailyIframe.supportedBrowser().supportsScreenShare&&window.amAdmin&&/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_SCREEN// disabled={props.disabled}\n,highlighted:isSharingScreen,onClick:openScreenShareWindow// onClick={toggleSharingScreen}\n}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_CHAT// disabled={props.disabled}\n,highlighted:highlightedChat,onClick:toggleChat}),/*#__PURE__*/React.createElement(Chat,{onClickDisplay:displayChat,notification:handleNewChat}),window.amAdmin&&/*#__PURE__*/React.createElement(AdminPanel,null),window.sessionState&&window.sessionState.isActive&&(window.myRole=='Attendee'||window.myRole=='Admin')&&/*#__PURE__*/React.createElement(\"div\",{style:{zIndex:'999',height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible',flexGrow:'1',textAlign:'center',position:'absolute',left:'50%',transform:'translateX(-50%)'},id:\"my-view\"},/*#__PURE__*/React.createElement(\"form\",{action:\"\"},/*#__PURE__*/React.createElement(\"fieldset\",{style:{border:'none'}},/*#__PURE__*/React.createElement(\"select\",{id:\"view-mode\",onChange:function onChange(e){return window.setViewMode(e.target.value);},style:{outline:'none',position:'relative',borderRadius:'20px',height:'30px',width:'100px',bottom:'-22px',cursor:'pointer',backgroundColor:'#2196F3',color:'white'}},/*#__PURE__*/React.createElement(\"option\",{value:\"Room1\"},\"Room1\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Room2\"},\"Room2\"),/*#__PURE__*/React.createElement(\"option\",{value:\"All\"},\"All\")))),/*#__PURE__*/React.createElement(\"p\",{style:{position:'relative',bottom:'3px'}},\"My view\")),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_LEAVE,disabled:props.disabled,newButtonGroup:true,highlighted:true,onClick:leaveCall}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test2/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","InputSelector","Chat","AdminPanel","CallObjectContext","logDailyEvent","DailyIframe","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","forceUpdate","micCaret","createRef","micSettings","camCaret","camSettings","window","updateTray","showMicSettings","setShowMicSettings","showCamSettings","setShowCamSettings","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","document","addEventListener","handleClickOutside","cleanup","removeEventListener","event","console","log","current","contains","target","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","openScreenShareWindow","open","location","host","handleNewParticipantsState","on","off","position","left","bottom","supportedBrowser","supportsScreenShare","amAdmin","sessionState","isActive","myRole","zIndex","height","overflow","visibility","flexGrow","textAlign","transform","border","e","setViewMode","outline","borderRadius","width","cursor","backgroundColor","color","disabled"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n  const camCaret = React.createRef();\n  const camSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  }\n\n  const [showMicSettings,setShowMicSettings] = useState(false);\n  const [showCamSettings,setShowCamSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n\n  useEffect(()=> {\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n\n return function cleanup() {\n    document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  })\n\n  const handleClickOutside = (event) => {\n    console.log('handling click');\n    if (micSettings.current &&\n      !micSettings.current.contains(event.target) &&\n      !micCaret.current.contains(event.target)\n    ) {\n      setShowMicSettings(false);\n    } else if (camSettings.current &&\n      !camSettings.current.contains(event.target) &&\n      !camCaret.current.contains(event.target)\n    ) {\n      setShowCamSettings(false);\n    } \n    \n  }\n\n  // function toggleSharingScreen() {\n\n    \n  //   isSharingScreen\n  //     ? callObject.stopScreenShare()\n  //     : navigator.mediaDevices.getDisplayMedia({\n  //       video: true,\n  //       audio: true,\n  //     }).then((stream)=>callObject.startScreenShare({\n  //       mediaStream:stream}))\n  //       // share getDisplayMedia stream\n  //       // mediaStream: window.screenStream,\n\n  //       // share getDisplayMedia audio track only\n        \n  //       // mediaStream: window.screenStream,\n\n  //       // share local cam via screen stream\n  //       // mediaStream: window.localCam,\n\n  //       // share only audio from local cam via screen stream\n  //       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n  //     // });\n  // }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow () {\n    window.open(\"http://\" + window.location.host + \"/share\",\"test\",\"width=300, height=300\");\n\n  }\n\n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        // disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      \n      <div onClick={()=>{setShowCamSettings(!showCamSettings)}}  style={{position:'absolute',left:'55px', bottom:'23px',}}>\n        <p className=\"caret\" ref={camCaret}>^</p>\n                {showCamSettings ? \n                (<InputSelector type='video' page='main' ref={camSettings}/>)\n                : \n                null}\n      </div>\n      \n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        // disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      <div onClick={()=>{setShowMicSettings(!showMicSettings)}}  style={{position:'absolute',left:'125px', bottom:'23px'}}>\n      {/* <img src={Caret} style={{position:'absolute',left:'52px', bottom:'42px', height:'18px',fontSize:'15px'}} /> */}\n      \n      <p className=\"caret\" ref={micCaret}>^</p>\n              {showMicSettings ? \n              (<InputSelector type='audio' page='main' ref={micSettings}/>)\n              : \n              null}\n              \n      </div>\n      {DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          // disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={openScreenShareWindow}\n          // onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        // disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n      {window.amAdmin && (\n        <AdminPanel\n      />\n      )}\n\n      {/* <!-- Control who you see during a session --> */}\n      {window.sessionState && window.sessionState.isActive && (window.myRole=='Attendee' || window.myRole=='Admin') && (\n        <div style={{zIndex:'999', height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible', flexGrow:'1', textAlign: 'center', position:'absolute', left:'50%', transform:'translateX(-50%)'}} id='my-view'>\n          <form action = ''>\n              <fieldset style={{border:'none'}}>\n              <select id = 'view-mode' onChange = {(e)=>window.setViewMode(e.target.value)} style={{outline:'none', position: 'relative', borderRadius: '20px', height:'30px', width:'100px', bottom:'-22px', cursor:'pointer', backgroundColor: '#2196F3', color:'white'}}>\n              <option value = 'Room1'>Room1</option>\n              <option value = 'Room2'>Room2</option>\n              <option value = 'All'>All</option>\n              {/* <option value = 'Actors'>Actors</option>\n              <option value = 'Participants'>Participants</option>\n              <option value = '1s'>Both 1s</option>\n              <option value = '2s'>Both 2s</option>\n              <option value = 'None'>None</option> */}\n              </select>\n              </fieldset>\n              </form>\n              <p style={{position:'relative', bottom: '3px'}}>My view</p>\n      </div>\n      )}\n      \n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}