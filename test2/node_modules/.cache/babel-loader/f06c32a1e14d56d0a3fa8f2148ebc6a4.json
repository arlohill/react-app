{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./Tray.css';import TrayButton,{TYPE_MUTE_CAMERA,TYPE_MUTE_MIC,TYPE_SCREEN,TYPE_LEAVE,TYPE_CHAT}from'../TrayButton/TrayButton';import Chat from'../Chat/Chat';import AdminPanel from'../AdminPanel/AdminPanel';import CallObjectContext from'../../CallObjectContext';import NameContext from'../../NameContext';import{logDailyEvent}from'../../logUtils';import DailyIframe from'@daily-co/daily-js';import setSubscriptions from'../../hooks/setSubscriptions';function useForceUpdate(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// integer state\nreturn function(){return setValue(function(value){return value+1;});};// update the state to force render\n}/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */function getStreamStates(callObject){var isCameraMuted,isMicMuted,isSharingScreen=false;if(callObject&&callObject.participants()&&callObject.participants().local){var localParticipant=callObject.participants().local;isCameraMuted=!localParticipant.video;isMicMuted=!localParticipant.audio;isSharingScreen=localParticipant.screen;}return[isCameraMuted,isMicMuted,isSharingScreen];}/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */export default function Tray(props){var callObject=useContext(CallObjectContext);var myName=useContext(NameContext);var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCameraMuted=_useState4[0],setCameraMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isMicMuted=_useState6[0],setMicMuted=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isSharingScreen=_useState8[0],setSharingScreen=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),displayChat=_useState10[0],setChatDisplay=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),highlightedChat=_useState12[0],setChatHighlight=_useState12[1];var forceUpdate=useForceUpdate();window.updateTray=function(){forceUpdate();};function toggleCamera(){callObject.setLocalVideo(isCameraMuted);}function toggleMic(){callObject.setLocalAudio(isMicMuted);}function toggleSharingScreen(){isSharingScreen?callObject.stopScreenShare():navigator.mediaDevices.getDisplayMedia({video:true,audio:true}).then(function(stream){return callObject.startScreenShare({mediaStream:stream});});// share getDisplayMedia stream\n// mediaStream: window.screenStream,\n// share getDisplayMedia audio track only\n// mediaStream: window.screenStream,\n// share local cam via screen stream\n// mediaStream: window.localCam,\n// share only audio from local cam via screen stream\n// mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n// });\n}function leaveCall(){props.onClickLeaveCall&&props.onClickLeaveCall();}function toggleChat(){setChatDisplay(!displayChat);if(highlightedChat){setChatHighlight(!highlightedChat);}}function handleNewChat(){setChatHighlight(!highlightedChat);}function openScreenShareWindow(){window.open(\"http://\"+window.location.host+\"/share\",\"test\",\"width=300, height=300\");}window.setViewMode=function(viewMode){viewMode&&console.log('Changing view mode to: '+viewMode);setSubscriptions(callObject,viewMode);};/**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */useEffect(function(){if(!callObject)return;function handleNewParticipantsState(event){event&&logDailyEvent(event);var _getStreamStates=getStreamStates(callObject),_getStreamStates2=_slicedToArray(_getStreamStates,3),isCameraMuted=_getStreamStates2[0],isMicMuted=_getStreamStates2[1],isSharingScreen=_getStreamStates2[2];setCameraMuted(isCameraMuted);setMicMuted(isMicMuted);setSharingScreen(isSharingScreen);}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\ncallObject.on('participant-updated',handleNewParticipantsState);// Stop listening for changes in state\nreturn function cleanup(){callObject.off('participant-updated',handleNewParticipantsState);};},[callObject]);return/*#__PURE__*/React.createElement(\"div\",{className:\"tray\"},/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_CAMERA,disabled:props.disabled,highlighted:isCameraMuted,onClick:toggleCamera}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_MIC,disabled:props.disabled,highlighted:isMicMuted,onClick:toggleMic}),DailyIframe.supportedBrowser().supportsScreenShare&&window.amAdmin&&/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_SCREEN,disabled:props.disabled,highlighted:isSharingScreen,onClick:openScreenShareWindow// onClick={toggleSharingScreen}\n}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_CHAT,disabled:props.disabled,highlighted:highlightedChat,onClick:toggleChat}),/*#__PURE__*/React.createElement(Chat,{onClickDisplay:displayChat,notification:handleNewChat}),window.amAdmin&&/*#__PURE__*/React.createElement(AdminPanel,null),window.sessionState&&window.sessionState.isActive&&(window.myRole=='Attendee'||window.myRole=='Admin')&&/*#__PURE__*/React.createElement(\"div\",{style:{zIndex:'999',height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible',flexGrow:'1',textAlign:'center',position:'absolute',left:'50%',transform:'translateX(-50%)'},id:\"my-view\"},/*#__PURE__*/React.createElement(\"form\",{action:\"\"},/*#__PURE__*/React.createElement(\"fieldset\",{style:{border:'none'}},/*#__PURE__*/React.createElement(\"select\",{id:\"view-mode\",onChange:function onChange(e){return window.setViewMode(e.target.value);},style:{outline:'none',position:'relative',borderRadius:'20px',height:'30px',width:'100px',bottom:'-22px',cursor:'pointer',backgroundColor:'#2196F3',color:'white'}},/*#__PURE__*/React.createElement(\"option\",{value:\"Room1\"},\"Room1\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Room2\"},\"Room2\"),/*#__PURE__*/React.createElement(\"option\",{value:\"All\"},\"All\")))),/*#__PURE__*/React.createElement(\"p\",{style:{position:'relative',bottom:'3px'}},\"My view\")),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_LEAVE,disabled:props.disabled,newButtonGroup:true,highlighted:true,onClick:leaveCall}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","Chat","AdminPanel","CallObjectContext","NameContext","logDailyEvent","DailyIframe","setSubscriptions","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","myName","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","forceUpdate","window","updateTray","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","toggleSharingScreen","stopScreenShare","navigator","mediaDevices","getDisplayMedia","then","stream","startScreenShare","mediaStream","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","openScreenShareWindow","open","location","host","setViewMode","viewMode","console","log","handleNewParticipantsState","event","on","cleanup","off","disabled","supportedBrowser","supportsScreenShare","amAdmin","sessionState","isActive","myRole","zIndex","height","bottom","overflow","visibility","flexGrow","textAlign","position","left","transform","border","e","target","outline","borderRadius","width","cursor","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n\n  window.updateTray = () => {\n    forceUpdate();\n  }\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n\n    \n\n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true,\n      }).then((stream)=>callObject.startScreenShare({\n        mediaStream:stream}))\n        // share getDisplayMedia stream\n        // mediaStream: window.screenStream,\n\n        // share getDisplayMedia audio track only\n        \n        // mediaStream: window.screenStream,\n\n        // share local cam via screen stream\n        // mediaStream: window.localCam,\n\n        // share only audio from local cam via screen stream\n        // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n      // });\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow () {\n    window.open(\"http://\" + window.location.host + \"/share\",\"test\",\"width=300, height=300\");\n\n  }\n\n  window.setViewMode = (viewMode) => {\n    viewMode && console.log ('Changing view mode to: ' + viewMode);\n    setSubscriptions(callObject,viewMode)\n  }\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={openScreenShareWindow}\n          // onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n      {window.amAdmin && (\n        <AdminPanel\n      />\n      )}\n\n      {/* <!-- Control who you see during a session --> */}\n      {window.sessionState && window.sessionState.isActive && (window.myRole=='Attendee' || window.myRole=='Admin') && (\n        <div style={{zIndex:'999', height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible', flexGrow:'1', textAlign: 'center', position:'absolute', left:'50%', transform:'translateX(-50%)'}} id='my-view'>\n          <form action = ''>\n              <fieldset style={{border:'none'}}>\n              <select id = 'view-mode' onChange = {(e)=>window.setViewMode(e.target.value)} style={{outline:'none', position: 'relative', borderRadius: '20px', height:'30px', width:'100px', bottom:'-22px', cursor:'pointer', backgroundColor: '#2196F3', color:'white'}}>\n              <option value = 'Room1'>Room1</option>\n              <option value = 'Room2'>Room2</option>\n              <option value = 'All'>All</option>\n              {/* <option value = 'Actors'>Actors</option>\n              <option value = 'Participants'>Participants</option>\n              <option value = '1s'>Both 1s</option>\n              <option value = '2s'>Both 2s</option>\n              <option value = 'None'>None</option> */}\n              </select>\n              </fieldset>\n              </form>\n              <p style={{position:'relative', bottom: '3px'}}>My view</p>\n      </div>\n      )}\n      \n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}