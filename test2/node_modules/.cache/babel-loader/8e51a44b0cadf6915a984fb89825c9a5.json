{"ast":null,"code":"// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\nexport default function setSubscriptions(sessionState, myInfo, callObject) {\n  console.log('here it is: ' + window.myVar);\n  console.log('Setting subscriptions...');\n  let subscribedTo = 0; //if session is active, set currentSubs accord to my role\n\n  if (sessionState.isActive) {\n    switch (myInfo.myRole) {\n      case 'Participant1':\n        currentSubs = [];\n        sessionState.roleOf.Actor2 && currentSubs.push(sessionState.roleOf.Actor2);\n        break;\n\n      case 'Participant2':\n        currentSubs = [];\n        sessionState.roleOf.Actor1 && currentSubs.push(sessionState.roleOf.Actor1);\n        break;\n\n      case 'Actor1':\n        currentSubs = [];\n        sessionState.roleOf.Participant2 && currentSubs.push(sessionState.roleOf.Participant2);\n        break;\n\n      case 'Actor2':\n        currentSubs = [];\n        sessionState.roleOf.Participant1 && currentSubs.push(sessionState.roleOf.Participant1);\n        break;\n\n      case 'Room3A':\n        currentSubs = [];\n        sessionState.roleOf.Room3B && currentSubs.push(sessionState.roleOf.Room3B);\n        break;\n\n      case 'Room3B':\n        currentSubs = [];\n        sessionState.roleOf.Room3A && currentSubs.push(sessionState.roleOf.Room3A);\n        break;\n\n      case 'Room4A':\n        currentSubs = [];\n        sessionState.roleOf.Room4B && currentSubs.push(sessionState.roleOf.Room4B);\n        break;\n\n      case 'Room4B':\n        currentSubs = [];\n        sessionState.roleOf.Room4A && currentSubs.push(sessionState.roleOf.Room4A);\n        break;\n\n      case 'Room5A':\n        currentSubs = [];\n        sessionState.roleOf.Room5B && currentSubs.push(sessionState.roleOf.Room5B);\n        break;\n\n      case 'Room5B':\n        currentSubs = [];\n        sessionState.roleOf.Room5A && currentSubs.push(sessionState.roleOf.Room5A);\n        break;\n\n      default:\n        break;\n    } //Add Admin to currentSubs if applicable\n\n\n    if (sessionState.AdminVisible) {\n      currentSubs.push(\"Admin\");\n    }\n  }\n\n  function setTracks() {\n    return new Promise(resolve => {\n      //cycle through each participant in meeting\n      let ps = callObject.participants();\n      Object.keys(ps).forEach(p => {\n        let participant = ps[p];\n        let thisUserName = participant.user_name;\n\n        if (p === 'local') {\n          return;\n        }\n\n        console.log(\"This username is: \" + thisUserName); //If session is not active, subscribe to everyone in the meeting\n\n        if (!sessionState.isActive) {\n          if (thisUserName != 'Admin') {\n            // && thisUserName!=mutedParticipant\n            console.log('Subscribing to: ' + thisUserName);\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: true\n            });\n            subscribedTo++;\n          } else if (thisUserName == 'Admin' && sessionState.AdminVisible) {\n            console.log('Subscribing to Admin:');\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: true\n            });\n            subscribedTo++;\n            console.log('Subscribed to session id: ' + participant.session_id);\n          }\n        } //Otherwise, just subscribe to those listed in currentSubs;\n        else if (sessionState.isActive) {\n            if (currentSubs.includes(thisUserName)) {\n              console.log('Subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } else if (!currentSubs.includes(thisUserName)) {\n              console.log('NOT subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: false\n              });\n            }\n          }\n      });\n      resolve();\n    });\n  }\n\n  setTracks().then(() => {//if no admin (or admin has left), start asking for state\n    // if (adminPresent==false) {\n    //     sessionState.isKnown=false;\n    //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n    //     stateRequest = setInterval(getState,2500);\n    //     console.log('no Admin present');\n    // }\n    // if (subscribedTo==0) {\n    //     window.isPopulated = false;\n    //     document.getElementById('empty-room').style.opacity='1';\n    //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n    //     if (sessionState.isActive==true) {\n    //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n    //     } else if (sessionState.isActive==false) {\n    //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n    //     }\n    // } else if (subscribedTo>0) {\n    //     window.isPopulated = true;\n    //     document.getElementById('empty-room').style.opacity='0';\n    //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n    //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n    //     }\n    // }\n  }); //print subscriptions\n\n  var iterator = currentSubs.values();\n  console.log(\"Currently subscribed to:\");\n\n  for (let elements of iterator) {\n    console.log(elements);\n  }\n\n  if (currentSubs.length < 1) {\n    console.log(\"No one.\");\n  }\n}\n;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/hooks/setSubscriptions.js"],"names":["setSubscriptions","sessionState","myInfo","callObject","console","log","window","myVar","subscribedTo","isActive","myRole","currentSubs","roleOf","Actor2","push","Actor1","Participant2","Participant1","Room3B","Room3A","Room4B","Room4A","Room5B","Room5A","AdminVisible","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","updateParticipant","session_id","setSubscribedTracks","includes","then","iterator","values","elements","length"],"mappings":"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","sourcesContent":["// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\n\nexport default function setSubscriptions(sessionState,myInfo,callObject) {\n\n    console.log('here it is: ' + window.myVar);\n    console.log('Setting subscriptions...');\n    let subscribedTo=0;\n    \n    //if session is active, set currentSubs accord to my role\n    if (sessionState.isActive) {\n        switch (myInfo.myRole) {\n            case 'Participant1':\n                currentSubs=[];\n                sessionState.roleOf.Actor2 && currentSubs.push(sessionState.roleOf.Actor2);\n                break;\n            case 'Participant2':\n                currentSubs=[];\n                sessionState.roleOf.Actor1 && currentSubs.push(sessionState.roleOf.Actor1);\n                break;\n            case 'Actor1':\n                currentSubs=[];\n                sessionState.roleOf.Participant2 && currentSubs.push(sessionState.roleOf.Participant2);\n                break;\n            case 'Actor2':\n                currentSubs=[];\n                sessionState.roleOf.Participant1 && currentSubs.push(sessionState.roleOf.Participant1);\n                break;\n            case 'Room3A':\n                currentSubs=[];\n                sessionState.roleOf.Room3B && currentSubs.push(sessionState.roleOf.Room3B);\n                break;\n            case 'Room3B':\n                currentSubs=[];\n                sessionState.roleOf.Room3A && currentSubs.push(sessionState.roleOf.Room3A);\n                break;\n            case 'Room4A':\n                currentSubs=[];\n                sessionState.roleOf.Room4B && currentSubs.push(sessionState.roleOf.Room4B);\n                break;\n            case 'Room4B':\n                currentSubs=[];\n                sessionState.roleOf.Room4A && currentSubs.push(sessionState.roleOf.Room4A);\n                break;\n             case 'Room5A':\n                currentSubs=[];\n                sessionState.roleOf.Room5B && currentSubs.push(sessionState.roleOf.Room5B);\n                break;\n            case 'Room5B':\n                currentSubs=[];\n                sessionState.roleOf.Room5A && currentSubs.push(sessionState.roleOf.Room5A);\n                break;\n            default:\n                break;\n        }\n        //Add Admin to currentSubs if applicable\n        if (sessionState.AdminVisible) {\n        currentSubs.push (\"Admin\");\n    }\n    }\n    \n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            Object.keys(ps).forEach((p) => {\n\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local') {\n                    return;\n                } \n\n\n\n                console.log(\"This username is: \" +thisUserName);\n                //If session is not active, subscribe to everyone in the meeting\n                if (!sessionState.isActive) {\n\n                    if (thisUserName!='Admin') {  // && thisUserName!=mutedParticipant\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    } else if (thisUserName=='Admin' && sessionState.AdminVisible) {\n                        console.log('Subscribing to Admin:');\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                        console.log('Subscribed to session id: ' + participant.session_id);\n                    } \n\n                } \n\n                //Otherwise, just subscribe to those listed in currentSubs;\n                else if (sessionState.isActive) {\n\n                    if(currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve()\n        })\n    }\n    \n    setTracks().then(()=>{\n        //if no admin (or admin has left), start asking for state\n        // if (adminPresent==false) {\n        //     sessionState.isKnown=false;\n        //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n        //     stateRequest = setInterval(getState,2500);\n        //     console.log('no Admin present');\n        // }\n        // if (subscribedTo==0) {\n        //     window.isPopulated = false;\n        //     document.getElementById('empty-room').style.opacity='1';\n        //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n        //     if (sessionState.isActive==true) {\n        //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n        //     } else if (sessionState.isActive==false) {\n        //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n\n        //     }\n        // } else if (subscribedTo>0) {\n        //     window.isPopulated = true;\n        //     document.getElementById('empty-room').style.opacity='0';\n        //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n        //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n        //     }\n\n        // }\n\n    })\n\n    //print subscriptions\n    var iterator = currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}