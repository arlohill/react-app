{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/Tile/Tile.js\";\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport './Tile.css';\n\nfunction getTrackUnavailableMessage(kind, trackState) {\n  if (!trackState) return;\n\n  switch (trackState.state) {\n    case 'blocked':\n      if (trackState.blocked.byPermissions) {\n        return `${kind} permission denied`;\n      } else if (trackState.blocked.byDeviceMissing) {\n        return `${kind} device missing`;\n      }\n\n      return `${kind} blocked`;\n\n    case 'off':\n      if (trackState.off.byUser) {\n        return `${kind} muted`;\n      } else if (trackState.off.byBandwidth) {\n        return `${kind} muted to save bandwidth`;\n      }\n\n      return `${kind} off`;\n\n    case 'sendable':\n      return `${kind} not subscribed`;\n\n    case 'loading':\n      return `${kind} loading...`;\n\n    case 'interrupted':\n      return `${kind} interrupted`;\n\n    case 'playable':\n      return null;\n  }\n}\n/**\n * Props\n * - videoTrackState: DailyTrackState?\n * - audioTrackState: DailyTrackState?\n * - isLocalPerson: boolean\n * - isLarge: boolean\n * - disableCornerMessage: boolean\n * - onClick: Function\n * - isMyFirst: boolean\n */\n\n\nexport default function Tile(props) {\n  const videoEl = useRef(null);\n  const audioEl = useRef(null);\n  const videoTrack = useMemo(() => {\n    return props.videoTrackState && props.videoTrackState.state === 'playable' ? props.videoTrackState.track : null;\n  }, [props.videoTrackState]);\n  const audioTrack = useMemo(() => {\n    if (props.audioTrackState && props.audioTrackState.state === 'playable') {\n      let src = new MediaStream(props.audioTrackState.track);\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      let audioSourceNode = audioCtx.createMediaStreamSource(src);\n      var destination = audioCtx.createMediaStreamDestination(); //\n\n      var gainNode = audioCtx.createGain();\n      gainNode.gain.value = 0;\n      audioSourceNode.connect(gainNode);\n      gainNode.connect(destination);\n    }\n\n    return props.audioTrackState && props.audioTrackState.state === 'playable' ? destination : null;\n  }, [props.audioTrackState]);\n  const videoUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('video', props.videoTrackState);\n  }, [props.videoTrackState]);\n  const audioUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('audio', props.audioTrackState);\n  }, [props.audioTrackState]);\n  /**\n   * When video track changes, update video srcObject\n   */\n\n  useEffect(() => {\n    videoEl.current && (videoEl.current.srcObject = new MediaStream([videoTrack]));\n  }, [videoTrack]);\n  /**\n   * When audio track changes, update audio srcObject\n   */\n\n  useEffect(() => {\n    if (audioEl.current) {\n      audioEl.current.srcObject = new MediaStream([audioTrack]);\n    }\n  }, [audioTrack]);\n\n  function getVideoComponent() {\n    return videoTrack && /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      ref: videoEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 26\n      }\n    });\n  }\n\n  function getAudioComponent() {\n    return !props.isLocalPerson && audioTrack && /*#__PURE__*/React.createElement(\"audio\", {\n      autoPlay: true,\n      playsInline: true,\n      ref: audioEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    });\n  }\n\n  function getOverlayComponent() {\n    // Show overlay when video is unavailable. Audio may be unavailable too.\n    return videoUnavailableMessage && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, videoUnavailableMessage, audioUnavailableMessage && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }), audioUnavailableMessage));\n  }\n\n  function getCornerMessageComponent() {\n    // Show corner message when only audio is unavailable.\n    return !props.disableCornerMessage && audioUnavailableMessage && !videoUnavailableMessage && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"corner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, audioUnavailableMessage);\n  }\n\n  function getClassNames() {\n    let classNames = 'tile';\n    classNames += props.isLarge ? ' large' : ' small';\n    props.isLocalPerson && (classNames += ' local');\n    return classNames;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: getClassNames(),\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), getOverlayComponent(), getVideoComponent(), getAudioComponent(), getCornerMessageComponent());\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/Tile/Tile.js"],"names":["React","useEffect","useMemo","useRef","getTrackUnavailableMessage","kind","trackState","state","blocked","byPermissions","byDeviceMissing","off","byUser","byBandwidth","Tile","props","videoEl","audioEl","videoTrack","videoTrackState","track","audioTrack","audioTrackState","src","MediaStream","audioCtx","window","AudioContext","webkitAudioContext","audioSourceNode","createMediaStreamSource","destination","createMediaStreamDestination","gainNode","createGain","gain","value","connect","videoUnavailableMessage","audioUnavailableMessage","current","srcObject","getVideoComponent","getAudioComponent","isLocalPerson","getOverlayComponent","getCornerMessageComponent","disableCornerMessage","getClassNames","classNames","isLarge","onClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport './Tile.css';\n\nfunction getTrackUnavailableMessage(kind, trackState) {\n  if (!trackState) return;\n  switch (trackState.state) {\n    case 'blocked':\n      if (trackState.blocked.byPermissions) {\n        return `${kind} permission denied`;\n      } else if (trackState.blocked.byDeviceMissing) {\n        return `${kind} device missing`;\n      }\n      return `${kind} blocked`;\n    case 'off':\n      if (trackState.off.byUser) {\n        return `${kind} muted`;\n      } else if (trackState.off.byBandwidth) {\n        return `${kind} muted to save bandwidth`;\n      }\n      return `${kind} off`;\n    case 'sendable':\n      return `${kind} not subscribed`;\n    case 'loading':\n      return `${kind} loading...`;\n    case 'interrupted':\n      return `${kind} interrupted`;\n    case 'playable':\n      return null;\n  }\n}\n\n/**\n * Props\n * - videoTrackState: DailyTrackState?\n * - audioTrackState: DailyTrackState?\n * - isLocalPerson: boolean\n * - isLarge: boolean\n * - disableCornerMessage: boolean\n * - onClick: Function\n * - isMyFirst: boolean\n */\nexport default function Tile(props) {\n  const videoEl = useRef(null);\n  const audioEl = useRef(null);\n\n  const videoTrack = useMemo(() => {\n    return props.videoTrackState && props.videoTrackState.state === 'playable'\n      ? props.videoTrackState.track\n      : null;\n  }, [props.videoTrackState]);\n\n  const audioTrack = useMemo(() => {\n\n    if (props.audioTrackState && props.audioTrackState.state === 'playable') {\n      let src=new MediaStream(props.audioTrackState.track);\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      let audioSourceNode = audioCtx.createMediaStreamSource(src);\n      var destination = audioCtx.createMediaStreamDestination(); //\n      var gainNode = audioCtx.createGain();\n      gainNode.gain.value=0;\n      audioSourceNode.connect(gainNode);\n      gainNode.connect(destination);\n    }\n   \n    \n    return props.audioTrackState && props.audioTrackState.state === 'playable'\n      ? destination\n      : null;\n  }, [props.audioTrackState]);\n\n  const videoUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('video', props.videoTrackState);\n  }, [props.videoTrackState]);\n\n  const audioUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('audio', props.audioTrackState);\n  }, [props.audioTrackState]);\n\n  /**\n   * When video track changes, update video srcObject\n   */\n  useEffect(() => {\n    videoEl.current &&\n      (videoEl.current.srcObject = new MediaStream([videoTrack]));\n  }, [videoTrack]);\n\n  /**\n   * When audio track changes, update audio srcObject\n   */\n  useEffect(() => {\n    if(audioEl.current) {\n        audioEl.current.srcObject = new MediaStream([audioTrack]);\n        }\n      \n  }, [audioTrack]);\n\n  function getVideoComponent() {\n    return videoTrack && <video autoPlay muted playsInline ref={videoEl} />;\n  }\n\n  function getAudioComponent() {\n    return (\n      !props.isLocalPerson &&\n      audioTrack && <audio autoPlay playsInline ref={audioEl} />\n    );\n  }\n\n  function getOverlayComponent() {\n    // Show overlay when video is unavailable. Audio may be unavailable too.\n    return (\n      videoUnavailableMessage && (\n        <p className=\"overlay\">\n          {videoUnavailableMessage}\n          {audioUnavailableMessage && (\n            <>\n              <br />\n              {audioUnavailableMessage}\n            </>\n          )}\n        </p>\n      )\n    );\n  }\n\n  function getCornerMessageComponent() {\n    // Show corner message when only audio is unavailable.\n    return (\n      !props.disableCornerMessage &&\n      audioUnavailableMessage &&\n      !videoUnavailableMessage && (\n        <p className=\"corner\">{audioUnavailableMessage}</p>\n      )\n    );\n  }\n\n  function getClassNames() {\n    let classNames = 'tile';\n    classNames += props.isLarge ? ' large' : ' small';\n    props.isLocalPerson && (classNames += ' local');\n    return classNames;\n  }\n\n  return (\n    <div className={getClassNames()} onClick={props.onClick}>\n      <div className=\"background\" />\n      {getOverlayComponent()}\n      {getVideoComponent()}\n      {getAudioComponent()}\n      {getCornerMessageComponent()}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}