{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/App/App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionContext from '../../SessionContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [myCurrent, setMyCurrent] = useState({\n    name: '',\n    subscriptions: ['Admin']\n  });\n  const [sessionState, setSessionState] = useState({\n    isActive: false // setState: setSessionState(),\n\n  });\n  /**\n   * Creates a new call room.\n   */\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    const newCallObject = DailyIframe.createCallObject({\n      subscribeToTracksAutomatically: false,\n      userName: myCurrent.name\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({\n      url\n    });\n  }, []);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  useEffect(() => {\n    window.sessionState = sessionState;\n    window.setSessionState = setSessionState;\n    window.myCurrent = myCurrent;\n    window.setMyCurrent = setMyCurrent;\n  }, [sessionState], [myCurrent]); // Only re-run the effect if callObject changes\n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      if (event) {\n        logDailyEvent(event);\n        console.log(`received app message from ${event.fromId}: `, event.data);\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n\n  const enableStartButton = appState === STATE_IDLE;\n  return /*#__PURE__*/React.createElement(SessionContext.Provider, {\n    value: sessionState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: 'none',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    disabled: !enableCallButtons,\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/App/App.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","MyContext","SessionContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","myCurrent","setMyCurrent","name","subscriptions","sessionState","setSessionState","isActive","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","subscribeToTracksAutomatically","userName","join","startLeavingCall","destroy","leave","pageUrl","window","location","href","history","replaceState","events","handleNewMeetingState","event","meetingState","on","cleanup","off","handleAppMessage","fromId","data","showCall","includes","enableCallButtons","enableStartButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionContext from '../../SessionContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [myCurrent, setMyCurrent ] = useState(\n      { \n        name:'',\n        subscriptions: ['Admin'],\n      }\n  );\n  const [sessionState, setSessionState] = useState(\n    {\n      isActive:false,\n      // setState: setSessionState(),\n    }\n  );\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n  const startJoiningCall = useCallback((url) => {\n    const newCallObject = DailyIframe.createCallObject({ \n      subscribeToTracksAutomatically: false, \n      userName: myCurrent.name, \n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({ url });\n  }, []);\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); // Only re-run the effect if callObject changes\n\n  useEffect(() => {\n    window.sessionState = sessionState;\n    window.setSessionState = setSessionState;\n    window.myCurrent = myCurrent;\n    window.setMyCurrent = setMyCurrent;\n  }, [sessionState],[myCurrent]); // Only re-run the effect if callObject changes\n    \n\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      if (event) {\n        logDailyEvent(event);\n        console.log(`received app message from ${event.fromId}: `, event.data);\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n  const enableStartButton = appState === STATE_IDLE;\n\n  return (\n    <SessionContext.Provider value={sessionState}>\n      <MyContext.Provider value={'none'}>\n\n\n    <div className=\"app\">\n    \n      {showCall ? (\n        // NOTE: for an app this size, it's not obvious that using a Context\n        // is the best choice. But for larger apps with deeply-nested components\n        // that want to access call object state and bind event listeners to the\n        // call object, this can be a helpful pattern.\n        <CallObjectContext.Provider value={callObject}>\n          <Call roomUrl={roomUrl} />\n          <Tray\n            disabled={!enableCallButtons}\n            onClickLeaveCall={startLeavingCall}\n          />\n        </CallObjectContext.Provider>\n      ) : (\n        <StartScreen\n          // disabled={!enableStartButton}\n          onClick={() => {\n            createCall().then((url) => startJoiningCall(url));\n          }}\n        />\n      )}\n    </div>\n    </MyContext.Provider>\n    </SessionContext.Provider>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}