{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./Tray.css';import TrayButton,{TYPE_MUTE_CAMERA,TYPE_MUTE_MIC,TYPE_SCREEN,TYPE_LEAVE,TYPE_CHAT}from'../TrayButton/TrayButton';import Chat from'../Chat/Chat';import CallObjectContext from'../../CallObjectContext';import{logDailyEvent}from'../../logUtils';import DailyIframe from'@daily-co/daily-js';/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */function getStreamStates(callObject){var isCameraMuted,isMicMuted,isSharingScreen=false;if(callObject&&callObject.participants()&&callObject.participants().local){var localParticipant=callObject.participants().local;isCameraMuted=!localParticipant.video;isMicMuted=!localParticipant.audio;isSharingScreen=localParticipant.screen;}return[isCameraMuted,isMicMuted,isSharingScreen];}/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */export default function Tray(props){var callObject=useContext(CallObjectContext);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCameraMuted=_useState2[0],setCameraMuted=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isMicMuted=_useState4[0],setMicMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isSharingScreen=_useState6[0],setSharingScreen=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),displayChat=_useState8[0],setChatDisplay=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),highlightedChat=_useState10[0],setChatHighlight=_useState10[1];function toggleCamera(){callObject.setLocalVideo(isCameraMuted);}function toggleMic(){callObject.setLocalAudio(isMicMuted);}function toggleSharingScreen(){isSharingScreen?callObject.stopScreenShare():callObject.startScreenShare();}function leaveCall(){props.onClickLeaveCall&&props.onClickLeaveCall();}function toggleChat(){setChatDisplay(!displayChat);if(highlightedChat){setChatHighlight(!highlightedChat);}}function handleNewChat(){setChatHighlight(!highlightedChat);}/**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */useEffect(function(){if(!callObject)return;function handleNewParticipantsState(event){event&&logDailyEvent(event);var _getStreamStates=getStreamStates(callObject),_getStreamStates2=_slicedToArray(_getStreamStates,3),isCameraMuted=_getStreamStates2[0],isMicMuted=_getStreamStates2[1],isSharingScreen=_getStreamStates2[2];setCameraMuted(isCameraMuted);setMicMuted(isMicMuted);setSharingScreen(isSharingScreen);}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\ncallObject.on('participant-updated',handleNewParticipantsState);// Stop listening for changes in state\nreturn function cleanup(){callObject.off('participant-updated',handleNewParticipantsState);};},[callObject]);return/*#__PURE__*/React.createElement(\"div\",{className:\"tray\"},/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_CAMERA,disabled:props.disabled,highlighted:isCameraMuted,onClick:toggleCamera}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_MIC,disabled:props.disabled,highlighted:isMicMuted,onClick:toggleMic}),DailyIframe.supportedBrowser().supportsScreenShare&&/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_SCREEN,disabled:props.disabled,highlighted:isSharingScreen,onClick:toggleSharingScreen}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_CHAT,disabled:props.disabled,highlighted:highlightedChat,onClick:toggleChat}),/*#__PURE__*/React.createElement(Chat,{onClickDisplay:displayChat,notification:handleNewChat}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_LEAVE,disabled:props.disabled,newButtonGroup:true,highlighted:true,onClick:leaveCall}));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","Chat","CallObjectContext","logDailyEvent","DailyIframe","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","toggleSharingScreen","stopScreenShare","startScreenShare","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","handleNewParticipantsState","event","on","cleanup","off","disabled","supportedBrowser","supportsScreenShare"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport Chat from '../Chat/Chat';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}