{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/AdminPanel/AdminPanel.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function AdminPanel() {\n  const callObject = useContext(CallObjectContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n    isSharingScreen ? callObject.stopScreenShare() : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_CAMERA,\n    disabled: props.disabled,\n    highlighted: isCameraMuted,\n    onClick: toggleCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_MIC,\n    disabled: props.disabled,\n    highlighted: isMicMuted,\n    onClick: toggleMic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), DailyIframe.supportedBrowser().supportsScreenShare && /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_SCREEN,\n    disabled: props.disabled,\n    highlighted: isSharingScreen,\n    onClick: toggleSharingScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_CHAT,\n    disabled: props.disabled,\n    highlighted: highlightedChat,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    onClickDisplay: displayChat,\n    notification: handleNewChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), myName == 'Admin' && /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_CHAT,\n    disabled: props.disabled,\n    newButtonGroup: true,\n    highlighted: true,\n    onClick: leaveCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_LEAVE,\n    disabled: props.disabled,\n    newButtonGroup: true,\n    highlighted: true,\n    onClick: leaveCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/my-app/src/components/AdminPanel/AdminPanel.js"],"names":["React","useContext","useEffect","useState","CallObjectContext","NameContext","logDailyEvent","DailyIframe","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","AdminPanel","myName","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","toggleSharingScreen","stopScreenShare","startScreenShare","leaveCall","props","onClickLeaveCall","toggleChat","handleNewChat","handleNewParticipantsState","event","on","cleanup","off","TYPE_MUTE_CAMERA","disabled","TYPE_MUTE_MIC","supportedBrowser","supportsScreenShare","TYPE_SCREEN","TYPE_CHAT","TYPE_LEAVE"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function AdminPanel() {\n  const callObject = useContext(CallObjectContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function toggleSharingScreen() {\n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : callObject.startScreenShare();\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n      {myName=='Admin' && (\n        <TrayButton\n        type={TYPE_CHAT}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n      )}\n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}