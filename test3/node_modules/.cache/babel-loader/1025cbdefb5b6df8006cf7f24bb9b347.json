{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Tile/Tile.js\";\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport './Tile.css';\n\nfunction getTrackUnavailableMessage(kind, trackState) {\n  if (!trackState) return;\n\n  switch (trackState.state) {\n    case 'blocked':\n      if (trackState.blocked.byPermissions) {\n        return `${kind} permission denied`;\n      } else if (trackState.blocked.byDeviceMissing) {\n        return `${kind} device missing`;\n      }\n\n      return `${kind} blocked`;\n\n    case 'off':\n      if (trackState.off.byUser) {\n        return `${kind} muted`;\n      } else if (trackState.off.byBandwidth) {\n        return `${kind} muted to save bandwidth`;\n      }\n\n      return `${kind} off`;\n\n    case 'sendable':\n      return `${kind} not subscribed`;\n\n    case 'loading':\n      return `${kind} loading...`;\n\n    case 'interrupted':\n      return `${kind} interrupted`;\n\n    case 'playable':\n      return null;\n  }\n}\n/**\n * Props\n * - videoTrackState: DailyTrackState?\n * - audioTrackState: DailyTrackState?\n * - isLocalPerson: boolean\n * - isAudioOnly: boolean\n * - isLarge: boolean\n * - disableCornerMessage: boolean\n * - onClick: Function\n * \n */\n\n\nexport default function Tile(props) {\n  const videoEl = useRef(null);\n  const audioEl = useRef(null);\n  const videoTrack = useMemo(() => {\n    return props.videoTrackState && props.videoTrackState.state === 'playable' && (props.isLocalPerson || props.videoTrackState.subscribed === true) ? props.videoTrackState.track : null;\n  }, [props.videoTrackState]);\n  const audioTrack = useMemo(() => {\n    if (!props.audioTrackState || props.audioTrackState.state !== 'playable' || props.audioTrackState.subscribed === false) {\n      return null;\n    }\n\n    if (props.isAudioOnly) {\n      props.audioTrackState.track.isFiltered = true;\n    } else {\n      props.audioTrackState.track.isFiltered = false;\n    }\n\n    ;\n    return props.audioTrackState.track;\n  }, [props.audioTrackState]);\n  const videoUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('video', props.videoTrackState);\n  }, [props.videoTrackState]);\n  const audioUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('audio', props.audioTrackState);\n  }, [props.audioTrackState]);\n  /**\n   * When video track changes, update video srcObject\n   */\n\n  useEffect(() => {\n    videoEl.current && (videoEl.current.srcObject = new MediaStream([videoTrack]));\n  }, [videoTrack]);\n  /**\n   * When audio track changes, update audio srcObject\n   */\n\n  useEffect(() => {\n    if (audioEl.current) {\n      window.test = audioTrack;\n\n      if (audioTrack.isFiltered) {\n        console.log('***FILTERED***'); //create audio stream\n\n        let stream = new MediaStream([audioTrack]); //workaround for bug in Chrome, see: https://bit.ly/3ryn1fW\n\n        const mutedAudio = new Audio();\n        mutedAudio.muted = true;\n        mutedAudio.srcObject = stream;\n        mutedAudio.play(); //create Audio Context and destination\n\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        let audioSourceNode = audioCtx.createMediaStreamSource(stream);\n        let destination = audioCtx.createMediaStreamDestination(); //gain Node\n\n        let gainNode = audioCtx.createGain();\n        gainNode.gain.value = 1; //panner Node\n\n        var panNode = audioCtx.createStereoPanner();\n        panNode.pan.value = 1; //Pipe source through nodes to destination\n\n        audioSourceNode.connect(gainNode).connect(panNode).connect(destination); //Attach to the audio element\n\n        audioEl.current.srcObject = destination.stream; // for debugging\n\n        window.destination = destination;\n        window.audioTrack = audioTrack;\n        window.audioEl = audioEl;\n      } else {\n        console.log('***NOT FILTERED***');\n        audioEl.current.srcObject = new MediaStream([audioTrack]);\n      }\n    }\n  }, [audioTrack, window.sessionState]);\n\n  function getVideoComponent() {\n    return videoTrack && /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      muted: true,\n      playsInline: true,\n      ref: videoEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 26\n      }\n    });\n  }\n\n  function getAudioComponent() {\n    return !props.isLocalPerson && audioTrack && /*#__PURE__*/React.createElement(\"audio\", {\n      autoPlay: true,\n      playsInline: true,\n      ref: audioEl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, \" \");\n  }\n\n  function getOverlayComponent() {\n    // Show overlay when video is unavailable. Audio may be unavailable too.\n    return videoTrack && videoUnavailableMessage && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, videoUnavailableMessage);\n  }\n\n  function getCornerMessageComponent() {\n    // Show corner message when only audio is unavailable.\n    return !props.disableCornerMessage && audioUnavailableMessage && !videoUnavailableMessage && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"corner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, audioUnavailableMessage);\n  }\n\n  function getClassNames() {\n    let classNames = 'tile';\n    classNames += props.isLarge ? ' large' : ' small';\n    props.isLocalPerson && (classNames += ' local');\n    return classNames;\n  }\n\n  return (\n    /*#__PURE__*/\n    ///TODO change to block : none\n    React.createElement(\"div\", {\n      className: getClassNames(),\n      onClick: props.onClick,\n      style: {\n        display: videoTrack ? \"block\" : \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }), getOverlayComponent(), getVideoComponent(), videoTrack && getCornerMessageComponent(), getAudioComponent())\n  );\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Tile/Tile.js"],"names":["React","useEffect","useMemo","useRef","getTrackUnavailableMessage","kind","trackState","state","blocked","byPermissions","byDeviceMissing","off","byUser","byBandwidth","Tile","props","videoEl","audioEl","videoTrack","videoTrackState","isLocalPerson","subscribed","track","audioTrack","audioTrackState","isAudioOnly","isFiltered","videoUnavailableMessage","audioUnavailableMessage","current","srcObject","MediaStream","window","test","console","log","stream","mutedAudio","Audio","muted","play","audioCtx","AudioContext","webkitAudioContext","audioSourceNode","createMediaStreamSource","destination","createMediaStreamDestination","gainNode","createGain","gain","value","panNode","createStereoPanner","pan","connect","sessionState","getVideoComponent","getAudioComponent","getOverlayComponent","getCornerMessageComponent","disableCornerMessage","getClassNames","classNames","isLarge","onClick","display"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport './Tile.css';\n\nfunction getTrackUnavailableMessage(kind, trackState) {\n  if (!trackState) return;\n  switch (trackState.state) {\n    case 'blocked':\n      if (trackState.blocked.byPermissions) {\n        return `${kind} permission denied`;\n      } else if (trackState.blocked.byDeviceMissing) {\n        return `${kind} device missing`;\n      }\n      return `${kind} blocked`;\n    case 'off':\n      if (trackState.off.byUser) {\n        return `${kind} muted`;\n      } else if (trackState.off.byBandwidth) {\n        return `${kind} muted to save bandwidth`;\n      }\n      return `${kind} off`;\n    case 'sendable':\n      return `${kind} not subscribed`;\n    case 'loading':\n      return `${kind} loading...`;\n    case 'interrupted':\n      return `${kind} interrupted`;\n    case 'playable':\n      return null;\n  }\n}\n\n/**\n * Props\n * - videoTrackState: DailyTrackState?\n * - audioTrackState: DailyTrackState?\n * - isLocalPerson: boolean\n * - isAudioOnly: boolean\n * - isLarge: boolean\n * - disableCornerMessage: boolean\n * - onClick: Function\n * \n */\nexport default function Tile(props) {\n  const videoEl = useRef(null);\n  const audioEl = useRef(null);\n\n  const videoTrack = useMemo(() => {\n    return props.videoTrackState && props.videoTrackState.state === 'playable' && (props.isLocalPerson || props.videoTrackState.subscribed === true)\n      ? props.videoTrackState.track\n      : null;\n  }, [props.videoTrackState]);\n\n  const audioTrack = useMemo(() => {\n\n    if (!props.audioTrackState || props.audioTrackState.state !== 'playable' || props.audioTrackState.subscribed === false) \n        {return null;}\n    if (props.isAudioOnly) {\n      props.audioTrackState.track.isFiltered=true;\n    } else {props.audioTrackState.track.isFiltered=false};\n    return props.audioTrackState.track\n  }, [props.audioTrackState]);\n\n  const videoUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('video', props.videoTrackState);\n  }, [props.videoTrackState]);\n\n  const audioUnavailableMessage = useMemo(() => {\n    return getTrackUnavailableMessage('audio', props.audioTrackState);\n  }, [props.audioTrackState]);\n\n  /**\n   * When video track changes, update video srcObject\n   */\n  useEffect(() => {\n    videoEl.current &&\n      (videoEl.current.srcObject = new MediaStream([videoTrack]));\n  }, [videoTrack]);\n\n  /**\n   * When audio track changes, update audio srcObject\n   */\n  useEffect(() => {\n    if(audioEl.current) {\n\n      window.test=audioTrack;\n      \n      if(audioTrack.isFiltered) {\n        console.log('***FILTERED***')\n\n            //create audio stream\n              let stream= new MediaStream([audioTrack]);\n\n              //workaround for bug in Chrome, see: https://bit.ly/3ryn1fW\n                    const mutedAudio = new Audio(); \n                    mutedAudio.muted = true;\n                    mutedAudio.srcObject = stream;\n                    mutedAudio.play(); \n\n              //create Audio Context and destination\n              const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n              let audioSourceNode = audioCtx.createMediaStreamSource(stream);\n              let destination = audioCtx.createMediaStreamDestination();\n\n              //gain Node\n              let gainNode = audioCtx.createGain();\n              gainNode.gain.value=1;\n              //panner Node\n              var panNode = audioCtx.createStereoPanner();\n              panNode.pan.value=1;\n\n              //Pipe source through nodes to destination\n              audioSourceNode.connect(gainNode).connect(panNode).connect(destination);\n\n              //Attach to the audio element\n              audioEl.current.srcObject = destination.stream;\n\n              // for debugging\n              window.destination=destination; \n              window.audioTrack=audioTrack;\n              window.audioEl = audioEl;\n      } \n      else {\n        console.log('***NOT FILTERED***')\n        audioEl.current.srcObject = new MediaStream([audioTrack]);\n      }\n\n      }\n      \n  }, [audioTrack,window.sessionState]);\n\n  function getVideoComponent() {\n    return videoTrack && <video autoPlay muted playsInline ref={videoEl} />;\n\n    \n  }\n\n  function getAudioComponent() {\n    return (\n      !props.isLocalPerson &&\n      audioTrack && <audio autoPlay playsInline ref={audioEl} > </audio>\n    );\n  }\n\n  function getOverlayComponent() {\n    // Show overlay when video is unavailable. Audio may be unavailable too.\n    return videoTrack && (\n      videoUnavailableMessage && (\n        <p className=\"overlay\">\n          {videoUnavailableMessage}\n          {/* {audioUnavailableMessage && (\n            <>\n              <br />\n              {audioUnavailableMessage}\n            </>\n          )} */}\n        </p>\n      )\n    );\n  }\n\n  function getCornerMessageComponent() {\n    // Show corner message when only audio is unavailable.\n    return (\n      !props.disableCornerMessage &&\n      audioUnavailableMessage &&\n      !videoUnavailableMessage && (\n        <p className=\"corner\">{audioUnavailableMessage}</p>\n      )\n    );\n  }\n\n  function getClassNames() {\n    let classNames = 'tile';\n    classNames += props.isLarge ? ' large' : ' small';\n    props.isLocalPerson && (classNames += ' local');\n    return classNames;\n  }\n\n  return (\n    ///TODO change to block : none\n    <div className={getClassNames()} onClick={props.onClick} style={{display: videoTrack ? \"block\" : \"block\"}}>  \n      <div className=\"background\"/> \n      {getOverlayComponent()}\n      {getVideoComponent()}\n      {videoTrack && getCornerMessageComponent()}\n      {getAudioComponent()}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}