{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyInfoContext from '../../MyInfoContext';\nimport SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  const sessionState = useContext(SessionContext);\n  const myInfo = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  useEffect(() => {\n    window.setSubscriptions = setSubscriptions;\n  }, []);\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-updated', 'participant-left'];\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      }); // if(event.action!='participant-updated') {\n      //   setSubscriptions(sessionState,myInfo,callObject);\n      // }\n\n      console.log(event);\n      window.test = event;\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject, sessionState]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n  /**\n   * Send an app message to the remote participant whose tile was clicked on.\n   */\n\n  const sendHello = useCallback(participantId => {\n    callObject && callObject.sendAppMessage({\n      hello: 'world'\n    }, participantId);\n  }, [callObject]);\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && Object.keys(callState.callItems).length >= 3 //////\n      ;\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id),\n        isMyFirst: \"true\",\n        onClick: isLocal(id) ? null : () => {\n          sendHello(id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${largeTiles.length}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","Tile","CallObjectContext","MyInfoContext","SessionContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","setSubscriptions","Call","callObject","sessionState","myInfo","callState","dispatch","window","events","handleNewParticipantsState","event","type","participants","console","log","test","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","e","t","setTimeout","clearTimeout","sendHello","participantId","sendAppMessage","hello","getTiles","largeTiles","smallTiles","Object","entries","callItems","forEach","id","callItem","isLarge","keys","length","tile","videoTrackState","audioTrackState","push","smallTales","add","n","i","addFakeParticipant","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyInfoContext from '../../MyInfoContext';\nimport SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  const sessionState = useContext(SessionContext);\n  const myInfo = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n\n\n  useEffect(()=> {\n    window.setSubscriptions=setSubscriptions;\n  },[])\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n    ];\n\n   \n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n      // if(event.action!='participant-updated') {\n      //   setSubscriptions(sessionState,myInfo,callObject);\n      // }\n      console.log(event);\n      window.test=event;\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject,sessionState]);\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  /**\n   * Send an app message to the remote participant whose tile was clicked on.\n   */\n  const sendHello = useCallback(\n    (participantId) => {\n      callObject &&\n        callObject.sendAppMessage({ hello: 'world' }, participantId);\n    },\n    [callObject]\n  );\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems) \n        || isLocal(id) && Object.keys(callState.callItems).length>=3  //////\n        );\n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          isMyFirst='true'\n          onClick={\n            isLocal(id)\n              ? null\n              : () => {\n                  sendHello(id);\n                }\n          }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className=\"call\">\n                                      {/* add # of tiles to class name */}\n      <div className={`large-tiles count-${largeTiles.length}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}