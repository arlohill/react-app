{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext'; // import MyInfoContext from '../../MyInfoContext';\n// import SessionContext from '../../SessionContext';\n\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext); // const [ sessionState, setSessionState ] = useContext(SessionContext);\n  // const [ myInfo, setMyInfo ] = useContext(MyInfoContext);\n\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n\n  window.updateCall = () => {\n    forceUpdate();\n  };\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-updated', 'participant-left'];\n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      window.event = e;\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      });\n\n      if (e && e.action != 'participant-updated') {\n        setSubscriptions(callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n        let thisUserName = e.participant.user_name;\n        let thisSessionID = e.participant.session_id;\n\n        if (e.action == \"participant-joined\") {\n          window.event = e;\n          console.log(`thisUserName: ${thisUserName}`);\n          const getUserName = setInterval(() => {\n            if (thisUserName) {\n              updateUserList();\n              clearInterval(getUserName);\n            } else {\n              let participants = callObject.participants();\n\n              for (const participant in participants) {\n                if (participants[participant].session_id == thisSessionID) {\n                  thisUserName = participants[participant].user_name;\n                }\n              }\n            }\n          }, 100);\n\n          function updateUserList() {\n            let SessionIDLabel = thisUserName + \"_SessionID\";\n            window[SessionIDLabel] = thisSessionID;\n\n            if (thisUserName == 'SUPERDUPER') {\n              console.log('***did not add to list because this is the screenshare widget.');\n              return;\n            }\n\n            console.log('********Adding user to list: ' + thisUserName);\n            window.userList.push(thisUserName);\n\n            if (typeof window.updateAdminPanel !== 'undefined') {\n              window.updateAdminPanel();\n            }\n\n            ;\n\n            if (thisUserName == 'Admin') {\n              window.adminPresent = true;\n            }\n          }\n        } else if (e.action == \"participant-left\") {\n          //remove from userList\n          let index = window.userList.indexOf(thisUserName);\n\n          if (index > -1) {\n            window.userList.splice(index, 1);\n          }\n\n          if (window.userList.indexOf('Admin') == -1) {\n            window.adminPresent = false;\n          }\n        }\n\n        console.log('Admin present: ' + window.adminPresent);\n        console.log('UserList: ' + window.userList);\n      }\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n      callObject.on(\"joined-meeting\", () => {\n        if (window.myRole != 'Admin') {\n          callObject.setUserName('billy');\n        }\n      });\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n  const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {\n    return str.indexOf('_AUDIO') === -1;\n  }).filter(function (str) {\n    return str.indexOf('_AUDIO') === -1;\n  }).filter(function (str) {\n    return str.indexOf(window.myName) === -1;\n  }).length; //number of subs, not counting audio-only or my name\n\n  useEffect(() => {\n    window.numberOfSubs = numberOfSubs;\n  }, [numberOfSubs]);\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isAudioOnly = () => {\n        if (!callItem.audioTrackState || !callItem.videoTrackState) {\n          return;\n        }\n\n        return callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed;\n      };\n\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && numberOfSubs && numberOfSubs > 1 && !containsScreenShare(callState.callItems); //videoTrackState()\n\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isAudioOnly: isAudioOnly(),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id),\n        isScreenShare: isScreenShare(id) // onClick={\n        //   isLocal(id)\n        //     ? null\n        //     : () => {\n        //         sendHello(id);\n        //       }\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: window.amAdmin ? \"call-with-sidebar\" : \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${containsScreenShare(callState.callItems) && '1' || numberOfSubs && numberOfSubs + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","useState","Tile","CallObjectContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","setSubscriptions","useForceUpdate","value","setValue","Call","callObject","callState","dispatch","forceUpdate","window","updateCall","events","handleNewParticipantsState","e","event","type","participants","action","console","log","thisUserName","participant","user_name","thisSessionID","session_id","getUserName","setInterval","updateUserList","clearInterval","SessionIDLabel","userList","push","updateAdminPanel","adminPresent","index","indexOf","splice","on","myRole","setUserName","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","t","setTimeout","clearTimeout","numberOfSubs","currentSubs","filter","str","myName","length","getTiles","largeTiles","smallTiles","Object","entries","callItems","forEach","id","callItem","isAudioOnly","audioTrackState","videoTrackState","subscribed","isLarge","tile","smallTales","add","n","i","addFakeParticipant","amAdmin","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\n// import MyInfoContext from '../../MyInfoContext';\n// import SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  // const [ sessionState, setSessionState ] = useContext(SessionContext);\n  // const [ myInfo, setMyInfo ] = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n\n\n  window.updateCall = () => {\n    forceUpdate();\n  }\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n    ];\n\n   \n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      window.event=e;\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n      if(e && e.action!='participant-updated') {\n        setSubscriptions(callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n          \n          let thisUserName = e.participant.user_name;\n          let thisSessionID = e.participant.session_id;\n\n          if (e.action==\"participant-joined\") {\n            window.event=e;\n            console.log(`thisUserName: ${thisUserName}`);\n            const getUserName = setInterval(\n              ()=>{\n                    if (thisUserName) \n                      {updateUserList();\n                      clearInterval(getUserName);\n                      }\n                    else {\n                      let participants = callObject.participants();\n                      for (const participant in participants) {\n                        if (participants[participant].session_id == thisSessionID) {\n                          thisUserName = participants[participant].user_name;\n                        }\n                      }\n                    }\n                  },100);\n\n            function updateUserList() {\n              let SessionIDLabel = thisUserName + \"_SessionID\";\n              window[SessionIDLabel] = thisSessionID;\n              if(thisUserName=='SUPERDUPER') {console.log ('***did not add to list because this is the screenshare widget.'); return;}\n              console.log('********Adding user to list: ' + thisUserName);\n              window.userList.push(thisUserName);\n              if(typeof(window.updateAdminPanel)!=='undefined') {window.updateAdminPanel()};\n              if (thisUserName=='Admin') {\n                  window.adminPresent=true;\n              }\n            }\n\n            \n            \n          } else if (e.action==\"participant-left\") {\n            //remove from userList\n            let index = window.userList.indexOf(thisUserName);\n            if (index > -1) {\n            window.userList.splice(index, 1);\n            }\n            if (window.userList.indexOf('Admin')==-1) {\n              window.adminPresent=false;\n            }\n           \n          }\n\n          \n\n          console.log('Admin present: ' + window.adminPresent);\n          console.log('UserList: ' + window.userList);\n      }\n      \n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n      callObject.on(\"joined-meeting\",()=>{\n        if (window.myRole!='Admin') {\n          callObject.setUserName('billy');\n        }\n      })\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n\n\n  useEffect(()=>{\nwindow.numberOfSubs =numberOfSubs;\n  },[numberOfSubs])\n\n\n\n \n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n\n\n      const isAudioOnly = () => {\n        if(!callItem.audioTrackState || !callItem.videoTrackState) {return}\n        return (callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed);\n      }\n\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems)) \n        || (isLocal(id) && numberOfSubs && numberOfSubs>1 && !containsScreenShare(callState.callItems))   //videoTrackState()\n\n        \n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isAudioOnly={isAudioOnly()}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          isScreenShare={isScreenShare(id)}\n          // onClick={\n          //   isLocal(id)\n          //     ? null\n          //     : () => {\n          //         sendHello(id);\n          //       }\n          // }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n    \n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className={window.amAdmin ? \"call-with-sidebar\" : \"call\"}>\n                                      {/* add # of tiles to class name. alternative: {largeTiles.length}*/}\n      <div className={`large-tiles count-${(containsScreenShare(callState.callItems)&&'1')||numberOfSubs && numberOfSubs+1}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}