{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Tray/Tray.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, { TYPE_MUTE_CAMERA, TYPE_MUTE_MIC, TYPE_SCREEN, TYPE_LEAVE, TYPE_CHAT } from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n  const camCaret = React.createRef();\n  const camSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  };\n\n  const [showMicSettings, setShowMicSettings] = useState(false);\n  const [showCamSettings, setShowCamSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return function cleanup() {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n\n  const handleClickOutside = event => {\n    console.log('handling click');\n\n    if (micSettings.current && !micSettings.current.contains(event.target) && !micCaret.current.contains(event.target)) {\n      setShowMicSettings(false);\n    } else if (camSettings.current && !camSettings.current.contains(event.target) && !camCaret.current.contains(event.target)) {\n      setShowCamSettings(false);\n    }\n  }; // function toggleSharingScreen() {\n  //   isSharingScreen\n  //     ? callObject.stopScreenShare()\n  //     : navigator.mediaDevices.getDisplayMedia({\n  //       video: true,\n  //       audio: true,\n  //     }).then((stream)=>callObject.startScreenShare({\n  //       mediaStream:stream}))\n  //       // share getDisplayMedia stream\n  //       // mediaStream: window.screenStream,\n  //       // share getDisplayMedia audio track only\n  //       // mediaStream: window.screenStream,\n  //       // share local cam via screen stream\n  //       // mediaStream: window.localCam,\n  //       // share only audio from local cam via screen stream\n  //       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n  //     // });\n  // }\n\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow() {\n    window.open(\"http://\" + window.location.host + \"/share\", \"test\", \"width=300, height=300\");\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: window.amAdmin ? \"tray-with-sidebar\" : \"tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_CAMERA // disabled={props.disabled}\n    ,\n    highlighted: isCameraMuted,\n    onClick: toggleCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      setShowCamSettings(!showCamSettings);\n    },\n    style: {\n      position: 'absolute',\n      left: '55px',\n      bottom: '23px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"caret\",\n    ref: camCaret,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, \"^\"), showCamSettings ? /*#__PURE__*/React.createElement(InputSelector, {\n    type: \"video\",\n    page: \"main\",\n    ref: camSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 18\n    }\n  }) : null), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_MIC // disabled={props.disabled}\n    ,\n    highlighted: isMicMuted,\n    onClick: toggleMic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      setShowMicSettings(!showMicSettings);\n    },\n    style: {\n      position: 'absolute',\n      left: '125px',\n      bottom: '23px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"caret\",\n    ref: micCaret,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, \"^\"), showMicSettings ? /*#__PURE__*/React.createElement(InputSelector, {\n    type: \"audio\",\n    page: \"main\",\n    ref: micSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 16\n    }\n  }) : null), DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_SCREEN // disabled={props.disabled}\n    ,\n    highlighted: isSharingScreen,\n    onClick: openScreenShareWindow // onClick={toggleSharingScreen}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_CHAT // disabled={props.disabled}\n    ,\n    highlighted: highlightedChat,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    onClickDisplay: displayChat,\n    notification: handleNewChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }), window.sessionState && window.sessionState.isActive && (window.myRole == 'Attendee' || window.myRole == 'Admin') && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      zIndex: '999',\n      height: '80px',\n      bottom: '10px',\n      overflow: 'hidden',\n      visibility: 'visible',\n      flexGrow: '1',\n      textAlign: 'center',\n      position: 'absolute',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    id: \"my-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: \"view-mode\",\n    onChange: e => window.setViewMode(e.target.value),\n    style: {\n      fontSize: '14px',\n      outline: 'none',\n      position: 'relative',\n      borderRadius: '20px',\n      height: '30px',\n      width: '100px',\n      bottom: '-22px',\n      cursor: 'pointer',\n      backgroundColor: '#2196F3',\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Seller\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }, \"Seller\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Shadow1\",\n    selected: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }, \"Shadow 1\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Shadow2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, \"Shadow 2\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Shadow3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, \"Shadow 3\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Shadow4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, \"Shadow 4\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, \"All\")))), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      position: 'relative',\n      bottom: '3px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, \"My view\")), window.myRole != 'Attendee' && window.myRole != 'Admin' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-role\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, \"Roleplay: \\xA0 \", window.sessionState.isActive ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'green',\n      width: '70px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 31\n    }\n  }, \" Active\") : /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'red',\n      width: '70px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 31\n    }\n  }, \" Paused\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vertical-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }), \"My role: \\xA0 \", /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      backgroundColor: 'white',\n      borderRadius: '5px',\n      height: '10px',\n      color: 'blue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 30\n    }\n  }, \" \", window.myRole.match(/\\D/g).join(''), \" \")), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_LEAVE,\n    disabled: props.disabled,\n    newButtonGroup: true,\n    highlighted: true,\n    onClick: leaveCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","InputSelector","Chat","CallObjectContext","logDailyEvent","DailyIframe","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","forceUpdate","micCaret","createRef","micSettings","camCaret","camSettings","window","updateTray","showMicSettings","setShowMicSettings","showCamSettings","setShowCamSettings","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","document","addEventListener","handleClickOutside","cleanup","removeEventListener","event","console","log","current","contains","target","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","openScreenShareWindow","open","location","host","handleNewParticipantsState","on","off","amAdmin","position","left","bottom","supportedBrowser","supportsScreenShare","sessionState","isActive","myRole","zIndex","height","overflow","visibility","flexGrow","textAlign","transform","border","e","setViewMode","fontSize","outline","borderRadius","width","cursor","backgroundColor","color","match","join","disabled"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n  const camCaret = React.createRef();\n  const camSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  }\n\n  const [showMicSettings,setShowMicSettings] = useState(false);\n  const [showCamSettings,setShowCamSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n\n  useEffect(()=> {\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n\n return function cleanup() {\n    document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  })\n\n  const handleClickOutside = (event) => {\n    console.log('handling click');\n    if (micSettings.current &&\n      !micSettings.current.contains(event.target) &&\n      !micCaret.current.contains(event.target)\n    ) {\n      setShowMicSettings(false);\n    } else if (camSettings.current &&\n      !camSettings.current.contains(event.target) &&\n      !camCaret.current.contains(event.target)\n    ) {\n      setShowCamSettings(false);\n    } \n    \n  }\n\n  // function toggleSharingScreen() {\n\n    \n  //   isSharingScreen\n  //     ? callObject.stopScreenShare()\n  //     : navigator.mediaDevices.getDisplayMedia({\n  //       video: true,\n  //       audio: true,\n  //     }).then((stream)=>callObject.startScreenShare({\n  //       mediaStream:stream}))\n  //       // share getDisplayMedia stream\n  //       // mediaStream: window.screenStream,\n\n  //       // share getDisplayMedia audio track only\n        \n  //       // mediaStream: window.screenStream,\n\n  //       // share local cam via screen stream\n  //       // mediaStream: window.localCam,\n\n  //       // share only audio from local cam via screen stream\n  //       // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n  //     // });\n  // }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow () {\n    window.open(\"http://\" + window.location.host + \"/share\",\"test\",\"width=300, height=300\");\n\n  }\n\n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className={window.amAdmin ? \"tray-with-sidebar\" : \"tray\"}>\n\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        // disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      \n      <div onClick={()=>{setShowCamSettings(!showCamSettings)}}  style={{position:'absolute',left:'55px', bottom:'23px',}}>\n        <p className=\"caret\" ref={camCaret}>^</p>\n                {showCamSettings ? \n                (<InputSelector type='video' page='main' ref={camSettings}/>)\n                : \n                null}\n      </div>\n      \n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        // disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      <div onClick={()=>{setShowMicSettings(!showMicSettings)}}  style={{position:'absolute',left:'125px', bottom:'23px'}}>\n      {/* <img src={Caret} style={{position:'absolute',left:'52px', bottom:'42px', height:'18px',fontSize:'15px'}} /> */}\n      \n      <p className=\"caret\" ref={micCaret}>^</p>\n              {showMicSettings ? \n              (<InputSelector type='audio' page='main' ref={micSettings}/>)\n              : \n              null}\n              \n      </div>\n      {DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          // disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={openScreenShareWindow}\n          // onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        // disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n        \n\n      {/* <!-- Control who you see during a session --> */}\n      {window.sessionState && window.sessionState.isActive && (window.myRole=='Attendee' || window.myRole=='Admin') && (\n        <div style={{zIndex:'999', height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible', flexGrow:'1', textAlign: 'center', position:'absolute', left:'50%', transform:'translateX(-50%)'}} id='my-view'>\n        <form action = ''>\n              <fieldset style={{border:'none'}}>\n              <select id = 'view-mode' onChange = {(e)=>window.setViewMode(e.target.value)} style={{fontSize:'14px',outline:'none', position: 'relative', borderRadius: '20px', height:'30px', width:'100px', bottom:'-22px', cursor:'pointer', backgroundColor: '#2196F3', color:'white'}}>\n              <option value = 'Seller'>Seller</option>\n              <option value = 'Shadow1' selected>Shadow 1</option>\n              <option value = 'Shadow2'>Shadow 2</option>\n              <option value = 'Shadow3'>Shadow 3</option>\n              <option value = 'Shadow4'>Shadow 4</option>\n              <option value = 'All'>All</option>\n              </select>\n              </fieldset>\n              </form>\n              <p style={{position:'relative', bottom: '3px'}}>My view</p>\n      </div>\n      )}\n\n      {/* Display my role */}\n      {window.myRole!='Attendee' && window.myRole!='Admin' && (\n          <div className='my-role'>\n\n          \n            Roleplay: &nbsp; {window.sessionState.isActive ? \n                              <span style={{color:'green',width:'70px'}}> Active</span>\n                              :\n                              <span style={{color:'red',width:'70px'}}> Paused</span>\n                            }\n\n            <div className='vertical-line'></div>\n\n\n             My role: &nbsp; <span style={{backgroundColor:'white',borderRadius:'5px',height:'10px',color:'blue'}}> {window.myRole.match(/\\D/g).join('')} </span>\n\n\n          </div>\n      )}\n      \n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}