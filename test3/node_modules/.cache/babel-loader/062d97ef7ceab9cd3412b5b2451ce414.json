{"ast":null,"code":"// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\nexport default function setSubscriptions(callObject) {\n  console.log('Setting subscriptions...');\n  console.log('****My role is: ' + window.myRole);\n  let subscribedTo = 0;\n  window.currentSubs = [];\n  let filteredSubs = []; //if session is active, set currentSubs according to my role\n\n  if (window.sessionState.isActive) {\n    switch (window.myRole) {\n      case 'Participant1':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n        !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      case 'Participant2':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n        !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        break;\n\n      case 'Actor1':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1 + '_AUDIO');\n        break;\n\n      case 'Actor2':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2 + '_AUDIO');\n        break;\n\n      case 'Attendee':\n        window.currentSubs = [];\n        break;\n\n      default:\n        window.currentSubs = [];\n        break;\n    } //Add Admin to currentSubs if applicable\n\n\n    if (window.sessionState.AdminVisible) {\n      window.currentSubs.push(\"Admin\");\n    }\n  } //if NOT active, set audio-filtered subs for the Seconds\n  // else if (!window.sessionState.isActive) {\n  //     switch (window.myRole) {\n  //         case 'Actor1':\n  //             window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1);\n  //             break;\n  //         case 'Actor2':\n  //             window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2);\n  //             break;\n  //         default:\n  //             break;\n  //     }\n  //     window.filteredSubs=filteredSubs;\n  // }\n\n\n  function setTracks() {\n    return new Promise(resolve => {\n      //cycle through each participant in meeting\n      let ps = callObject.participants();\n      Object.keys(ps).forEach(p => {\n        let participant = ps[p];\n        let thisUserName = participant.user_name;\n\n        if (p === 'local') {\n          return;\n        }\n\n        console.log(\"This username is: \" + thisUserName); //If NOT ACTIVE, subscribe to everyone in the meeting\n\n        if (!window.sessionState.isActive) {\n          //audio only if currently Seconding\n          if (window.myRole.includes('Actor')) {\n            switch (window.myRole) {\n              case 'Actor1':\n                if (thisUserName == window.sessionState.roleOf.Participant1) {\n                  console.log('Subscribing to audio only for: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: false\n                  });\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: {\n                      audio: true,\n                      video: false,\n                      screenVideo: false\n                    }\n                  });\n                } else {\n                  console.log('Subscribing to: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: true\n                  });\n                  subscribedTo++;\n                }\n\n                break;\n\n              case 'Actor2':\n                if (thisUserName == window.sessionState.roleOf.Participant2) {\n                  console.log('Subscribing to audio only for: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: false\n                  });\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: {\n                      audio: true,\n                      video: false,\n                      screenVideo: false\n                    }\n                  });\n                } else {\n                  console.log('Subscribing to: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: true\n                  });\n                  subscribedTo++;\n                }\n\n                break;\n\n              default:\n                break;\n            }\n          } // audio and video for everyone else\n          else {\n              console.log('Subscribing to: ' + thisUserName);\n\n              if (!callObject.participants()[participant.session_id].tracks.video.subscribed) {\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: false\n                });\n              }\n\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } //  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n          //     console.log('Subscribing to Admin:');\n          //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n          //     subscribedTo++;\n          //     console.log('Subscribed to session id: ' + participant.session_id);\n          // } \n\n        } //IF ACTIVE, just subscribe to those listed in currentSubs;\n        else if (window.sessionState.isActive) {\n            if (window.currentSubs.includes(thisUserName + '_AUDIO')) {\n              console.log('Subscribing to audio only for: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: {\n                  audio: true,\n                  video: false,\n                  screenVideo: false\n                }\n              });\n            } else if (window.currentSubs.includes(thisUserName)) {\n              console.log('Subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } else if (!window.currentSubs.includes(thisUserName)) {\n              console.log('NOT subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: false\n              });\n            }\n          }\n      });\n      resolve();\n    });\n  }\n\n  setTracks().then(() => {\n    //print subscriptions\n    var iterator = window.currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n\n    for (let elements of iterator) {\n      console.log(elements);\n    }\n\n    if (window.currentSubs.length < 1) {\n      console.log(\"No one.\");\n    }\n\n    window.setSubscriptions = setSubscriptions;\n    console.log('window.currentSubs is: ' + window.currentSubs); //if no admin (or admin has left), start asking for state\n    // if (adminPresent==false) {\n    //     window.sessionState.isKnown=false;\n    //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n    //     stateRequest = setInterval(getState,2500);\n    //     console.log('no Admin present');\n    // }\n    // if (subscribedTo==0) {\n    //     window.isPopulated = false;\n    //     document.getElementById('empty-room').style.opacity='1';\n    //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n    //     if (window.sessionState.isActive==true) {\n    //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n    //     } else if (window.sessionState.isActive==false) {\n    //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n    //     }\n    // } else if (subscribedTo>0) {\n    //     window.isPopulated = true;\n    //     document.getElementById('empty-room').style.opacity='0';\n    //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n    //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n    //     }\n    // }\n  });\n}\n;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/hooks/setSubscriptions.js"],"names":["setSubscriptions","callObject","console","log","window","myRole","subscribedTo","currentSubs","filteredSubs","sessionState","isActive","roleOf","Actor2","push","Participant2","Actor1","Participant1","AdminVisible","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","includes","updateParticipant","session_id","setSubscribedTracks","audio","video","screenVideo","tracks","subscribed","then","iterator","values","elements","length"],"mappings":"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","sourcesContent":["// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\n\nexport default function setSubscriptions(callObject) {\n\n    console.log('Setting subscriptions...');\n    console.log('****My role is: ' + window.myRole);\n    let subscribedTo=0;\n    window.currentSubs=[];\n    let filteredSubs=[];\n    \n    //if session is active, set currentSubs according to my role\n        if (window.sessionState.isActive) {\n            switch (window.myRole) {\n                case 'Participant1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                    !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    break;\n                case 'Participant2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                    !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    break;\n                case 'Actor1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');\n                    break;\n                case 'Actor2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');\n                    break;\n                case 'Attendee':\n                    window.currentSubs=[];\n                    break;\n                default:\n                    window.currentSubs=[];\n                    break;\n            }\n            //Add Admin to currentSubs if applicable\n            if (window.sessionState.AdminVisible) {\n            window.currentSubs.push (\"Admin\");\n        }\n    }\n\n    //if NOT active, set audio-filtered subs for the Seconds\n    // else if (!window.sessionState.isActive) {\n    //     switch (window.myRole) {\n    //         case 'Actor1':\n    //             window.sessionState.roleOf.Participant1 && filteredSubs.push(window.sessionState.roleOf.Participant1);\n    //             break;\n    //         case 'Actor2':\n    //             window.sessionState.roleOf.Participant2 && filteredSubs.push(window.sessionState.roleOf.Participant2);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //     window.filteredSubs=filteredSubs;\n    // }\n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            Object.keys(ps).forEach((p) => {\n\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local') {\n                    return;\n                } \n\n\n\n                console.log(\"This username is: \" +thisUserName);\n                //If NOT ACTIVE, subscribe to everyone in the meeting\n                if (!window.sessionState.isActive) {\n\n                    //audio only if currently Seconding\n                    if (window.myRole.includes('Actor')) {\n                        switch (window.myRole) {\n                            case 'Actor1':\n                                    if (thisUserName==window.sessionState.roleOf.Participant1) {\n                                        console.log('Subscribing to audio only for: ' + thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                    } else {\n                                        console.log('Subscribing to: ' + thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                        subscribedTo++;\n                                    }\n                                break;\n                            case 'Actor2':\n                                if (thisUserName==window.sessionState.roleOf.Participant2) {\n                                    console.log('Subscribing to audio only for: ' + thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                } else {\n                                    console.log('Subscribing to: ' + thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                    subscribedTo++;\n                                }\n                            break;\n                        \n                            default:\n                                break;\n                        }\n                    }\n\n                    // audio and video for everyone else\n                    else {  \n                        console.log('Subscribing to: ' + thisUserName);\n                        if (!callObject.participants()[participant.session_id].tracks.video.subscribed){\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                        }\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    //  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n                    //     console.log('Subscribing to Admin:');\n                    //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                    //     subscribedTo++;\n                    //     console.log('Subscribed to session id: ' + participant.session_id);\n                    // } \n\n                } \n\n                //IF ACTIVE, just subscribe to those listed in currentSubs;\n                else if (window.sessionState.isActive) {\n                    if(window.currentSubs.includes(thisUserName+'_AUDIO')) {\n                        console.log('Subscribing to audio only for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n                    else if(window.currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!window.currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve()\n        })\n    }\n    \n    setTracks().then(()=>{\n\n        //print subscriptions\n    var iterator = window.currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (window.currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n\n  \n        window.setSubscriptions=setSubscriptions;\n\n        console.log('window.currentSubs is: ' + window.currentSubs);\n        //if no admin (or admin has left), start asking for state\n        // if (adminPresent==false) {\n        //     window.sessionState.isKnown=false;\n        //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n        //     stateRequest = setInterval(getState,2500);\n        //     console.log('no Admin present');\n        // }\n        // if (subscribedTo==0) {\n        //     window.isPopulated = false;\n        //     document.getElementById('empty-room').style.opacity='1';\n        //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n        //     if (window.sessionState.isActive==true) {\n        //         document.getElementById('empty-text').innerHTML=\"Hold that thought! üòê <br><br> We're working to fix a connection problem.\"\n        //     } else if (window.sessionState.isActive==false) {\n        //         document.getElementById('empty-text').innerHTML=\"üëã <br>You're here!<br>Waiting for everyone else...\"\n\n        //     }\n        // } else if (subscribedTo>0) {\n        //     window.isPopulated = true;\n        //     document.getElementById('empty-room').style.opacity='0';\n        //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n        //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n        //     }\n\n        // }\n\n    })\n\n    \n   \n};\n\n"]},"metadata":{},"sourceType":"module"}