{"ast":null,"code":"import _toConsumableArray from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect}from'react';import CallObjectContext from'../../CallObjectContext';import'./Chat.css';export default function Chat(props){var callObject=useContext(CallObjectContext);var _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputValue=_useState2[0],setInputValue=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),chatHistory=_useState4[0],setChatHistory=_useState4[1];var handleChange=function handleChange(event){setInputValue(event.target.value);};function handleSubmit(event){event.preventDefault();callObject.sendAppMessage({type:'chat',message:inputValue},'*');var name=callObject.participants().local.user_name?callObject.participants().local.user_name:'Guest';setChatHistory([].concat(_toConsumableArray(chatHistory),[{sender:name,message:inputValue}]));setInputValue('');}/**\n   * Update chat state based on a message received to all participants.\n   *\n   */useEffect(function(){if(!callObject){return;}function handleAppMessage(event){var participants=callObject.participants();var name=participants[event.fromId].user_name?participants[event.fromId].user_name:'Guest';event.data.type=='chat'&&setChatHistory([].concat(_toConsumableArray(chatHistory),[{sender:name,message:event.data.message}]));// Make other icons light up\nevent.data.type=='chat'&&props.notification();}callObject.on('app-message',handleAppMessage);return function cleanup(){callObject.off('app-message',handleAppMessage);};},[callObject,chatHistory]);useEffect(function(){},[chatHistory]);return props.onClickDisplay?/*#__PURE__*/React.createElement(\"div\",{className:\"chat\"},chatHistory.map(function(entry,index){return/*#__PURE__*/React.createElement(\"div\",{key:\"entry-\".concat(index),className:\"messageList\"},/*#__PURE__*/React.createElement(\"b\",null,entry.sender),\": \",entry.message);}),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"chatInput\"}),/*#__PURE__*/React.createElement(\"input\",{id:\"chatInput\",className:\"chat-input\",type:\"text\",placeholder:\"Type your message here..\",value:inputValue,onChange:handleChange}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",className:\"send-chat-button\"},\"Send\"))):null;}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/Chat/Chat.js"],"names":["React","useContext","useState","useEffect","CallObjectContext","Chat","props","callObject","inputValue","setInputValue","chatHistory","setChatHistory","handleChange","event","target","value","handleSubmit","preventDefault","sendAppMessage","type","message","name","participants","local","user_name","sender","handleAppMessage","fromId","data","notification","on","cleanup","off","onClickDisplay","map","entry","index"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport './Chat.css';\n\nexport default function Chat(props) {\n  const callObject = useContext(CallObjectContext);\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    callObject.sendAppMessage({ type:'chat', message: inputValue }, '*');\n    const name = callObject.participants().local.user_name\n      ? callObject.participants().local.user_name\n      : 'Guest';\n    setChatHistory([\n      ...chatHistory,\n      {\n        sender: name,\n        message: inputValue,\n      },\n    ]);\n    setInputValue('');\n  }\n\n  /**\n   * Update chat state based on a message received to all participants.\n   *\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      const participants = callObject.participants();\n      const name = participants[event.fromId].user_name\n        ? participants[event.fromId].user_name\n        : 'Guest';\n      event.data.type=='chat'&& setChatHistory([\n        ...chatHistory,\n        {\n          sender: name,\n          message: event.data.message,\n        },\n      ]);\n      // Make other icons light up\n      event.data.type=='chat'&& props.notification();\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, chatHistory]);\n\n  useEffect(() => {}, [chatHistory]);\n\n  return props.onClickDisplay ? (\n    <div className=\"chat\">\n      {chatHistory.map((entry, index) => (\n        <div key={`entry-${index}`} className=\"messageList\">\n          <b>{entry.sender}</b>: {entry.message}\n        </div>\n      ))}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"chatInput\"></label>\n        <input\n          id=\"chatInput\"\n          className=\"chat-input\"\n          type=\"text\"\n          placeholder=\"Type your message here..\"\n          value={inputValue}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className=\"send-chat-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}