{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/App/App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport { sendState } from '../AdminPanel/AdminFunctions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n    type: 'sessionState',\n    isKnown: false,\n    isActive: false,\n    AdminVisible: false,\n    hasAnUpdate: false,\n    roleOf: {\n      Buyer1: '',\n      Buyer2: '',\n      Buyer3: '',\n      Seller: '',\n      Shadow1: '',\n      Shadow2: '',\n      Shadow3: '',\n      Shadow4: ''\n    }\n  });\n  const [myState, setMyState] = useState({\n    name: 'Your first name',\n    role: window.myRole,\n    amAdmin: window.amAdmin,\n    userList: {\n      names: [],\n      sessionIdFor: {}\n    },\n    adminPresent: false,\n    viewMode: null,\n    audioIsPlaying: false,\n    camOnAtSessionStart: null,\n    micOnAtSessionStart: nurll,\n    number: null\n  });\n\n  const setName = newName => {\n    setMyState(prev => ({ ...prev,\n      name: newName\n    }));\n  };\n\n  const setViewMode = newViewMode => {\n    setMyState(prev => ({ ...prev,\n      viewMode: newViewMode\n    }));\n  };\n\n  const setRole = newRole => {\n    setMyState(prev => ({ ...prev,\n      role: newRole\n    }));\n  };\n\n  const setUserList = newUserList => {\n    setMyState(prev => ({ ...prev,\n      userList: newUserList\n    }));\n  };\n\n  const setAmAdmin = boolean => {\n    setMyState(prev => ({ ...prev,\n      amAdmin: boolean\n    }));\n  };\n\n  const setAdminPresent = boolean => {\n    setMyState(prev => ({ ...prev,\n      adminPresent: boolean\n    }));\n  };\n\n  const setMicOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      micOnAtSessionStart: boolean\n    }));\n  };\n\n  const setCamOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      camOnAtSessionStart: boolean\n    }));\n  };\n\n  const setNumber = newNum => {\n    setMyState(prev => ({ ...prev,\n      number: newNum\n    }));\n  };\n\n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\";\n  }\n  /**\n   * Creates a new call room.\n   */\n\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({\n      subscribeToTracksAutomatically: false\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n\n    if (window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n      newCallObject.join({\n        userName: myState.name,\n        url,\n        audioSource: window.initialInputs[0],\n        videoSource: window.initialInputs[1]\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(mediaStream => {\n        if (mediaStream) {\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n\n          if (localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0) {\n            newCallObject.join({\n              userName: myState.name,\n              url,\n              audioSource: localAudio[0],\n              videoSource: localVideo[0]\n            });\n          }\n        } else {//message e.g. you need a mic to join\n        }\n      });\n    }\n\n    console.log('joining the call as ' + myState.name);\n    const pageUrl = pageUrlFromRoomUrl(roomUrl) + '&N=' + myState.name + '&R=' + myState.role;\n  }, [myState.name]);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl = pageUrl; // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n\n    if (myState.role) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&R=' + window.myRole;\n      } else {\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&P=' + window.myP;\n      } else {\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]);\n  /**\n  * Attach myState object to window for debugging purposes.\n  */\n\n  useEffect(() => {\n    window.myState = myState;\n  }, [myState]);\n\n  function getState() {\n    if (sessionState.isKnown == true) {\n      clearInterval(window.stateRequest);\n      return;\n    }\n\n    if (myState.adminPresent) {\n      callObject.sendAppMessage(\"State please?\", '*');\n      console.log('Requesting meeting state...');\n    }\n  }\n\n  const checkIfAdminPresent = () => {\n    return new Promise(resolve => {\n      let adminAlreadyPresent = false;\n      let ps = callObject.participants();\n      const lookForMoreParticipants = setInterval(() => {\n        //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n        if (Object.keys(ps).length > 1 || Object.keys(ps).length <= 1 && ps.local.user_name == myState.name) {\n          clearInterval(lookForMoreParticipants);\n\n          for (const p in ps) {\n            let thisUserName = ps[p].user_name;\n\n            if (thisUserName.includes('_Admin') && p !== 'local') {\n              adminAlreadyPresent = true;\n            }\n\n            console.log(`Participant present: ${thisUserName}`);\n          }\n\n          resolve(adminAlreadyPresent);\n        } else {\n          return;\n        }\n      }, 500);\n    });\n  };\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error', 'participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          }); // window.userList.push(window.myName);\n\n          console.log('JOINED MEETING');\n\n          if (myState.name == \"\") {\n            callObject.leave();\n          }\n\n          setUserList({\n            names: [myState.name]\n          });\n\n          if (!window.sessionState.isKnown) {\n            if (window.myRole == \"Admin\") {\n              checkIfAdminPresent().then(anAdminIsPresent => {\n                setMyState(prev => ({ ...prev,\n                  adminPresent: anAdminIsPresent\n                }));\n                setSessionState(prev => ({ ...prev,\n                  isKnown: anAdminIsPresent ? false : true\n                })); //if there's already another admin, make session state 'not known'; otherwise make 'known'\n\n                anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n\n                if (anAdminIsPresent) {\n                  window.stateRequest = setInterval(() => {\n                    getState();\n                  }, 2500);\n                }\n              });\n            } else {\n              window.stateRequest = setInterval(() => {\n                getState();\n              }, 2500);\n            }\n          }\n\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n\n        case 'participant-joined':\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          let newSessionState = e.data;\n          newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n\n          setSessionState(newSessionState);\n        } else if (e.data.constructor === Object && e.data.type == \"instructions\" && e.data.recipient == callObject.participants().local.session_id) {\n          audioPlayer(e.data.target, e.data.action);\n        } else if (e.data == \"State please?\") {\n          if (myState.amAdmin && sessionState.isKnown) {\n            sendState(sessionState, callObject);\n          }\n        }\n      }\n    } //end handleAppMessage\n\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SessionStateContext.Provider, {\n    value: {\n      session: [sessionState, setSessionState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      myStateArray: [myState, setMyState],\n      setName: setName,\n      setRole: setRole,\n      setUserList: setUserList,\n      setViewMode: setViewMode,\n      setCamOnAtSessionStart: setCamOnAtSessionStart,\n      setMicOnAtSessionStart: setMicOnAtSessionStart,\n      setAdminPresent: setAdminPresent,\n      setAmAdmin: setAmAdmin,\n      setNumber: setNumber\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }\n  }), myState.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/App/App.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionStateContext","MyContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","setSubscriptions","sendState","audioPlayer","AdminPanel","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","sessionState","setSessionState","type","isKnown","isActive","AdminVisible","hasAnUpdate","roleOf","Buyer1","Buyer2","Buyer3","Seller","Shadow1","Shadow2","Shadow3","Shadow4","myState","setMyState","name","role","window","myRole","amAdmin","userList","names","sessionIdFor","adminPresent","viewMode","audioIsPlaying","camOnAtSessionStart","micOnAtSessionStart","nurll","number","setName","newName","prev","setViewMode","newViewMode","setRole","newRole","setUserList","newUserList","setAmAdmin","boolean","setAdminPresent","setMicOnAtSessionStart","setCamOnAtSessionStart","setNumber","newNum","pass","includes","myP","location","href","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","subscribeToTracksAutomatically","initialInputs","join","userName","audioSource","videoSource","navigator","mediaDevices","getUserMedia","audio","video","mediaStream","localAudio","getAudioTracks","localVideo","getVideoTracks","length","pageUrl","startLeavingCall","destroy","initialize","leave","indexOf","history","replaceState","getState","clearInterval","stateRequest","sendAppMessage","checkIfAdminPresent","Promise","resolve","adminAlreadyPresent","ps","participants","lookForMoreParticipants","setInterval","Object","keys","local","user_name","p","thisUserName","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","anAdminIsPresent","on","cleanup","off","handleAppMessage","e","fromId","data","constructor","newSessionState","recipient","session_id","target","action","showCall","session","myStateArray"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext'\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport { sendState } from '../AdminPanel/AdminFunctions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\n\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\n\n\n\nexport default function App() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n                                                    type: 'sessionState',\n                                                    isKnown:false,\n                                                    isActive:false,\n                                                    AdminVisible:false,\n                                                    hasAnUpdate: false,\n                                                    roleOf: {\n                                                              Buyer1: '',\n                                                              Buyer2: '',\n                                                              Buyer3: '',\n                                                              Seller: '',\n                                                              Shadow1: '',\n                                                              Shadow2: '',\n                                                              Shadow3: '',\n                                                              Shadow4: '',\n                                                            },\n                                                    });\n\n\n  const [myState, setMyState] = useState({\n                                name: 'Your first name',\n                                role: window.myRole,\n                                amAdmin: window.amAdmin,\n                                userList: {\n                                  names:[],\n                                  sessionIdFor: {},\n                                },\n                                adminPresent: false,\n                                viewMode: null,\n                                audioIsPlaying: false,\n                                camOnAtSessionStart: null,\n                                micOnAtSessionStart: nurll,\n                                number: null,\n                              });\n\n  const setName = (newName) => {\n    setMyState(prev=>({\n      ...prev,\n      name: newName,\n    }));\n  };\n\n  const setViewMode = (newViewMode) => {\n    setMyState(prev=>({\n      ...prev,\n      viewMode:newViewMode,\n    }));\n  };\n\n  const setRole = (newRole) => {\n    setMyState(prev=>({\n      ...prev,\n      role:newRole,\n    }));\n  };\n\n  const setUserList = (newUserList) => {\n    setMyState(prev=>({\n      ...prev,\n      userList:newUserList,\n    }));\n  };\n\n  const setAmAdmin = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      amAdmin:boolean,\n    }));\n  };\n\n  const setAdminPresent = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      adminPresent:boolean,\n    }));\n  };\n\n  const setMicOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      micOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setCamOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      camOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setNumber = (newNum) => {\n    setMyState(prev=>({\n      ...prev,\n      number: newNum,\n    }));\n  };\n\n \n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\"\n  }\n\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n  const startJoiningCall = useCallback((url) => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({ \n      subscribeToTracksAutomatically: false, \n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    if(window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1])\n      newCallObject.join({ userName:myState.name, url, audioSource: window.initialInputs[0],videoSource:window.initialInputs[1]}); \n    } else {\n      navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n        if(mediaStream){\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n          if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n              {\n                newCallObject.join({ userName:myState.name, url, audioSource: localAudio[0], videoSource:localVideo[0]});\n              }\n        }else{\n          //message e.g. you need a mic to join\n        }\n      })\n    }\n    console.log('joining the call as ' + myState.name); \n    const pageUrl = pageUrlFromRoomUrl(roomUrl)+'&N='+myState.name+'&R='+myState.role;\n   \n  }, [myState.name]); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();    \n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl=pageUrl;\n    \n    // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n    if (myState.role) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&R=' + window.myRole;\n      }else{\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&P=' + window.myP;\n      }else{\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); \n\n    /**\n   * Attach myState object to window for debugging purposes.\n   */\n     useEffect(() => {\n      window.myState = myState;\n    }, [myState]); \n\n  \n function getState () {\n    if (sessionState.isKnown == true) {\n        clearInterval(window.stateRequest);            \n        return;\n    }\n    if (myState.adminPresent) {\n        callObject.sendAppMessage(\"State please?\", '*'); \n        console.log('Requesting meeting state...');\n    }\n    \n}\n\nconst checkIfAdminPresent = () => {\n\n  return new Promise((resolve) => {\n    let adminAlreadyPresent = false;\n    let ps=callObject.participants();\n    const lookForMoreParticipants = setInterval (()=>{  //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n      if  (Object.keys(ps).length > 1\n            || (Object.keys(ps).length <= 1 && ps.local.user_name == myState.name)  \n      ) {\n            clearInterval(lookForMoreParticipants);\n            for (const p in ps) {\n              let thisUserName = ps[p].user_name;\n              if (thisUserName.includes('_Admin') && p!=='local') {\n                adminAlreadyPresent = true;\n              }\n              console.log(`Participant present: ${thisUserName}`);\n            }\n            resolve (adminAlreadyPresent);\n      } else {return;}\n    },500)\n  })\n}\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error','participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          // window.userList.push(window.myName);\n          console.log('JOINED MEETING');\n          if(myState.name==\"\"){callObject.leave();}\n          setUserList({names:[myState.name]})\n          if (!window.sessionState.isKnown) {\n\n            if (window.myRole==\"Admin\") {\n              checkIfAdminPresent().then((anAdminIsPresent)=> {\n                setMyState(prev=>({\n                  ...prev,\n                  adminPresent: anAdminIsPresent,\n                }));\n                setSessionState(prev=>({\n                  ...prev,\n                  isKnown: anAdminIsPresent ? false : true,\n                }));                              //if there's already another admin, make session state 'not known'; otherwise make 'known'\n                anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n                if (anAdminIsPresent) {\n                  window.stateRequest = setInterval(()=>{getState()},2500);\n                }\n              })\n\n            } else {\n              window.stateRequest = setInterval(()=>{getState()},2500);\n            }\n          }\n          \n\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n        case 'participant-joined':\n\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n            let newSessionState = e.data;\n            newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n            setSessionState(newSessionState);\n                \n            }\n\n            else if (e.data.constructor === Object && e.data.type==\"instructions\" && e.data.recipient==callObject.participants().local.session_id) {\n              audioPlayer(e.data.target,e.data.action)\n            }\n\n\n            else if (e.data==\"State please?\") {\n              if (myState.amAdmin && sessionState.isKnown) {\n                sendState(sessionState,callObject);\n              }\n            } \n          }\n      \n      \n    } //end handleAppMessage\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n\n\n\n  return (\n\n\n    <div className=\"app\">\n      <SessionStateContext.Provider \n      value={{session: [sessionState,setSessionState]}}\n      >\n        <MyContext.Provider \n        value={{\n        myStateArray: [myState,setMyState], \n        setName: setName, \n        setRole: setRole, \n        setUserList: setUserList,\n        setViewMode: setViewMode, \n        setCamOnAtSessionStart: setCamOnAtSessionStart, \n        setMicOnAtSessionStart: setMicOnAtSessionStart,\n        setAdminPresent: setAdminPresent,\n        setAmAdmin: setAmAdmin,\n        setNumber: setNumber,\n        }}\n        >\n\n        {(showCall) ? (\n          // NOTE: for an app this size, it's not obvious that using a Context\n          // is the best choice. But for larger apps with deeply-nested components\n          // that want to access call object state and bind event listeners to the\n          // call object, this can be a helpful pattern.\n          <CallObjectContext.Provider value={callObject}>\n\n            <Call roomUrl={roomUrl} />\n            <Tray\n              onClickLeaveCall={startLeavingCall}\n            />\n            {myState.amAdmin && (\n          <AdminPanel\n        />\n        )}\n          </CallObjectContext.Provider>\n        ) : (\n          <StartScreen\n            // disabled={!enableStartButton}\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          />\n        )}\n        </MyContext.Provider>\n      </SessionStateContext.Provider>\n    </div>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}