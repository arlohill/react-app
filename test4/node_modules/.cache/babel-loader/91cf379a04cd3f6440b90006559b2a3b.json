{"ast":null,"code":"/**\n * Call Machine hook\n * --\n * Manages the overaching state of a Daily call, including\n * error handling, preAuth, joining, leaving etc.\n */\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport DailyIframe from '@daily-co/daily-js';\nimport { ACCESS_STATE_LOBBY, ACCESS_STATE_NONE, ACCESS_STATE_UNKNOWN, MEETING_STATE_JOINED } from './constants';\nexport const CALL_STATE_READY = 'ready';\nexport const CALL_STATE_LOBBY = 'lobby';\nexport const CALL_STATE_JOINING = 'joining';\nexport const CALL_STATE_JOINED = 'joined';\nexport const CALL_STATE_ENDED = 'ended';\nexport const CALL_STATE_ERROR = 'error';\nexport const CALL_STATE_FULL = 'full';\nexport const CALL_STATE_EXPIRED = 'expired';\nexport const CALL_STATE_NOT_BEFORE = 'nbf';\nexport const CALL_STATE_REMOVED = 'removed-from-call';\nexport const CALL_STATE_REDIRECTING = 'redirecting';\nexport const CALL_STATE_NOT_FOUND = 'not-found';\nexport const CALL_STATE_NOT_ALLOWED = 'not-allowed';\nexport const CALL_STATE_AWAITING_ARGS = 'awaiting-args';\nexport const useCallMachine = ({\n  domain,\n  room,\n  token,\n  subscribeToTracksAutomatically = true\n}) => {\n  const [daily, setDaily] = useState(null);\n  const [state, setState] = useState(CALL_STATE_READY);\n  const [redirectOnLeave, setRedirectOnLeave] = useState(false);\n  const url = useMemo(() => domain && room ? `https://${domain}.daily.co/${room}` : null, [domain, room]);\n  /**\n   * Check whether we show the lobby screen, need to knock or\n   * can head straight to the call. These parameters are set using\n   * `enable_knocking` and `enable_prejoin_ui` when creating the room\n   * @param co â€“ Daily call object\n   */\n\n  const prejoinUIEnabled = async co => {\n    var _dailyRoomInfo$config, _dailyRoomInfo$domain, _dailyRoomInfo$config2, _dailyRoomInfo$config3;\n\n    const dailyRoomInfo = await co.room();\n    const {\n      access\n    } = co.accessState();\n    const prejoinEnabled = (dailyRoomInfo === null || dailyRoomInfo === void 0 ? void 0 : (_dailyRoomInfo$config = dailyRoomInfo.config) === null || _dailyRoomInfo$config === void 0 ? void 0 : _dailyRoomInfo$config.enable_prejoin_ui) === null ? !!(dailyRoomInfo === null || dailyRoomInfo === void 0 ? void 0 : (_dailyRoomInfo$domain = dailyRoomInfo.domainConfig) === null || _dailyRoomInfo$domain === void 0 ? void 0 : _dailyRoomInfo$domain.enable_prejoin_ui) : !!(dailyRoomInfo === null || dailyRoomInfo === void 0 ? void 0 : (_dailyRoomInfo$config2 = dailyRoomInfo.config) === null || _dailyRoomInfo$config2 === void 0 ? void 0 : _dailyRoomInfo$config2.enable_prejoin_ui);\n    const knockingEnabled = !!(dailyRoomInfo === null || dailyRoomInfo === void 0 ? void 0 : (_dailyRoomInfo$config3 = dailyRoomInfo.config) === null || _dailyRoomInfo$config3 === void 0 ? void 0 : _dailyRoomInfo$config3.enable_knocking);\n    return prejoinEnabled || access !== ACCESS_STATE_UNKNOWN && (access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_LOBBY && knockingEnabled;\n  }; // --- Callbacks ---\n\n  /**\n   * Joins call (with the token, if applicable)\n   */\n\n\n  const join = useCallback(async callObject => {\n    setState(CALL_STATE_JOINING);\n    await callObject.join({\n      subscribeToTracksAutomatically,\n      token,\n      url\n    });\n    setState(CALL_STATE_JOINED);\n  }, [token, subscribeToTracksAutomatically, url]);\n  /**\n   * PreAuth checks whether we have access or need to knock\n   */\n\n  const preAuth = useCallback(async co => {\n    const {\n      access\n    } = await co.preAuth({\n      subscribeToTracksAutomatically,\n      token,\n      url\n    }); // Private room and no `token` was passed\n\n    if (access === ACCESS_STATE_UNKNOWN || (access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_NONE) {\n      return;\n    } // Either `enable_knocking_ui` or `enable_prejoin_ui` is set to `true`\n\n\n    if ((access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_LOBBY || (await prejoinUIEnabled(co))) {\n      setState(CALL_STATE_LOBBY);\n      return;\n    } // Public room or private room with passed `token` and `enable_prejoin_ui` is `false`\n\n\n    join(co);\n  }, [join, subscribeToTracksAutomatically, token, url]);\n  /**\n   * Leave call\n   */\n\n  const leave = useCallback(() => {\n    if (!daily) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (state === CALL_STATE_ERROR) {\n      daily.destroy();\n    } else {\n      daily.leave();\n    }\n  }, [daily, state]);\n  /**\n   * Listen for access state updates\n   */\n\n  const handleAccessStateUpdated = useCallback(async ({\n    access\n  }) => {\n    console.log(`ğŸ”‘ Access level: ${access === null || access === void 0 ? void 0 : access.level}`);\n    /**\n     * Ignore initial access-state-updated event\n     */\n\n    if ([CALL_STATE_ENDED, CALL_STATE_AWAITING_ARGS, CALL_STATE_READY].includes(state)) {\n      return;\n    }\n\n    if (access === ACCESS_STATE_UNKNOWN || (access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_NONE) {\n      setState(CALL_STATE_NOT_ALLOWED);\n      return;\n    }\n\n    const meetingState = daily.meetingState();\n\n    if ((access === null || access === void 0 ? void 0 : access.level) === ACCESS_STATE_LOBBY && meetingState === MEETING_STATE_JOINED) {\n      // Already joined, no need to call join(daily) again.\n      return;\n    }\n    /**\n     * 'full' access, we can now join the meeting.\n     */\n\n\n    join(daily);\n  }, [daily, state, join]); // --- Effects ---\n\n  /**\n   * Instantiate the call object and preauthenticate\n   */\n\n  useEffect(() => {\n    if (daily || !url || state !== CALL_STATE_READY) return;\n    console.log('ğŸš€ Creating call object');\n    const co = DailyIframe.createCallObject({\n      url,\n      dailyConfig: {\n        experimentalChromeVideoMuteLightOff: true,\n        useDevicePreferenceCookies: true\n      }\n    });\n    setDaily(co);\n    preAuth(co);\n  }, [daily, url, state, preAuth]);\n  /**\n   * Listen for changes in the participant's access state\n   */\n\n  useEffect(() => {\n    if (!daily) return false;\n    daily.on('access-state-updated', handleAccessStateUpdated);\n    return () => daily.off('access-state-updated', handleAccessStateUpdated);\n  }, [daily, handleAccessStateUpdated]);\n  /**\n   * Listen for and manage call state\n   */\n\n  useEffect(() => {\n    if (!daily) return false;\n    const events = ['joined-meeting', 'joining-meeting', 'left-meeting', 'error'];\n\n    const handleMeetingState = async ev => {\n      var _ev$error;\n\n      const {\n        access\n      } = daily.accessState();\n\n      switch (ev.action) {\n        /**\n         * Don't transition to 'joining' or 'joined' UI as long as access is not 'full'.\n         * This means a request to join a private room is not granted, yet.\n         * Technically in requesting for access, the participant is already known\n         * to the room, but not joined, yet.\n         */\n        case 'joining-meeting':\n          if (access === ACCESS_STATE_UNKNOWN || access.level === ACCESS_STATE_NONE || access.level === ACCESS_STATE_LOBBY) {\n            return;\n          }\n\n          setState(CALL_STATE_JOINING);\n          break;\n\n        case 'joined-meeting':\n          if (access === ACCESS_STATE_UNKNOWN || access.level === ACCESS_STATE_NONE || access.level === ACCESS_STATE_LOBBY) {\n            return;\n          }\n\n          setState(CALL_STATE_JOINED);\n          break;\n\n        case 'left-meeting':\n          daily.destroy();\n          setState(!redirectOnLeave ? CALL_STATE_ENDED : CALL_STATE_REDIRECTING);\n          break;\n\n        case 'error':\n          switch (ev === null || ev === void 0 ? void 0 : (_ev$error = ev.error) === null || _ev$error === void 0 ? void 0 : _ev$error.type) {\n            case 'nbf-room':\n            case 'nbf-token':\n              daily.destroy();\n              setState(CALL_STATE_NOT_BEFORE);\n              break;\n\n            case 'exp-room':\n            case 'exp-token':\n              daily.destroy();\n              setState(CALL_STATE_EXPIRED);\n              break;\n\n            case 'ejected':\n              daily.destroy();\n              setState(CALL_STATE_REMOVED);\n              break;\n\n            default:\n              switch (ev === null || ev === void 0 ? void 0 : ev.errorMsg) {\n                case 'Join request rejected':\n                  // Join request to a private room was denied. We can end here.\n                  setState(CALL_STATE_LOBBY);\n                  daily.leave();\n                  break;\n\n                case 'Meeting has ended':\n                  // Meeting has ended or participant was removed by an owner.\n                  daily.destroy();\n                  setState(CALL_STATE_ENDED);\n                  break;\n\n                case 'Meeting is full':\n                  daily.destroy();\n                  setState(CALL_STATE_FULL);\n                  break;\n\n                case \"The meeting you're trying to join does not exist.\":\n                  daily.destroy();\n                  setState(CALL_STATE_NOT_FOUND);\n                  break;\n\n                case 'You are not allowed to join this meeting':\n                  daily.destroy();\n                  setState(CALL_STATE_NOT_ALLOWED);\n                  break;\n\n                default:\n                  setState(CALL_STATE_ERROR);\n                  break;\n              }\n\n              break;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }; // Listen for changes in state\n\n\n    events.forEach(event => daily.on(event, handleMeetingState)); // Stop listening for changes in state\n\n    return () => events.forEach(event => daily.off(event, handleMeetingState));\n  }, [daily, domain, room, redirectOnLeave]);\n  return {\n    daily,\n    leave,\n    setRedirectOnLeave,\n    state: useMemo(() => state, [state])\n  };\n};","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/useCallMachine.js"],"names":["useCallback","useEffect","useMemo","useState","DailyIframe","ACCESS_STATE_LOBBY","ACCESS_STATE_NONE","ACCESS_STATE_UNKNOWN","MEETING_STATE_JOINED","CALL_STATE_READY","CALL_STATE_LOBBY","CALL_STATE_JOINING","CALL_STATE_JOINED","CALL_STATE_ENDED","CALL_STATE_ERROR","CALL_STATE_FULL","CALL_STATE_EXPIRED","CALL_STATE_NOT_BEFORE","CALL_STATE_REMOVED","CALL_STATE_REDIRECTING","CALL_STATE_NOT_FOUND","CALL_STATE_NOT_ALLOWED","CALL_STATE_AWAITING_ARGS","useCallMachine","domain","room","token","subscribeToTracksAutomatically","daily","setDaily","state","setState","redirectOnLeave","setRedirectOnLeave","url","prejoinUIEnabled","co","dailyRoomInfo","access","accessState","prejoinEnabled","config","enable_prejoin_ui","domainConfig","knockingEnabled","enable_knocking","level","join","callObject","preAuth","leave","destroy","handleAccessStateUpdated","console","log","includes","meetingState","createCallObject","dailyConfig","experimentalChromeVideoMuteLightOff","useDevicePreferenceCookies","on","off","events","handleMeetingState","ev","action","error","type","errorMsg","forEach","event"],"mappings":"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","sourcesContent":["/**\n * Call Machine hook\n * --\n * Manages the overaching state of a Daily call, including\n * error handling, preAuth, joining, leaving etc.\n */\n\n import { useCallback, useEffect, useMemo, useState } from 'react';\n import DailyIframe from '@daily-co/daily-js';\n \n import {\n   ACCESS_STATE_LOBBY,\n   ACCESS_STATE_NONE,\n   ACCESS_STATE_UNKNOWN,\n   MEETING_STATE_JOINED,\n } from './constants';\n \n export const CALL_STATE_READY = 'ready';\n export const CALL_STATE_LOBBY = 'lobby';\n export const CALL_STATE_JOINING = 'joining';\n export const CALL_STATE_JOINED = 'joined';\n export const CALL_STATE_ENDED = 'ended';\n export const CALL_STATE_ERROR = 'error';\n export const CALL_STATE_FULL = 'full';\n export const CALL_STATE_EXPIRED = 'expired';\n export const CALL_STATE_NOT_BEFORE = 'nbf';\n export const CALL_STATE_REMOVED = 'removed-from-call';\n export const CALL_STATE_REDIRECTING = 'redirecting';\n export const CALL_STATE_NOT_FOUND = 'not-found';\n export const CALL_STATE_NOT_ALLOWED = 'not-allowed';\n export const CALL_STATE_AWAITING_ARGS = 'awaiting-args';\n \n export const useCallMachine = ({\n   domain,\n   room,\n   token,\n   subscribeToTracksAutomatically = true,\n }) => {\n   const [daily, setDaily] = useState(null);\n   const [state, setState] = useState(CALL_STATE_READY);\n   const [redirectOnLeave, setRedirectOnLeave] = useState(false);\n \n   const url = useMemo(\n     () => (domain && room ? `https://${domain}.daily.co/${room}` : null),\n     [domain, room]\n   );\n \n   /**\n    * Check whether we show the lobby screen, need to knock or\n    * can head straight to the call. These parameters are set using\n    * `enable_knocking` and `enable_prejoin_ui` when creating the room\n    * @param co â€“ Daily call object\n    */\n   const prejoinUIEnabled = async (co) => {\n     const dailyRoomInfo = await co.room();\n     const { access } = co.accessState();\n \n     const prejoinEnabled =\n       dailyRoomInfo?.config?.enable_prejoin_ui === null\n         ? !!dailyRoomInfo?.domainConfig?.enable_prejoin_ui\n         : !!dailyRoomInfo?.config?.enable_prejoin_ui;\n \n     const knockingEnabled = !!dailyRoomInfo?.config?.enable_knocking;\n \n     return (\n       prejoinEnabled ||\n       (access !== ACCESS_STATE_UNKNOWN &&\n         access?.level === ACCESS_STATE_LOBBY &&\n         knockingEnabled)\n     );\n   };\n \n   // --- Callbacks ---\n \n   /**\n    * Joins call (with the token, if applicable)\n    */\n   const join = useCallback(\n     async (callObject) => {\n       setState(CALL_STATE_JOINING);\n       await callObject.join({ subscribeToTracksAutomatically, token, url });\n       setState(CALL_STATE_JOINED);\n     },\n     [token, subscribeToTracksAutomatically, url]\n   );\n \n   /**\n    * PreAuth checks whether we have access or need to knock\n    */\n   const preAuth = useCallback(\n     async (co) => {\n       const { access } = await co.preAuth({\n         subscribeToTracksAutomatically,\n         token,\n         url,\n       });\n \n       // Private room and no `token` was passed\n       if (\n         access === ACCESS_STATE_UNKNOWN ||\n         access?.level === ACCESS_STATE_NONE\n       ) {\n         return;\n       }\n \n       // Either `enable_knocking_ui` or `enable_prejoin_ui` is set to `true`\n       if (\n         access?.level === ACCESS_STATE_LOBBY ||\n         (await prejoinUIEnabled(co))\n       ) {\n         setState(CALL_STATE_LOBBY);\n         return;\n       }\n \n       // Public room or private room with passed `token` and `enable_prejoin_ui` is `false`\n       join(co);\n     },\n     [join, subscribeToTracksAutomatically, token, url]\n   );\n \n   /**\n    * Leave call\n    */\n   const leave = useCallback(() => {\n     if (!daily) return;\n     // If we're in the error state, we've already \"left\", so just clean up\n     if (state === CALL_STATE_ERROR) {\n       daily.destroy();\n     } else {\n       daily.leave();\n     }\n   }, [daily, state]);\n \n   /**\n    * Listen for access state updates\n    */\n   const handleAccessStateUpdated = useCallback(\n     async ({ access }) => {\n       console.log(`ğŸ”‘ Access level: ${access?.level}`);\n \n       /**\n        * Ignore initial access-state-updated event\n        */\n       if (\n         [CALL_STATE_ENDED, CALL_STATE_AWAITING_ARGS, CALL_STATE_READY].includes(\n           state\n         )\n       ) {\n         return;\n       }\n \n       if (\n         access === ACCESS_STATE_UNKNOWN ||\n         access?.level === ACCESS_STATE_NONE\n       ) {\n         setState(CALL_STATE_NOT_ALLOWED);\n         return;\n       }\n \n       const meetingState = daily.meetingState();\n       if (\n         access?.level === ACCESS_STATE_LOBBY &&\n         meetingState === MEETING_STATE_JOINED\n       ) {\n         // Already joined, no need to call join(daily) again.\n         return;\n       }\n \n       /**\n        * 'full' access, we can now join the meeting.\n        */\n       join(daily);\n     },\n     [daily, state, join]\n   );\n \n   // --- Effects ---\n \n   /**\n    * Instantiate the call object and preauthenticate\n    */\n   useEffect(() => {\n     if (daily || !url || state !== CALL_STATE_READY) return;\n \n     console.log('ğŸš€ Creating call object');\n \n     const co = DailyIframe.createCallObject({\n       url,\n       dailyConfig: {\n         experimentalChromeVideoMuteLightOff: true,\n         useDevicePreferenceCookies: true,\n       },\n     });\n \n     setDaily(co);\n     preAuth(co);\n   }, [daily, url, state, preAuth]);\n \n   /**\n    * Listen for changes in the participant's access state\n    */\n   useEffect(() => {\n     if (!daily) return false;\n \n     daily.on('access-state-updated', handleAccessStateUpdated);\n     return () => daily.off('access-state-updated', handleAccessStateUpdated);\n   }, [daily, handleAccessStateUpdated]);\n \n   /**\n    * Listen for and manage call state\n    */\n   useEffect(() => {\n     if (!daily) return false;\n \n     const events = [\n       'joined-meeting',\n       'joining-meeting',\n       'left-meeting',\n       'error',\n     ];\n \n     const handleMeetingState = async (ev) => {\n       const { access } = daily.accessState();\n \n       switch (ev.action) {\n         /**\n          * Don't transition to 'joining' or 'joined' UI as long as access is not 'full'.\n          * This means a request to join a private room is not granted, yet.\n          * Technically in requesting for access, the participant is already known\n          * to the room, but not joined, yet.\n          */\n         case 'joining-meeting':\n           if (\n             access === ACCESS_STATE_UNKNOWN ||\n             access.level === ACCESS_STATE_NONE ||\n             access.level === ACCESS_STATE_LOBBY\n           ) {\n             return;\n           }\n           setState(CALL_STATE_JOINING);\n           break;\n         case 'joined-meeting':\n           if (\n             access === ACCESS_STATE_UNKNOWN ||\n             access.level === ACCESS_STATE_NONE ||\n             access.level === ACCESS_STATE_LOBBY\n           ) {\n             return;\n           }\n           setState(CALL_STATE_JOINED);\n           break;\n         case 'left-meeting':\n           daily.destroy();\n           setState(\n             !redirectOnLeave ? CALL_STATE_ENDED : CALL_STATE_REDIRECTING\n           );\n           break;\n         case 'error':\n           switch (ev?.error?.type) {\n             case 'nbf-room':\n             case 'nbf-token':\n               daily.destroy();\n               setState(CALL_STATE_NOT_BEFORE);\n               break;\n             case 'exp-room':\n             case 'exp-token':\n               daily.destroy();\n               setState(CALL_STATE_EXPIRED);\n               break;\n             case 'ejected':\n               daily.destroy();\n               setState(CALL_STATE_REMOVED);\n               break;\n             default:\n               switch (ev?.errorMsg) {\n                 case 'Join request rejected':\n                   // Join request to a private room was denied. We can end here.\n                   setState(CALL_STATE_LOBBY);\n                   daily.leave();\n                   break;\n                 case 'Meeting has ended':\n                   // Meeting has ended or participant was removed by an owner.\n                   daily.destroy();\n                   setState(CALL_STATE_ENDED);\n                   break;\n                 case 'Meeting is full':\n                   daily.destroy();\n                   setState(CALL_STATE_FULL);\n                   break;\n                 case \"The meeting you're trying to join does not exist.\":\n                   daily.destroy();\n                   setState(CALL_STATE_NOT_FOUND);\n                   break;\n                 case 'You are not allowed to join this meeting':\n                   daily.destroy();\n                   setState(CALL_STATE_NOT_ALLOWED);\n                   break;\n                 default:\n                   setState(CALL_STATE_ERROR);\n                   break;\n               }\n               break;\n           }\n           break;\n         default:\n           break;\n       }\n     };\n \n     // Listen for changes in state\n     events.forEach((event) => daily.on(event, handleMeetingState));\n \n     // Stop listening for changes in state\n     return () =>\n       events.forEach((event) => daily.off(event, handleMeetingState));\n   }, [daily, domain, room, redirectOnLeave]);\n \n   return {\n     daily,\n     leave,\n     setRedirectOnLeave,\n     state: useMemo(() => state, [state]),\n   };\n };"]},"metadata":{},"sourceType":"module"}