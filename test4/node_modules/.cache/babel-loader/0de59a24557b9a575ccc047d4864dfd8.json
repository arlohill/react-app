{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test2/src/components/Tray/Tray.js\";\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport './Tray.css';\nimport TrayButton, { TYPE_MUTE_CAMERA, TYPE_MUTE_MIC, TYPE_SCREEN, TYPE_LEAVE, TYPE_CHAT } from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  };\n\n  const [showMicSettings, setShowMicSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function openMicOptions() {\n    alert('options!');\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return function cleanup() {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n\n  const handleClickOutside = event => {\n    console.log('handling click');\n\n    if (micSettings.current && !micSettings.current.contains(event.target) && !micCaret.current.contains(event.target)) {\n      setShowMicSettings(false); // setShowCamSettings(false;)\n    }\n  };\n\n  function toggleSharingScreen() {\n    isSharingScreen ? callObject.stopScreenShare() : navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true\n    }).then(stream => callObject.startScreenShare({\n      mediaStream: stream\n    })); // share getDisplayMedia stream\n    // mediaStream: window.screenStream,\n    // share getDisplayMedia audio track only\n    // mediaStream: window.screenStream,\n    // share local cam via screen stream\n    // mediaStream: window.localCam,\n    // share only audio from local cam via screen stream\n    // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n    // });\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow() {\n    window.open(\"http://\" + window.location.host + \"/share\", \"test\", \"width=300, height=300\");\n  }\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_CAMERA // disabled={props.disabled}\n    ,\n    highlighted: isCameraMuted,\n    onClick: toggleCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      setShowMicSettings(!showMicSettings);\n    },\n    style: {\n      position: 'absolute',\n      left: '54px',\n      bottom: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"caret\",\n    ref: micCaret,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, \"^\"), showMicSettings ? /*#__PURE__*/React.createElement(InputSelector, {\n    ref: micSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 16\n    }\n  }) : null), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_MUTE_MIC // disabled={props.disabled}\n    ,\n    highlighted: isMicMuted,\n    onClick: toggleMic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_SCREEN // disabled={props.disabled}\n    ,\n    highlighted: isSharingScreen,\n    onClick: openScreenShareWindow // onClick={toggleSharingScreen}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_CHAT // disabled={props.disabled}\n    ,\n    highlighted: highlightedChat,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    onClickDisplay: displayChat,\n    notification: handleNewChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }), window.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }), window.sessionState && window.sessionState.isActive && (window.myRole == 'Attendee' || window.myRole == 'Admin') && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      zIndex: '999',\n      height: '80px',\n      bottom: '10px',\n      overflow: 'hidden',\n      visibility: 'visible',\n      flexGrow: '1',\n      textAlign: 'center',\n      position: 'absolute',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    id: \"my-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: \"view-mode\",\n    onChange: e => window.setViewMode(e.target.value),\n    style: {\n      outline: 'none',\n      position: 'relative',\n      borderRadius: '20px',\n      height: '30px',\n      width: '100px',\n      bottom: '-22px',\n      cursor: 'pointer',\n      backgroundColor: '#2196F3',\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Room1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, \"Room1\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Room2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, \"Room2\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, \"All\")))), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      position: 'relative',\n      bottom: '3px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, \"My view\")), /*#__PURE__*/React.createElement(TrayButton, {\n    type: TYPE_LEAVE,\n    disabled: props.disabled,\n    newButtonGroup: true,\n    highlighted: true,\n    onClick: leaveCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test2/src/components/Tray/Tray.js"],"names":["React","useContext","useEffect","useState","useRef","TrayButton","TYPE_MUTE_CAMERA","TYPE_MUTE_MIC","TYPE_SCREEN","TYPE_LEAVE","TYPE_CHAT","InputSelector","Chat","AdminPanel","CallObjectContext","logDailyEvent","DailyIframe","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","Tray","props","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","forceUpdate","micCaret","createRef","micSettings","window","updateTray","showMicSettings","setShowMicSettings","toggleCamera","setLocalVideo","toggleMic","setLocalAudio","openMicOptions","alert","document","addEventListener","handleClickOutside","cleanup","removeEventListener","event","console","log","current","contains","target","toggleSharingScreen","stopScreenShare","navigator","mediaDevices","getDisplayMedia","then","stream","startScreenShare","mediaStream","leaveCall","onClickLeaveCall","toggleChat","handleNewChat","openScreenShareWindow","open","location","host","handleNewParticipantsState","on","off","position","left","bottom","supportedBrowser","supportsScreenShare","amAdmin","sessionState","isActive","myRole","zIndex","height","overflow","visibility","flexGrow","textAlign","transform","border","e","setViewMode","outline","borderRadius","width","cursor","backgroundColor","color","disabled"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\nimport './Tray.css';\nimport TrayButton, {\n  TYPE_MUTE_CAMERA,\n  TYPE_MUTE_MIC,\n  TYPE_SCREEN,\n  TYPE_LEAVE,\n  TYPE_CHAT,\n} from '../TrayButton/TrayButton';\nimport InputSelector from '../InputSelector/InputSelector';\nimport Chat from '../Chat/Chat';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nimport CallObjectContext from '../../CallObjectContext';\nimport { logDailyEvent } from '../../logUtils';\nimport DailyIframe from '@daily-co/daily-js';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function Tray(props) {\n  const callObject = useContext(CallObjectContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const forceUpdate = useForceUpdate();\n  const micCaret = React.createRef();\n  const micSettings = React.createRef();\n\n  window.updateTray = () => {\n    forceUpdate();\n  }\n\n  const [showMicSettings,setShowMicSettings] = useState(false);\n\n  function toggleCamera() {\n    callObject.setLocalVideo(isCameraMuted);\n  }\n\n  function toggleMic() {\n    callObject.setLocalAudio(isMicMuted);\n  }\n\n  function openMicOptions() {\n    alert('options!')\n  }\n\n  useEffect(()=> {\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n\n return function cleanup() {\n    document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  })\n\n  const handleClickOutside = (event) => {\n    console.log('handling click');\n    if (micSettings.current &&\n      !micSettings.current.contains(event.target) &&\n      !micCaret.current.contains(event.target)\n    ) {\n      setShowMicSettings(false);\n      // setShowCamSettings(false;)\n    } \n    \n  }\n\n  function toggleSharingScreen() {\n\n    \n    isSharingScreen\n      ? callObject.stopScreenShare()\n      : navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true,\n      }).then((stream)=>callObject.startScreenShare({\n        mediaStream:stream}))\n        // share getDisplayMedia stream\n        // mediaStream: window.screenStream,\n\n        // share getDisplayMedia audio track only\n        \n        // mediaStream: window.screenStream,\n\n        // share local cam via screen stream\n        // mediaStream: window.localCam,\n\n        // share only audio from local cam via screen stream\n        // mediaStream: new MediaStream(window.localCam.getAudioTracks()),\n      // });\n  }\n\n  function leaveCall() {\n    props.onClickLeaveCall && props.onClickLeaveCall();\n  }\n\n  function toggleChat() {\n    setChatDisplay(!displayChat);\n    if (highlightedChat) {\n      setChatHighlight(!highlightedChat);\n    }\n  }\n\n  function handleNewChat() {\n    setChatHighlight(!highlightedChat);\n  }\n\n  function openScreenShareWindow () {\n    window.open(\"http://\" + window.location.host + \"/share\",\"test\",\"width=300, height=300\");\n\n  }\n\n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n  return (\n    <div className=\"tray\">\n      <TrayButton\n        type={TYPE_MUTE_CAMERA}\n        // disabled={props.disabled}\n        highlighted={isCameraMuted}\n        onClick={toggleCamera}\n      />\n      <div onClick={()=>{setShowMicSettings(!showMicSettings)}}  style={{position:'absolute',left:'54px', bottom:'30px'}}>\n      {/* <img src={Caret} style={{position:'absolute',left:'52px', bottom:'42px', height:'18px',fontSize:'15px'}} /> */}\n      \n      <p className=\"caret\" ref={micCaret}>^</p>\n              {showMicSettings ? \n              (<InputSelector ref={micSettings}/>)\n              : \n              null}\n              \n      </div>\n      \n      <TrayButton\n        type={TYPE_MUTE_MIC}\n        // disabled={props.disabled}\n        highlighted={isMicMuted}\n        onClick={toggleMic}\n      />\n      {DailyIframe.supportedBrowser().supportsScreenShare && window.amAdmin && (\n        <TrayButton\n          type={TYPE_SCREEN}\n          // disabled={props.disabled}\n          highlighted={isSharingScreen}\n          onClick={openScreenShareWindow}\n          // onClick={toggleSharingScreen}\n        />\n      )}\n      <TrayButton\n        type={TYPE_CHAT}\n        // disabled={props.disabled}\n        highlighted={highlightedChat}\n        onClick={toggleChat}\n      />\n      <Chat onClickDisplay={displayChat} notification={handleNewChat} />\n      \n      {window.amAdmin && (\n        <AdminPanel\n      />\n      )}\n\n      {/* <!-- Control who you see during a session --> */}\n      {window.sessionState && window.sessionState.isActive && (window.myRole=='Attendee' || window.myRole=='Admin') && (\n        <div style={{zIndex:'999', height:'80px',bottom:'10px',overflow:'hidden',visibility:'visible', flexGrow:'1', textAlign: 'center', position:'absolute', left:'50%', transform:'translateX(-50%)'}} id='my-view'>\n          <form action = ''>\n              <fieldset style={{border:'none'}}>\n              <select id = 'view-mode' onChange = {(e)=>window.setViewMode(e.target.value)} style={{outline:'none', position: 'relative', borderRadius: '20px', height:'30px', width:'100px', bottom:'-22px', cursor:'pointer', backgroundColor: '#2196F3', color:'white'}}>\n              <option value = 'Room1'>Room1</option>\n              <option value = 'Room2'>Room2</option>\n              <option value = 'All'>All</option>\n              {/* <option value = 'Actors'>Actors</option>\n              <option value = 'Participants'>Participants</option>\n              <option value = '1s'>Both 1s</option>\n              <option value = '2s'>Both 2s</option>\n              <option value = 'None'>None</option> */}\n              </select>\n              </fieldset>\n              </form>\n              <p style={{position:'relative', bottom: '3px'}}>My view</p>\n      </div>\n      )}\n      \n\n      <TrayButton\n        type={TYPE_LEAVE}\n        disabled={props.disabled}\n        newButtonGroup={true}\n        highlighted={true}\n        onClick={leaveCall}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}