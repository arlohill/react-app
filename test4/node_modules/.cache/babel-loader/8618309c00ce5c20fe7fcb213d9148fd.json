{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Livestorm/AppLivestorm/AppLivestorm.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n    type: 'sessionState',\n    isKnown: false,\n    isActive: false,\n    AdminVisible: false,\n    hasAnUpdate: false,\n    roleOf: {\n      Buyer1: '',\n      Buyer2: '',\n      Buyer3: '',\n      Buyer4: '',\n      Seller: '',\n      Shadow1: '',\n      Shadow2: '',\n      Shadow3: '',\n      Shadow4: ''\n    },\n    chatHistory: []\n  });\n  const [myState, setMyState] = useState({\n    name: 'Your first name',\n    role: window.myRole,\n    amAdmin: window.amAdmin,\n    userList: {\n      names: [],\n      sessionIdFor: {}\n    },\n    adminPresent: false,\n    viewMode: null,\n    audioIsPlaying: false,\n    camOnAtSessionStart: null,\n    micOnAtSessionStart: null,\n    number: null\n  });\n\n  const setName = newName => {\n    setMyState(prev => ({ ...prev,\n      name: newName\n    }));\n  };\n\n  const setViewMode = newViewMode => {\n    setMyState(prev => ({ ...prev,\n      viewMode: newViewMode\n    }));\n  };\n\n  const setRole = newRole => {\n    setMyState(prev => ({ ...prev,\n      role: newRole\n    }));\n  };\n\n  const setUserList = newUserList => {\n    setMyState(prev => ({ ...prev,\n      userList: newUserList\n    }));\n  };\n\n  const setAmAdmin = boolean => {\n    setMyState(prev => ({ ...prev,\n      amAdmin: boolean\n    }));\n  };\n\n  const setAdminPresent = boolean => {\n    setMyState(prev => ({ ...prev,\n      adminPresent: boolean\n    }));\n  };\n\n  const setMicOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      micOnAtSessionStart: boolean\n    }));\n  };\n\n  const setCamOnAtSessionStart = boolean => {\n    setMyState(prev => ({ ...prev,\n      camOnAtSessionStart: boolean\n    }));\n  };\n\n  const setNumber = newNum => {\n    setMyState(prev => ({ ...prev,\n      number: newNum\n    }));\n  };\n\n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\";\n  }\n  /**\n   * Creates a new call room.\n   */\n\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({\n      subscribeToTracksAutomatically: false\n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n\n    if (window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1]);\n      newCallObject.join({\n        userName: myState.name,\n        url,\n        audioSource: window.initialInputs[0],\n        videoSource: window.initialInputs[1]\n      });\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(mediaStream => {\n        if (mediaStream) {\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n\n          if (localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0) {\n            newCallObject.join({\n              userName: myState.name,\n              url,\n              audioSource: localAudio[0],\n              videoSource: localVideo[0]\n            });\n          }\n        } else {//message e.g. you need a mic to join\n        }\n      });\n    }\n\n    console.log('joining the call as ' + myState.name);\n    const pageUrl = pageUrlFromRoomUrl(roomUrl) + '&N=' + myState.name + '&R=' + myState.role;\n  }, [myState.name]);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording(); // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl = pageUrl; // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n\n    if (myState.role) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&R=' + window.myRole;\n      } else {\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1) {\n        pageUrl += '&P=' + window.myP;\n      } else {\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]);\n  /**\n  * Attach myState object to window for debugging purposes.\n  */\n\n  useEffect(() => {\n    window.myState = myState;\n  }, [myState]);\n  /**\n  * Attach userList to window for debugging\n  */\n\n  useEffect(() => {\n    window.userList = myState.userList;\n  }, [myState.userList]);\n  /**\n    * Attach sessionState to window for debugging\n    */\n\n  useEffect(() => {\n    window.sessionState = sessionState;\n  }, [sessionState]);\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    window.record = () => {\n      callObject.startRecording();\n    };\n\n    window.stop = () => {\n      callObject.stopRecording();\n    };\n  }, [appState]); //Ask for State when Admin becomes present and State is not known\n\n  useEffect(() => {\n    let stateRequest;\n\n    if (!callObject) {\n      return;\n    }\n\n    if (!sessionState.isKnown && myState.adminPresent) {\n      stateRequest = setInterval(getState, 1000);\n\n      function getState() {\n        if (sessionState.isKnown) {\n          clearInterval(stateRequest);\n          return;\n        }\n\n        callObject.sendAppMessage(\"State please?\", '*');\n        console.log('Requesting meeting state...');\n      }\n    } //cleanup before useEffect runs the next time\n\n\n    return function cleanup() {\n      stateRequest && clearInterval(stateRequest);\n    };\n  }, [sessionState.isKnown, myState.adminPresent]);\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error', 'participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({\n            topology: 'sfu'\n          }); // window.userList.push(window.myName);\n\n          console.log('*****JOINED MEETING');\n\n          if (myState.name == \"\") {\n            callObject.leave();\n          } // useUpdateUserList().then((isAnAdminPresent)=>{\n          //   if(window.myRole==\"Admin\") {\n          //     setSessionState(prev=>({\n          //       ...prev,\n          //       isKnown: isAnAdminPresent ? false : true\n          //     }))\n          //   }\n          // })\n\n\n          if (!window.sessionState.isKnown) {// if (window.myRole==\"Admin\") {\n            //   checkIfAdminPresent().then((anAdminIsPresent)=> {\n            //     setAdminPresent(anAdminIsPresent);\n            //     setSessionState(prev=>({\n            //       ...prev,\n            //       isKnown: anAdminIsPresent ? false : true,\n            //     }));                              //if there's already another admin, make session state 'not known'; otherwise make 'known'\n            //     anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n            //     // if (anAdminIsPresent) {\n            //     //   window.stateRequest = setInterval(()=>{getState()},2500);\n            //     // }\n            //   })\n            // } \n            // else {\n            //   // window.stateRequest = setInterval(()=>{getState()},2500);\n            // }\n          }\n\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n\n        case 'participant-joined':\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data); //handle sessionState updates\n\n        if (e.data.constructor === Object && e.data.type == \"sessionState\") {\n          let newSessionState = e.data;\n          newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n\n          setSessionState(newSessionState);\n        } //TODO AUDIO TEST\n        else if (e.data.constructor === Object && e.data.type == \"instructions\" && e.data.recipient == callObject.participants().local.session_id) {\n            audioPlayer(e.data.target, e.data.action);\n          } else if (e.data == \"State please?\") {\n            console.log('*******Received state request, and sessionState.isKnown: ' + sessionState.isKnown);\n\n            if (myState.amAdmin && sessionState.isKnown) {\n              console.log(\"Sending current state...\");\n              callObject.sendAppMessage(sessionState, '*');\n            }\n          }\n      }\n    } //end handleAppMessage\n\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject, sessionState]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SessionStateContext.Provider, {\n    value: {\n      session: [sessionState, setSessionState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      myStateArray: [myState, setMyState],\n      setName: setName,\n      setRole: setRole,\n      setUserList: setUserList,\n      setViewMode: setViewMode,\n      setCamOnAtSessionStart: setCamOnAtSessionStart,\n      setMicOnAtSessionStart: setMicOnAtSessionStart,\n      setAdminPresent: setAdminPresent,\n      setAmAdmin: setAmAdmin,\n      setNumber: setNumber\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 9\n    }\n  }, showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }), myState.amAdmin && /*#__PURE__*/React.createElement(AdminPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(StartScreen // disabled={!enableStartButton}\n  , {\n    onClick: () => {\n      createCall().then(url => startJoiningCall(url));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Livestorm/AppLivestorm/AppLivestorm.js"],"names":["React","useEffect","useState","useCallback","Call","StartScreen","api","Tray","CallObjectContext","SessionStateContext","MyContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","setSubscriptions","audioPlayer","AdminPanel","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","AppLivestorm","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","sessionState","setSessionState","type","isKnown","isActive","AdminVisible","hasAnUpdate","roleOf","Buyer1","Buyer2","Buyer3","Buyer4","Seller","Shadow1","Shadow2","Shadow3","Shadow4","chatHistory","myState","setMyState","name","role","window","myRole","amAdmin","userList","names","sessionIdFor","adminPresent","viewMode","audioIsPlaying","camOnAtSessionStart","micOnAtSessionStart","number","setName","newName","prev","setViewMode","newViewMode","setRole","newRole","setUserList","newUserList","setAmAdmin","boolean","setAdminPresent","setMicOnAtSessionStart","setCamOnAtSessionStart","setNumber","newNum","pass","includes","myP","location","href","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","subscribeToTracksAutomatically","initialInputs","join","userName","audioSource","videoSource","navigator","mediaDevices","getUserMedia","audio","video","mediaStream","localAudio","getAudioTracks","localVideo","getVideoTracks","length","pageUrl","startLeavingCall","stopRecording","destroy","initialize","leave","indexOf","history","replaceState","record","startRecording","stop","stateRequest","setInterval","getState","clearInterval","sendAppMessage","cleanup","events","handleNewMeetingState","event","meetingState","setNetworkTopology","topology","on","off","handleAppMessage","e","fromId","data","constructor","Object","newSessionState","recipient","participants","local","session_id","target","action","showCall","session","myStateArray"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartScreen from '../StartScreen/StartScreen';\nimport api from '../../api';\nimport './AppLivestorm.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../../CallObjectContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport MyContext from '../../../MyContext'\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer';\nimport AdminPanel from '../AdminPanel/AdminPanel';\n\n\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\n\n\n\nexport default function AppLivestorm() {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  const [sessionState, setSessionState] = useState({\n                                                    type: 'sessionState',\n                                                    isKnown:false,\n                                                    isActive:false,\n                                                    AdminVisible:false,\n                                                    hasAnUpdate: false,\n                                                    roleOf: {\n                                                              Buyer1: '',\n                                                              Buyer2: '',\n                                                              Buyer3: '',\n                                                              Buyer4: '',\n                                                              Seller: '',\n                                                              Shadow1: '',\n                                                              Shadow2: '',\n                                                              Shadow3: '',\n                                                              Shadow4: '',\n                                                            },\n                                                    chatHistory:[],\n                                                    });\n\n\n  const [myState, setMyState] = useState({\n                                name: 'Your first name',\n                                role: window.myRole,\n                                amAdmin: window.amAdmin,\n                                userList: {\n                                  names:[],\n                                  sessionIdFor: {},\n                                },\n                                adminPresent: false,\n                                viewMode: null,\n                                audioIsPlaying: false,\n                                camOnAtSessionStart: null,\n                                micOnAtSessionStart: null,\n                                number: null,\n                              });\n\n  const setName = (newName) => {\n    setMyState(prev=>({\n      ...prev,\n      name: newName,\n    }));\n  };\n\n  const setViewMode = (newViewMode) => {\n    setMyState(prev=>({\n      ...prev,\n      viewMode:newViewMode,\n    }));\n  };\n\n  const setRole = (newRole) => {\n    setMyState(prev=>({\n      ...prev,\n      role:newRole,\n    }));\n  };\n\n  const setUserList = (newUserList) => {\n    setMyState(prev=>({\n      ...prev,\n      userList:newUserList,\n    }));\n  };\n\n  const setAmAdmin = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      amAdmin:boolean,\n    }));\n  };\n\n  const setAdminPresent = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      adminPresent:boolean,\n    }));\n  };\n\n  const setMicOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      micOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setCamOnAtSessionStart = (boolean) => {\n    setMyState(prev=>({\n      ...prev,\n      camOnAtSessionStart:boolean,\n    }));\n  };\n\n  const setNumber = (newNum) => {\n    setMyState(prev=>({\n      ...prev,\n      number: newNum,\n    }));\n  };\n\n  \n\n \n  if (!window.pass.includes(window.myP)) {\n    //redirect if password is wrong\n    window.location.href = \"http://secondbody.co\"\n  }\n\n\n\n  \n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n\n  const startJoiningCall = useCallback((url) => {\n    // if(!initialInputs) {return}\n    const newCallObject = DailyIframe.createCallObject({ \n      subscribeToTracksAutomatically: false, \n    });\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    if(window.initialInputs) {\n      console.log('initial audio: ' + window.initialInputs[0] + '. Initial video: ' + window.initialInputs[1])\n      newCallObject.join({ userName:myState.name, url, audioSource: window.initialInputs[0],videoSource:window.initialInputs[1]}); \n    } else {\n      navigator.mediaDevices.getUserMedia({audio:true,video:true}).then((mediaStream)=>{\n        if(mediaStream){\n          let localAudio = mediaStream.getAudioTracks();\n          let localVideo = mediaStream.getVideoTracks();\n          if(localAudio && localAudio.length > 0 && localVideo && localVideo.length > 0)\n              {\n                newCallObject.join({ userName:myState.name, url, audioSource: localAudio[0], videoSource:localVideo[0]});\n              }\n        }else{\n          //message e.g. you need a mic to join\n        }\n      })\n    }\n    console.log('joining the call as ' + myState.name); \n    const pageUrl = pageUrlFromRoomUrl(roomUrl)+'&N='+myState.name+'&R='+myState.role;\n   \n  }, [myState.name]); \n\n\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    callObject.stopRecording();   // in case meeting is being recorded\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n        window.initialize();\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n      window.initialize();    \n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && window.initialInputs && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    let pageUrl = pageUrlFromRoomUrl(roomUrl);\n    window.pageUrl=pageUrl;\n    \n    // if (myState.name) {\n    //   if (pageUrl.indexOf('?') > -1){\n    //     pageUrl += '&N=' + myState.name;\n    //   }else{\n    //     pageUrl += '?N=' + myState.name;\n    //   }\n    // }\n    if (myState.role) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&R=' + window.myRole;\n      }else{\n        pageUrl += '?R=' + window.myRole;\n      }\n    }\n    if (window.myP) {\n      if (pageUrl.indexOf('?') > -1){\n        pageUrl += '&P=' + window.myP;\n      }else{\n        pageUrl += '?P=' + window.myP;\n      }\n    }\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n\n  /**\n   * Attach call object to window for debugging purposes.\n   */\n  useEffect(() => {\n    window.callObject = callObject;\n  }, [callObject]); \n\n    /**\n   * Attach myState object to window for debugging purposes.\n   */\n     useEffect(() => {\n      window.myState = myState;\n    }, [myState]); \n\n     /**\n   * Attach userList to window for debugging\n   */\n  useEffect (()=> {\n    window.userList=myState.userList;\n  },[myState.userList])\n\n /**\n   * Attach sessionState to window for debugging\n   */\n  useEffect(()=> {\n    window.sessionState=sessionState;\n},[sessionState]);\n\nuseEffect(()=>{\n  if (!callObject) {return;}\n  window.record = () => {\n    callObject.startRecording();\n  }\n  window.stop = () => {\n    callObject.stopRecording();\n  }\n},[appState]);\n\n\n\n  \n//Ask for State when Admin becomes present and State is not known\nuseEffect(()=>{\n  let stateRequest;\n  if(!callObject) {return;}\n  if(!sessionState.isKnown && myState.adminPresent) {\n    stateRequest = setInterval(getState,1000);\n    function getState() {\n      if (sessionState.isKnown) {\n        clearInterval(stateRequest);            \n        return;\n      }\n      callObject.sendAppMessage(\"State please?\", '*'); \n      console.log('Requesting meeting state...');\n    }\n  }\n  //cleanup before useEffect runs the next time\n  return function cleanup() {\n    stateRequest && clearInterval(stateRequest);\n  }\n\n},[sessionState.isKnown,myState.adminPresent]);\n\n\n\n \n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error','participant-joined'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          callObject.setNetworkTopology({ topology: 'sfu' });\n          // window.userList.push(window.myName);\n          console.log('*****JOINED MEETING');\n          if(myState.name==\"\"){callObject.leave();}\n\n\n          // useUpdateUserList().then((isAnAdminPresent)=>{\n          //   if(window.myRole==\"Admin\") {\n          //     setSessionState(prev=>({\n          //       ...prev,\n          //       isKnown: isAnAdminPresent ? false : true\n          //     }))\n          //   }\n          // })\n          if (!window.sessionState.isKnown) {\n\n            // if (window.myRole==\"Admin\") {\n            //   checkIfAdminPresent().then((anAdminIsPresent)=> {\n            //     setAdminPresent(anAdminIsPresent);\n            //     setSessionState(prev=>({\n            //       ...prev,\n            //       isKnown: anAdminIsPresent ? false : true,\n            //     }));                              //if there's already another admin, make session state 'not known'; otherwise make 'known'\n            //     anAdminIsPresent ? console.log(`An admin is already present`) : console.log(`An admin is NOT already present`);\n            //     // if (anAdminIsPresent) {\n            //     //   window.stateRequest = setInterval(()=>{getState()},2500);\n            //     // }\n            //   })\n\n            // } \n            // else {\n            //   // window.stateRequest = setInterval(()=>{getState()},2500);\n            // }\n          }\n          \n\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n            clearInterval(window.stateRequest);\n            window.initialize();\n          });\n          break;\n        case 'participant-joined':\n\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(e) {\n      if (e) {\n        logDailyEvent(e);\n        console.log(`received app message from ${e.fromId}: `, e.data);\n      \n          //handle sessionState updates\n          if (e.data.constructor === Object && e.data.type==\"sessionState\") {\n            let newSessionState = e.data;\n            newSessionState.hasAnUpdate = false; //so it won't trigger another sendState() effect\n            setSessionState(newSessionState);\n                \n            }\n\n            //TODO AUDIO TEST\n            else if (e.data.constructor === Object && e.data.type==\"instructions\" && e.data.recipient==callObject.participants().local.session_id) {\n              audioPlayer(e.data.target,e.data.action)\n            }\n\n\n            else if (e.data==\"State please?\") {\n              console.log('*******Received state request, and sessionState.isKnown: ' + sessionState.isKnown);\n              if (myState.amAdmin && sessionState.isKnown) {\n                console.log (\"Sending current state...\");\n                callObject.sendAppMessage(sessionState, '*'); \n              }\n            } \n          }\n      \n      \n    } //end handleAppMessage\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject,sessionState]);\n\n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n\n\n\n  return (\n\n\n    <div className=\"app\">\n      <SessionStateContext.Provider \n      value={{session: [sessionState,setSessionState]}}\n      >\n        <MyContext.Provider \n        value={{\n        myStateArray: [myState,setMyState], \n        setName: setName, \n        setRole: setRole, \n        setUserList: setUserList,\n        setViewMode: setViewMode, \n        setCamOnAtSessionStart: setCamOnAtSessionStart, \n        setMicOnAtSessionStart: setMicOnAtSessionStart,\n        setAdminPresent: setAdminPresent,\n        setAmAdmin: setAmAdmin,\n        setNumber: setNumber,\n        }}\n        >\n\n        {(showCall) ? (\n          // NOTE: for an app this size, it's not obvious that using a Context\n          // is the best choice. But for larger apps with deeply-nested components\n          // that want to access call object state and bind event listeners to the\n          // call object, this can be a helpful pattern.\n          <CallObjectContext.Provider value={callObject}>\n\n            <Call roomUrl={roomUrl} />\n            <Tray\n              onClickLeaveCall={startLeavingCall}\n            />\n            {myState.amAdmin && (\n          <AdminPanel\n        />\n        )}\n          </CallObjectContext.Provider>\n        ) : (\n          <StartScreen\n            // disabled={!enableStartButton}\n            onClick={() => {\n              createCall().then((url) => startJoiningCall(url));\n            }}\n          />\n        )}\n        </MyContext.Provider>\n      </SessionStateContext.Provider>\n    </div>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}