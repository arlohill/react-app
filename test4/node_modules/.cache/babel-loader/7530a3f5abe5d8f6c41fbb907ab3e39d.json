{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test3/src/components/AdminPanel/AdminPanel2.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel2.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer'; // import { sendState } from '../AdminPanel/AdminFunctions'\n// import SessionContext from '../../SessionContext';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\n\n\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n      isMicMuted,\n      isSharingScreen = false;\n\n  if (callObject && callObject.participants() && callObject.participants().local) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\n\n\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext); // const [sessionState, setSessionState ] = useContext(SessionContext);\n\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n\n  const setSubs = () => {\n    setSubscriptions(callObject);\n  };\n\n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel = forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play practice audio');\n  const [targetRecording, setTargetRecording] = useState('monologue1'); ///////HAVE TO CHANGE THIS IN TWO PLACES\n\n  useEffect(() => {\n    //listen for participants leaving or joining and update component\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-left', 'joined-meeting'];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(() => forceUpdate(), 100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(() => forceUpdate(), 100));\n      }\n    };\n  }, [callObject]);\n\n  const sendState = () => {\n    console.log(\"Sending current state...\");\n    callObject.sendAppMessage(window.sessionState, '*');\n  };\n\n  useEffect(() => {\n    window.sendState = sendState;\n  }, [sendState]);\n\n  function toggleSessionActive() {\n    window.sessionState.isActive = !window.sessionState.isActive;\n    sendState();\n\n    if (window.sessionState.isActive && !window.myRole.includes('Actor') && !window.myRole.includes('Participant')) {\n      setSubscriptions(callObject, 'Room1');\n    } else {\n      setSubs();\n    }\n  }\n\n  function togglePractice() {\n    let recipientA = window.sessionState.roleOf.Actor1 && window[window.sessionState.roleOf.Actor1 + '_SessionID'];\n    let recipientB = window.sessionState.roleOf.Actor2 && window[window.sessionState.roleOf.Actor2 + '_SessionID'];\n\n    if (window.sessionState.roleOf.Actor1 == window.myName) {\n      recipientA = 'me';\n    }\n\n    if (window.sessionState.roleOf.Actor2 == window.myName) {\n      recipientB = 'me';\n    }\n\n    if (!recipientA && !recipientB) {\n      return;\n    }\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA\n    };\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    };\n\n    if (recipientA) {\n      if (recipientA != 'me') {\n        callObject.sendAppMessage(instructionsA, recipientA);\n      } else if (recipientA == 'me') {\n        audioPlayer(targetRecording, action);\n      }\n\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor1}`);\n    }\n\n    if (recipientB) {\n      if (recipientB != 'me') {\n        callObject.sendAppMessage(instructionsB, recipientB);\n      } else if (recipientB == 'me') {\n        audioPlayer(targetRecording + 'B', action);\n      }\n\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor2}`);\n    }\n\n    window.audioIsPlaying = !window.audioIsPlaying;\n    setPlayButtonText(!window.audioIsPlaying ? 'Play practice audio' : 'Pause practice audio');\n  }\n\n  let handleRoleChange = e => {\n    window.sessionState.roleOf[e.target.id] = e.target.value;\n    console.log(e.target.id + ' is now: ' + window.sessionState.roleOf[e.target.id]);\n    sendState();\n    let myNewRole = 'Attendee'; //default, if no role assigned\n\n    for (const key in window.sessionState.roleOf) {\n      if (window.sessionState.roleOf[key] == window.myName) {\n        myNewRole = key;\n      }\n    }\n\n    if (myNewRole != window.myRole) {\n      window.myRole = myNewRole;\n\n      if (window.myRole.includes('1')) {\n        window.myNumber = 1;\n      } else if (window.myRole.includes('2')) {\n        window.myNumber = 2;\n      }\n    }\n\n    if (window.sessionState.isActive) {// activateSession();  //rebuild UI for the newly assigned role, mid-session\n    }\n\n    setSubs();\n  };\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(callObject);\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    callObject.on('participant-updated', handleNewParticipantsState); // Stop listening for changes in state\n\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n  /* // Play practice audio for users */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test3/src/components/AdminPanel/AdminPanel2.js"],"names":["React","useContext","useEffect","useState","CallObjectContext","NameContext","logDailyEvent","setSubscriptions","audioPlayer","useForceUpdate","value","setValue","getStreamStates","callObject","isCameraMuted","isMicMuted","isSharingScreen","participants","local","localParticipant","video","audio","screen","AdminPanel","props","myName","setCameraMuted","setMicMuted","setSharingScreen","displayChat","setChatDisplay","highlightedChat","setChatHighlight","setSubs","forceUpdate","window","updateAdminPanel","playButtonText","setPlayButtonText","targetRecording","setTargetRecording","events","event","on","setTimeout","cleanup","off","sendState","console","log","sendAppMessage","sessionState","toggleSessionActive","isActive","myRole","includes","togglePractice","recipientA","roleOf","Actor1","recipientB","Actor2","action","audioIsPlaying","instructionsA","type","target","recipient","instructionsB","handleRoleChange","e","id","myNewRole","key","myNumber","handleNewParticipantsState"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport CallObjectContext from '../../CallObjectContext';\nimport NameContext from '../../NameContext';\nimport { logDailyEvent } from '../../logUtils';\nimport './AdminPanel2.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport audioPlayer from '../../hooks/AudioPlayer';\n\n// import { sendState } from '../AdminPanel/AdminFunctions'\n// import SessionContext from '../../SessionContext';\n\n\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\n\n\n/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */\nfunction getStreamStates(callObject) {\n  let isCameraMuted,\n    isMicMuted,\n    isSharingScreen = false;\n  if (\n    callObject &&\n    callObject.participants() &&\n    callObject.participants().local\n  ) {\n    const localParticipant = callObject.participants().local;\n    isCameraMuted = !localParticipant.video;\n    isMicMuted = !localParticipant.audio;\n    isSharingScreen = localParticipant.screen;\n  }\n  return [isCameraMuted, isMicMuted, isSharingScreen];\n}\n\n\n\n/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */\nexport default function AdminPanel(props) {\n  const callObject = useContext(CallObjectContext);\n  // const [sessionState, setSessionState ] = useContext(SessionContext);\n  const myName = useContext(NameContext);\n  const [isCameraMuted, setCameraMuted] = useState(false);\n  const [isMicMuted, setMicMuted] = useState(false);\n  const [isSharingScreen, setSharingScreen] = useState(false);\n  const [displayChat, setChatDisplay] = useState(false);\n  const [highlightedChat, setChatHighlight] = useState(false);\n  const setSubs = () => {setSubscriptions(callObject)};  \n  const forceUpdate = useForceUpdate();\n  window.updateAdminPanel=forceUpdate;\n  const [playButtonText, setPlayButtonText] = useState('Play practice audio');\n  const [targetRecording, setTargetRecording] = useState('monologue1') ///////HAVE TO CHANGE THIS IN TWO PLACES\n\n  useEffect(() => {           //listen for participants leaving or joining and update component\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-left',\n      'joined-meeting',\n    ];\n\n    for (const event of events) {\n      callObject.on(event, () => setTimeout(()=>forceUpdate(),100));\n    }\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, () => setTimeout(()=>forceUpdate(),100));\n      }\n    };\n\n  }, [callObject]);\n\n\n\nconst sendState = () => {\n    console.log (\"Sending current state...\");\n    callObject.sendAppMessage(window.sessionState, '*'); \n}\n\n  useEffect(()=> {\n    window.sendState = sendState;\n  },[sendState]);\n\n\n  function toggleSessionActive() {\n    window.sessionState.isActive = !window.sessionState.isActive;\n    sendState();\n    if (window.sessionState.isActive && !window.myRole.includes('Actor') && !window.myRole.includes('Participant')) {\n      setSubscriptions(callObject,'Room1')\n    }\n    else {\n      setSubs();\n\n    }\n  }\n\n  function togglePractice() {\n    let recipientA = window.sessionState.roleOf.Actor1 && window[window.sessionState.roleOf.Actor1 + '_SessionID'];\n    let recipientB = window.sessionState.roleOf.Actor2 && window[window.sessionState.roleOf.Actor2 + '_SessionID'];\n    if(window.sessionState.roleOf.Actor1==window.myName) {recipientA='me'}\n    if(window.sessionState.roleOf.Actor2==window.myName) {recipientB='me'}\n\n    if (!recipientA && !recipientB) {return}\n\n    const action = window.audioIsPlaying ? 'pause' : 'play';\n    const instructionsA = {\n      type: 'instructions',\n      target: targetRecording,\n      action: action,\n      recipient: recipientA,\n    }\n    const instructionsB = {\n      type: 'instructions',\n      target: targetRecording + 'B',\n      action: action,\n      recipient: recipientB\n    }\n\n    if (recipientA) {\n      if(recipientA!='me') {\n        callObject.sendAppMessage(instructionsA,recipientA);\n      }\n      else if(recipientA=='me') {\n        audioPlayer(targetRecording,action);\n      }\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor1}`);\n    }\n    if (recipientB) {\n      if(recipientB!='me') {\n        callObject.sendAppMessage(instructionsB,recipientB);\n      }\n      else if(recipientB=='me') {\n        audioPlayer(targetRecording+'B',action);\n      }\n      console.log(`Sent ${action} request to ${window.sessionState.roleOf.Actor2}`);\n    }\n      \n    window.audioIsPlaying=(!window.audioIsPlaying);\n    setPlayButtonText(!window.audioIsPlaying ? 'Play practice audio' : 'Pause practice audio');\n\n\n  }\n\n\n\n\n  let handleRoleChange = (e) => {\n    window.sessionState.roleOf[e.target.id]=e.target.value;\n    console.log (e.target.id + ' is now: ' + window.sessionState.roleOf[e.target.id]);\n    sendState();\n\n    let myNewRole = 'Attendee'; //default, if no role assigned\n    for (const key in window.sessionState.roleOf) {\n        if(window.sessionState.roleOf[key]==window.myName) {\n            myNewRole = key;\n        }\n    }\n    if (myNewRole!=window.myRole) {\n        window.myRole = myNewRole;\n          if (window.myRole.includes('1')) {\n              window.myNumber=1;\n          } else if (window.myRole.includes('2')) {\n              window.myNumber=2;\n          }\n      }\n        if(window.sessionState.isActive){\n            // activateSession();  //rebuild UI for the newly assigned role, mid-session\n        } \n        setSubs();\n  }\n\n                  \n         \n\n\n  /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleNewParticipantsState(event) {\n      event && logDailyEvent(event);\n      const [isCameraMuted, isMicMuted, isSharingScreen] = getStreamStates(\n        callObject\n      );\n      setCameraMuted(isCameraMuted);\n      setMicMuted(isMicMuted);\n      setSharingScreen(isSharingScreen);\n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    callObject.on('participant-updated', handleNewParticipantsState);\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      callObject.off('participant-updated', handleNewParticipantsState);\n    };\n  }, [callObject]);\n\n\n    /* // Play practice audio for users */\n\n    \n\n  return (\n\n        <div className=\"admin-panel\">\n                 \n\n              \n                \n\n\n        </div>\n\n    \n  );\n  \n}\n"]},"metadata":{},"sourceType":"module"}