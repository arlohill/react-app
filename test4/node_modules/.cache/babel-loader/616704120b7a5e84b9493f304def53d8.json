{"ast":null,"code":"// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\nexport default function setSubscriptions(callObject, viewMode = null) {\n  console.log('Setting subscriptions...');\n  console.log('****My role is: ' + window.myRole);\n  let subscribedTo = 0;\n  window.currentSubs = []; //if session is active, set currentSubs according to my role\n\n  if (!viewMode && window.sessionState.isActive) {\n    switch (window.myRole) {\n      case 'Participant1':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n        !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      case 'Participant2':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n        !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        break;\n\n      case 'Actor1':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1 + '_AUDIO');\n        break;\n\n      case 'Actor2':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2 + '_AUDIO');\n        break;\n\n      case 'Attendee':\n        window.currentSubs = [];\n        break;\n\n      default:\n        window.currentSubs = [];\n        break;\n    } //Add Admin to currentSubs if applicable\n\n\n    if (window.sessionState.AdminVisible) {\n      window.currentSubs.push(\"Admin\");\n    }\n  }\n\n  if (viewMode) {\n    switch (viewMode) {\n      case 'Room1':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n        !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant1 && window.sessionState.roleOf.Participant2 && window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      case 'Room2':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n        !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.sessionState.roleOf.Participant2 && window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        break;\n\n      case 'Participants':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      case 'Actors':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n        window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n        break;\n\n      case 'All':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n        window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n        break;\n\n      case 'None':\n        window.currentSubs = [];\n        window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n        window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n        break;\n\n      default:\n        window.currentSubs = [];\n        break;\n    }\n  }\n\n  function setTracks() {\n    return new Promise(resolve => {\n      //cycle through each participant in meeting\n      let ps = callObject.participants();\n      Object.keys(ps).forEach(p => {\n        let participant = ps[p];\n        let thisUserName = participant.user_name;\n\n        if (p === 'local') {\n          return;\n        } //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n\n\n        if (!window.sessionState.isKnown) {\n          callObject.updateParticipant(participant.session_id, {\n            setSubscribedTracks: false\n          });\n          return;\n        }\n\n        console.log(\"This username is: \" + thisUserName); //If NOT ACTIVE (and not setting view mode), subscribe to everyone in the meeting\n\n        if (!window.sessionState.isActive && !viewMode) {\n          //audio only if currently Seconding\n          if (window.myRole.includes('Actor')) {\n            switch (window.myRole) {\n              case 'Actor1':\n                if (thisUserName == window.sessionState.roleOf.Participant1) {\n                  console.log('Subscribing to audio only for: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: false\n                  });\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: {\n                      audio: true,\n                      video: false,\n                      screenVideo: false\n                    }\n                  });\n                } else {\n                  console.log('Subscribing to: ' + thisUserName);\n                  window.currentSubs.push(thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: true\n                  });\n                  subscribedTo++;\n                }\n\n                break;\n\n              case 'Actor2':\n                if (thisUserName == window.sessionState.roleOf.Participant2) {\n                  console.log('Subscribing to audio only for: ' + thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: false\n                  });\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: {\n                      audio: true,\n                      video: false,\n                      screenVideo: false\n                    }\n                  });\n                } else {\n                  console.log('Subscribing to: ' + thisUserName);\n                  window.currentSubs.push(thisUserName);\n                  callObject.updateParticipant(participant.session_id, {\n                    setSubscribedTracks: true\n                  });\n                  subscribedTo++;\n                }\n\n                break;\n\n              default:\n                break;\n            }\n          } // audio and video for everyone else\n          else {\n              console.log('Subscribing to: ' + thisUserName);\n              window.currentSubs.push(thisUserName);\n\n              if (!callObject.participants()[participant.session_id].tracks.video.subscribed) {\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: false\n                });\n              }\n\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } //  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n          //     console.log('Subscribing to Admin:');\n          //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n          //     subscribedTo++;\n          //     console.log('Subscribed to session id: ' + participant.session_id);\n          // } \n\n        } //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n        else if (window.sessionState.isActive || viewMode) {\n            if (window.currentSubs.includes(thisUserName + '_AUDIO')) {\n              console.log('Subscribing to audio only for: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: {\n                  audio: true,\n                  video: false,\n                  screenVideo: false\n                }\n              });\n            } else if (window.currentSubs.includes(thisUserName)) {\n              console.log('Subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } else if (!window.currentSubs.includes(thisUserName)) {\n              console.log('NOT subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: false\n              });\n            }\n          }\n      });\n      resolve();\n    });\n  }\n\n  setTracks().then(() => {\n    //print subscriptions\n    var iterator = window.currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n\n    for (let elements of iterator) {\n      console.log(elements);\n    }\n\n    if (window.currentSubs.length < 1) {\n      console.log(\"No one.\");\n    }\n\n    window.setSubscriptions = setSubscriptions;\n    window.updateCall();\n    viewMode = null; //if no admin (or admin has left), start asking for state\n    // if (adminPresent==false) {\n    //     window.sessionState.isKnown=false;\n    //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n    //     stateRequest = setInterval(getState,2500);\n    //     console.log('no Admin present');\n    // }\n    // if (subscribedTo==0) {\n    //     window.isPopulated = false;\n    //     document.getElementById('empty-room').style.opacity='1';\n    //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n    //     if (window.sessionState.isActive==true) {\n    //         document.getElementById('empty-text').innerHTML=\"Hold that thought! 😐 <br><br> We're working to fix a connection problem.\"\n    //     } else if (window.sessionState.isActive==false) {\n    //         document.getElementById('empty-text').innerHTML=\"👋 <br>You're here!<br>Waiting for everyone else...\"\n    //     }\n    // } else if (subscribedTo>0) {\n    //     window.isPopulated = true;\n    //     document.getElementById('empty-room').style.opacity='0';\n    //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n    //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n    //     }\n    // }\n  });\n}\n;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/hooks/setSubscriptions.js"],"names":["setSubscriptions","callObject","viewMode","console","log","window","myRole","subscribedTo","currentSubs","sessionState","isActive","roleOf","Actor2","push","Participant2","Actor1","Participant1","AdminVisible","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","isKnown","updateParticipant","session_id","setSubscribedTracks","includes","audio","video","screenVideo","tracks","subscribed","then","iterator","values","elements","length","updateCall"],"mappings":"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","sourcesContent":["// import { useEffect } from \"react\";\n// import SessionContext from '../../SessionContext';\n\nexport default function setSubscriptions(callObject,viewMode=null) {\n\n    console.log('Setting subscriptions...');\n    console.log('****My role is: ' + window.myRole);\n    let subscribedTo=0;\n    window.currentSubs=[];\n    \n    //if session is active, set currentSubs according to my role\n        if (!viewMode && window.sessionState.isActive) {\n            switch (window.myRole) {\n                case 'Participant1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                    !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    break;\n                case 'Participant2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                    !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    break;\n                case 'Actor1':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1+'_AUDIO');\n                    break;\n                case 'Actor2':\n                    window.currentSubs=[];\n                    window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                    window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2+'_AUDIO');\n                    break;\n                case 'Attendee':\n                    window.currentSubs=[];\n                    break;\n                default:\n                    window.currentSubs=[];\n                    break;\n            }\n            //Add Admin to currentSubs if applicable\n            if (window.sessionState.AdminVisible) {\n            window.currentSubs.push (\"Admin\");\n        }\n    }\n\n    if(viewMode) {\n        switch (viewMode) {\n            case 'Room1':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                !window.sessionState.roleOf.Actor2 && window.sessionState.roleOf.Participant1 && window.sessionState.roleOf.Participant2 && window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                break;\n            case 'Room2':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                !window.sessionState.roleOf.Actor1 && window.sessionState.roleOf.Participant1 && window.sessionState.roleOf.Participant2 && window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                break;\n            case 'Participants':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                break;\n            case 'Actors':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                break;\n            case 'All':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                window.sessionState.roleOf.Actor1 && window.currentSubs.push(window.sessionState.roleOf.Actor1);\n                window.sessionState.roleOf.Actor2 && window.currentSubs.push(window.sessionState.roleOf.Actor2);\n                break;\n            case 'None':\n                window.currentSubs=[];\n                window.sessionState.roleOf.Participant1 && window.currentSubs.push(window.sessionState.roleOf.Participant1);\n                window.sessionState.roleOf.Participant2 && window.currentSubs.push(window.sessionState.roleOf.Participant2);\n                break;\n            default:\n                window.currentSubs=[];\n                break;\n        }\n    }\n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            Object.keys(ps).forEach((p) => {\n\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local') {\n                    return;\n                } \n\n                //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n                if (!window.sessionState.isKnown) {\n                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    return;\n                }\n\n\n\n                console.log(\"This username is: \" +thisUserName);\n                //If NOT ACTIVE (and not setting view mode), subscribe to everyone in the meeting\n                if (!window.sessionState.isActive && !viewMode) {\n\n                    //audio only if currently Seconding\n                    if (window.myRole.includes('Actor')) {\n                        switch (window.myRole) {\n                            case 'Actor1':\n                                    if (thisUserName==window.sessionState.roleOf.Participant1) {\n                                        console.log('Subscribing to audio only for: ' + thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                    } else {\n                                        console.log('Subscribing to: ' + thisUserName);\n                                        window.currentSubs.push(thisUserName);\n                                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                        subscribedTo++;\n                                    }\n                                break;\n                            case 'Actor2':\n                                if (thisUserName==window.sessionState.roleOf.Participant2) {\n                                    console.log('Subscribing to audio only for: ' + thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                                } else {\n                                    console.log('Subscribing to: ' + thisUserName);\n                                    window.currentSubs.push(thisUserName);\n                                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                    subscribedTo++;\n                                }\n                            break;\n                        \n                            default:\n                                break;\n                        }\n                    }\n\n                    // audio and video for everyone else\n                    else {  \n                        console.log('Subscribing to: ' + thisUserName);\n                        window.currentSubs.push(thisUserName);\n                        if (!callObject.participants()[participant.session_id].tracks.video.subscribed){\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                        }\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    //  else if (thisUserName=='Admin' && window.sessionState.AdminVisible) {\n                    //     console.log('Subscribing to Admin:');\n                    //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                    //     subscribedTo++;\n                    //     console.log('Subscribed to session id: ' + participant.session_id);\n                    // } \n\n                } \n\n                //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n                else if (window.sessionState.isActive || viewMode) {\n                    if(window.currentSubs.includes(thisUserName+'_AUDIO')) {\n                        console.log('Subscribing to audio only for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n                    else if(window.currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!window.currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve()\n        })\n    }\n    \n    setTracks().then(()=>{\n\n        //print subscriptions\n    var iterator = window.currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (window.currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n    window.setSubscriptions=setSubscriptions;\n    window.updateCall();\n    viewMode=null;\n\n        //if no admin (or admin has left), start asking for state\n        // if (adminPresent==false) {\n        //     window.sessionState.isKnown=false;\n        //     if (typeof(stateRequest)!='undefined') {clearInterval(stateRequest);}\n        //     stateRequest = setInterval(getState,2500);\n        //     console.log('no Admin present');\n        // }\n        // if (subscribedTo==0) {\n        //     window.isPopulated = false;\n        //     document.getElementById('empty-room').style.opacity='1';\n        //     if(!!document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='hidden';}\n        //     if (window.sessionState.isActive==true) {\n        //         document.getElementById('empty-text').innerHTML=\"Hold that thought! 😐 <br><br> We're working to fix a connection problem.\"\n        //     } else if (window.sessionState.isActive==false) {\n        //         document.getElementById('empty-text').innerHTML=\"👋 <br>You're here!<br>Waiting for everyone else...\"\n\n        //     }\n        // } else if (subscribedTo>0) {\n        //     window.isPopulated = true;\n        //     document.getElementById('empty-room').style.opacity='0';\n        //     if (document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\")){\n        //         document.querySelector(\"#root > div > div.daily-videos-wrapper > div.daily-video-div.remote.cam.cam-muted.mic-muted\").style.visibility='visible';\n        //     }\n\n        // }\n\n    })\n\n    \n   \n};\n\n"]},"metadata":{},"sourceType":"module"}