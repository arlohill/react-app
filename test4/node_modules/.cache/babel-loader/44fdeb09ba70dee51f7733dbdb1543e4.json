{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport useSetSubscriptions from '../../hooks/setSubscriptions';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  // useSetSubscriptions();\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n  const {\n    myStateArray,\n    setName,\n    setRole,\n    setUserList,\n    setViewMode,\n    setCamOnAtSessionStart,\n    setMicOnAtSessionStart,\n    setAdminPresent,\n    setAmAdmin,\n    setNumber\n  } = useContext(MyContext);\n  const [myState, setMyState] = myStateArray;\n  useEffect(() => {\n    const myRole = myState.role;\n    let currentSubs = [];\n    let viewMode = myState.viewMode;\n\n    if (!sessionState) {\n      return;\n    } ///disable 'viewMode' unless session is active and I'm a viewer\n\n\n    if (!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n      viewMode = null;\n    }\n\n    console.log('Setting subscriptions...'); // console.log('****My role is: ' + myRole);\n    // console.log('viewMode is: ' + viewMode);\n\n    let subscribedTo = 0; //if session is active, set currentSubs according to my role\n\n    if (!viewMode && sessionState.isActive) {\n      switch (myRole) {\n        case 'Buyer1':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Buyer2':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Buyer3':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          break;\n\n        case 'Seller':\n          currentSubs = [];\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow1':\n        case 'Shadow2':\n        case 'Shadow3':\n        case 'Shadow4':\n          currentSubs = [];\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller + '_AUDIO');\n          break;\n\n        case 'Attendee':\n          currentSubs = [];\n          break;\n\n        default:\n          currentSubs = [];\n          break;\n      } //Add Admin to currentSubs if applicable\n\n\n      if (sessionState.AdminVisible) {\n        currentSubs.push(\"Admin\");\n      }\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(myState.name) === -1;\n      }); //don't include self\n    }\n\n    if (viewMode) {\n      switch (viewMode) {\n        case 'Seller':\n          currentSubs = [];\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow1':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow2':\n          currentSubs = [];\n          sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow3':\n          sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow4':\n          currentSubs = [];\n          sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'All':\n          currentSubs = [];\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n          sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n          sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n          sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        default:\n          currentSubs = [];\n          break;\n      }\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(myState.name) === -1;\n      }); //don't include self\n    }\n\n    function setTracks() {\n      return new Promise(resolve => {\n        //cycle through each participant in meeting\n        let ps = callObject.participants(); // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n\n        Object.keys(ps).forEach(p => {\n          let participant = ps[p];\n          let thisUserName = participant.user_name;\n\n          if (p === 'local' || thisUserName == myState.name) {\n            return;\n          } //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n\n\n          if (!sessionState.isKnown) {\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: false\n            });\n            return;\n          } // console.log(\"This username is: \" +thisUserName);\n          //If NOT ACTIVE, subscribe to everyone in the meeting\n\n\n          if (!sessionState.isActive) {\n            if (thisUserName == 'InvisibleScreenShareWidget') {\n              console.log('Not subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: {\n                  audio: false,\n                  video: false,\n                  screenVideo: true,\n                  screenAudio: true\n                }\n              });\n            } else {\n              console.log('Subscribing to: ' + thisUserName);\n              currentSubs.push(thisUserName); // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n              //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n              // }\n\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } // }\n\n          } //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n          else if (sessionState.isActive || viewMode) {\n              if (currentSubs.includes(thisUserName + '_AUDIO')) {\n                console.log('Subscribing to audio only for: ' + thisUserName);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: {\n                    audio: true,\n                    video: false,\n                    screenVideo: false\n                  }\n                });\n              } else if (currentSubs.includes(thisUserName)) {\n                console.log('Subscribing to: ' + thisUserName);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: true\n                });\n                subscribedTo++;\n              } else if (!currentSubs.includes(thisUserName)) {\n                console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: false\n                });\n              }\n            }\n        });\n        resolve();\n      });\n    }\n\n    setTracks().then(() => {\n      //remove screenshare widget from currentSubs array to not count it\n      const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n\n      if (index > -1) {\n        currentSubs.splice(index, 1);\n      } //print subscriptions\n\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(window.myName) === -1;\n      }); //don't include self\n\n      var iterator = currentSubs.values();\n      console.log(\"Currently subscribed to:\");\n\n      for (let elements of iterator) {\n        console.log(elements);\n      }\n\n      if (currentSubs.length < 1) {\n        console.log(\"No one.\");\n      } ///*** for debugging purposes\n\n\n      window.viewMode = viewMode;\n      window.currentSubs = currentSubs;\n      window.numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {\n        return str.indexOf('_AUDIO') === -1;\n      }).filter(function (str) {\n        return str.indexOf('_AUDIO') === -1;\n      }).filter(function (str) {\n        return str.indexOf(window.myName) === -1;\n      }).length;\n    });\n  }, [sessionState, myState, callObject]);\n\n  window.updateCall = () => {\n    forceUpdate();\n  };\n  /**\n    * Set default viewmode when session begins or my role changes\n    */\n\n\n  useEffect(() => {\n    if (sessionState.isActive) {\n      if (sessionState.roleOf.Shadow1) {\n        setViewMode('Shadow1');\n      } else if (sessionState.roleOf.Shadow2) //fallbacks in case shadow1 is not assigned\n        {\n          setViewMode('Shadow2');\n        } else if (sessionState.roleOf.Shadow3) {\n        setViewMode('Shadow3');\n      } else if (sessionState.roleOf.Shadow4) {\n        setViewMode('Shadow4');\n      } else {\n        setViewMode('Seller');\n      }\n    } else {\n      setViewMode(null);\n    }\n  }, [sessionState.isActive, myState.role]);\n  /**\n  * Update my role according to sessionState changes\n  */\n\n  useEffect(() => {\n    let myNewRole = 'Attendee'; //default, if no role assigned\n\n    for (const key in sessionState.roleOf) {\n      if (sessionState.roleOf[key] == myState.name) {\n        myNewRole = key;\n      }\n    }\n\n    if (myNewRole !== myState.role) {\n      setRole(myNewRole);\n\n      if (myNewRole.includes('1')) {\n        setNumber(1);\n      } else if (myNewRole.includes('2')) {\n        setNumber(2);\n      }\n    }\n  }, [sessionState.roleOf]);\n  const getUserList = useCallback(() => {\n    return new Promise(resolve => {\n      console.log('*****UPDATING PARTICIPANT LIST******');\n      let userListIncludesAdmin = false; //default\n\n      let ps = callObject.participants();\n      let workingUserList = {\n        names: [myState.name],\n        sessionIdFor: {}\n      };\n\n      for (const p in ps) {\n        if (p !== 'local') {\n          let thisUserName = ps[p].user_name;\n          let thisSessionId = ps[p].session_id;\n          workingUserList.names.push(thisUserName); //add each user_name with its sessionID to UserList\n\n          workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n          console.log('***ADDING: ' + thisUserName);\n\n          if (thisUserName.includes('_Admin')) {\n            userListIncludesAdmin = true;\n          }\n        }\n\n        ;\n      }\n\n      ;\n      userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n      workingUserList.names.sort(); //alphebetize that list \n\n      console.log(`here's the userList: ${workingUserList.names}`);\n      resolve([workingUserList, userListIncludesAdmin]);\n    });\n  }, [callObject.myState]);\n  const checkIfAdminPresent = useCallback(() => {\n    return new Promise(resolve => {\n      let adminAlreadyPresent = false;\n      let ps = callObject.participants();\n      const lookForMoreParticipants = setInterval(() => {\n        //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n        if (Object.keys(ps).length > 1 || Object.keys(ps).length <= 1 && ps.local.user_name == myState.name) {\n          clearInterval(lookForMoreParticipants);\n\n          for (const p in ps) {\n            let thisUserName = ps[p].user_name;\n\n            if (thisUserName.includes('_Admin') && p !== 'local') {\n              adminAlreadyPresent = true;\n            }\n\n            console.log(`Participant present: ${thisUserName}`);\n          }\n\n          resolve(adminAlreadyPresent);\n        } else {\n          return;\n        }\n      }, 500);\n    });\n  }, [callObject.myState]);\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', // 'participant-updated',\n    'participant-left', 'joined-meeting'];\n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      });\n\n      if (e && e.action != 'participant-updated') {\n        if (e.action == \"participant-joined\" || e.action == \"participant-left\") {\n          window.event = e;\n          setTimeout(update, 50); //wait is necessary to avoid 'dummy' userName\n\n          function update() {\n            getUserList().then(([workingUserList, userListIncludesAdmin]) => {\n              setUserList(workingUserList);\n              setAdminPresent(userListIncludesAdmin); // if (sessionState.isKnown === null) {\n              //   if(myState.amAdmin) {   //determine if there's a prior session state\n              //     setSessionState((prev)=>({\n              //       ...prev,\n              //       isKnown: userListIncludesAdmin ? false : true,   //if an admin is already present, make joining admin request a state update\n              //     }));\n              //     let isKnown = userListIncludesAdmin ? false : true;\n              //     console.log('just set IS KNOWN to: ' + isKnown);\n              //   }\n              // } else {      //for non-admins\n              //   setSessionState((prev)=>({\n              //     ...prev,\n              //     isKnown: false,\n              //   }));\n              // }\n            });\n          }\n        } else if (e.action == 'joined-meeting') {\n          console.log('*****I JOINED THE MEETING');\n          getUserList().then(([workingUserList, userListIncludesAdmin]) => {\n            setUserList(workingUserList);\n\n            if (myState.amAdmin && !userListIncludesAdmin) {\n              checkIfAdminPresent().then(adminAlreadyPresent => {\n                setSessionState(prev => ({ ...prev,\n                  isKnown: adminAlreadyPresent ? false : true //if an admin is already present, make joining admin request a state update\n\n                }));\n              });\n            }\n          });\n        }\n      }\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []); ///todo: fix this\n  // const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n  //   useEffect(()=>{\n  // window.numberOfSubs =numberOfSubs;\n  // console.log('*****NUMBER OF SUBS:'+numberOfSubs);\n  //   },[numberOfSubs])\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isAudioOnly = () => {\n        if (!callItem.audioTrackState || !callItem.videoTrackState) {\n          return;\n        }\n\n        return callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed;\n      };\n\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && window.numberOfSubs && window.numberOfSubs > 1 && !containsScreenShare(callState.callItems); //videoTrackState()\n\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isAudioOnly: isAudioOnly(),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id),\n        isScreenShare: isScreenShare(id) // onClick={\n        //   isLocal(id)\n        //     ? null\n        //     : () => {\n        //         sendHello(id);\n        //       }\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: myState.amAdmin ? \"call-with-sidebar\" : \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${containsScreenShare(callState.callItems) && '1' || window.numberOfSubs && window.numberOfSubs + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","useState","Tile","CallObjectContext","MyContext","SessionStateContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","useSetSubscriptions","useForceUpdate","value","setValue","Call","callObject","session","sessionState","setSessionState","callState","dispatch","forceUpdate","myStateArray","setName","setRole","setUserList","setViewMode","setCamOnAtSessionStart","setMicOnAtSessionStart","setAdminPresent","setAmAdmin","setNumber","myState","setMyState","myRole","role","currentSubs","viewMode","isActive","includes","console","log","subscribedTo","roleOf","Shadow1","push","Seller","Buyer2","Buyer3","Buyer1","AdminVisible","filter","str","indexOf","name","Shadow2","Shadow3","Shadow4","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","isKnown","updateParticipant","session_id","setSubscribedTracks","audio","video","screenVideo","screenAudio","then","index","splice","window","myName","iterator","values","elements","length","numberOfSubs","updateCall","myNewRole","key","getUserList","userListIncludesAdmin","workingUserList","names","sessionIdFor","thisSessionId","sort","checkIfAdminPresent","adminAlreadyPresent","lookForMoreParticipants","setInterval","local","clearInterval","events","handleNewParticipantsState","e","type","action","event","setTimeout","update","amAdmin","prev","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","t","clearTimeout","getTiles","largeTiles","smallTiles","entries","callItems","id","callItem","isAudioOnly","audioTrackState","videoTrackState","subscribed","isLarge","tile","smallTales","add","n","i","addFakeParticipant","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\nimport MyContext from '../../MyContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport useSetSubscriptions from '../../hooks/setSubscriptions';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  // useSetSubscriptions();\n\n  const callObject = useContext(CallObjectContext);\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n  const { myStateArray, \n          setName, \n          setRole,\n          setUserList,\n          setViewMode,\n          setCamOnAtSessionStart,\n          setMicOnAtSessionStart,\n          setAdminPresent,\n          setAmAdmin, \n          setNumber,\n        } = useContext(MyContext);\n  const [ myState,setMyState ] = myStateArray;\n\n\n  useEffect(()=> {\n\n    const myRole = myState.role;\n    let currentSubs = [];\n    let viewMode = myState.viewMode;\n\n    if (!sessionState) {return;}\n\n    ///disable 'viewMode' unless session is active and I'm a viewer\n    if(!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n        viewMode = null;\n    }\n\n\n    console.log('Setting subscriptions...');\n    // console.log('****My role is: ' + myRole);\n    // console.log('viewMode is: ' + viewMode);\n    let subscribedTo=0;\n\n    \n    //if session is active, set currentSubs according to my role\n        if (!viewMode && sessionState.isActive) {\n            switch (myRole) {\n                case 'Buyer1':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                    !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Buyer2':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                    !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Buyer3':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                    !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    break;\n                case 'Seller':\n                    currentSubs=[];\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Shadow1':\n                case 'Shadow2':\n                case 'Shadow3':\n                case 'Shadow4':\n                    currentSubs=[];\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller+'_AUDIO');\n                    break;\n                case 'Attendee':\n                    currentSubs=[];\n                    break;\n                default:\n                    currentSubs=[];\n                    break;\n            }\n            //Add Admin to currentSubs if applicable\n            if (sessionState.AdminVisible) {\n            currentSubs.push (\"Admin\");\n        }\n\n        currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n\n    }\n\n    if(viewMode) {\n\n        switch (viewMode) {\n            case 'Seller':\n                currentSubs=[];\n                sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            case 'Shadow1':\n                currentSubs=[];\n                sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            case 'Shadow2':\n                currentSubs=[];\n                sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            case 'Shadow3':\n                sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            case 'Shadow4':\n                currentSubs=[];\n                sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            case 'All':\n                currentSubs=[];\n                sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n                sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n                sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n                sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n                sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n                sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                break;\n            default:\n                currentSubs=[];\n                break;\n        }\n\n        currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n    }\n\n    \n    function setTracks() {\n\n        return new Promise( (resolve) => {\n\n            //cycle through each participant in meeting\n            let ps = callObject.participants();\n            // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n            Object.keys(ps).forEach((p) => {\n                let participant = ps[p];\n                let thisUserName = participant.user_name;\n\n                if (p === 'local' || thisUserName==myState.name) {\n                    return;\n                } \n    \n\n                //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n                if (!sessionState.isKnown) {\n                    callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    return;\n                }\n\n\n\n                // console.log(\"This username is: \" +thisUserName);\n\n                //If NOT ACTIVE, subscribe to everyone in the meeting\n                if (!sessionState.isActive) {\n\n                        if (thisUserName=='InvisibleScreenShareWidget') {\n                            console.log('Not subscribing to: ' + thisUserName);\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: false, video: false, screenVideo: true, screenAudio: true}});\n\n                        \n                        } else {\n                            console.log('Subscribing to: ' + thisUserName);\n                            currentSubs.push(thisUserName);\n                            // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n                            //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n                            // }\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                            subscribedTo++;\n                            }    \n\n                    // }\n\n\n\n                } \n\n                //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n                else if (sessionState.isActive || viewMode) {\n                    if(currentSubs.includes(thisUserName+'_AUDIO')) {\n                        console.log('Subscribing to audio only for: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                    }\n                    else if(currentSubs.includes(thisUserName)) {\n                        console.log('Subscribing to: ' + thisUserName);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                        subscribedTo++;\n                    }\n                    else if (!currentSubs.includes(thisUserName)) {\n                        console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                    }\n                }\n            });\n            resolve();\n        })\n    }\n    \n    setTracks().then(()=>{\n        \n        //remove screenshare widget from currentSubs array to not count it\n        const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n        if (index > -1) {\n          currentSubs.splice(index, 1);\n        }\n\n    //print subscriptions\n    currentSubs.filter(function (str) {return str.indexOf(window.myName) === -1}) //don't include self\n\n    var iterator = currentSubs.values();\n    console.log(\"Currently subscribed to:\");\n    for (let elements of iterator) { \n        console.log(elements); \n    } \n    if (currentSubs.length < 1) {\n        console.log (\"No one.\")\n    }\n\n    ///*** for debugging purposes\n    window.viewMode = viewMode;\n    window.currentSubs = currentSubs;\n    window.numberOfSubs=window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length;\n\n\n    })\n\n},[sessionState,myState,callObject]);\n\n\n\n  window.updateCall = () => {\n    forceUpdate();\n  }\n\n\n\n /**\n   * Set default viewmode when session begins or my role changes\n   */\n  useEffect(()=> {\n    if(sessionState.isActive) {\n      if (sessionState.roleOf.Shadow1)\n        {setViewMode('Shadow1');}\n      else if (sessionState.roleOf.Shadow2)    //fallbacks in case shadow1 is not assigned\n        {setViewMode('Shadow2');}\n      else if (sessionState.roleOf.Shadow3)\n        {setViewMode('Shadow3');}\n      else if (sessionState.roleOf.Shadow4)\n        {setViewMode('Shadow4');}\n      else\n        {setViewMode('Seller');}\n    } else {setViewMode(null);}\n  },[sessionState.isActive,myState.role]);\n\n\n   /**\n   * Update my role according to sessionState changes\n   */\n   useEffect(()=> {\n    let myNewRole = 'Attendee'; //default, if no role assigned\n    for (const key in sessionState.roleOf) {\n        if(sessionState.roleOf[key]==myState.name) {\n            myNewRole = key;\n        }\n    }\n    if (myNewRole!==myState.role) {\n        setRole(myNewRole);\n          if (myNewRole.includes('1')) {\n              setNumber(1);\n          } else if (myNewRole.includes('2')) {\n              setNumber(2);\n          }\n      }\n   },[sessionState.roleOf])\n      \n\n   const getUserList = useCallback(()=>{\n\n      return new Promise((resolve)=>{\n  \n          console.log('*****UPDATING PARTICIPANT LIST******');\n          let userListIncludesAdmin=false;   //default\n          let ps=callObject.participants(); \n          let workingUserList = {\n              names: [myState.name],\n              sessionIdFor: {},\n          }\n      \n          for (const p in ps) {\n              if (p!=='local') {\n                  let thisUserName = ps[p].user_name;\n                  let thisSessionId = ps[p].session_id;\n                  workingUserList.names.push(thisUserName);      //add each user_name with its sessionID to UserList\n                  workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n                  console.log('***ADDING: ' + thisUserName);\n                  if (thisUserName.includes('_Admin')) {\n                      userListIncludesAdmin = true;\n                  } \n              };\n          };\n      \n          userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n          workingUserList.names.sort();       //alphebetize that list \n          console.log(`here's the userList: ${workingUserList.names}`);\n          resolve([workingUserList,userListIncludesAdmin]);\n      });\n\n   },[callObject.myState]);\n\n\nconst checkIfAdminPresent = useCallback(()=> {\n\n    return new Promise((resolve) => {\n      let adminAlreadyPresent = false;\n      let ps=callObject.participants();\n      const lookForMoreParticipants = setInterval (()=>{  //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n        if  (Object.keys(ps).length > 1\n              || (Object.keys(ps).length <= 1 && ps.local.user_name == myState.name)  \n        ) {\n              clearInterval(lookForMoreParticipants);\n              for (const p in ps) {\n                let thisUserName = ps[p].user_name;\n                if (thisUserName.includes('_Admin') && p!=='local') {\n                  adminAlreadyPresent = true;\n                }\n                console.log(`Participant present: ${thisUserName}`);\n              }\n              resolve (adminAlreadyPresent);\n        } else {return;}\n      },500)\n    })\n  },[callObject.myState]);\n\n  \n\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      // 'participant-updated',\n      'participant-left',\n      'joined-meeting',\n    ];\n\n   \n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n\n      if(e && e.action!='participant-updated') {\n          \n          if (e.action==\"participant-joined\" || e.action==\"participant-left\") {\n            window.event=e;\n            \n            setTimeout(update,50);  //wait is necessary to avoid 'dummy' userName\n\n            function update() {\n              getUserList()\n              .then(([workingUserList,userListIncludesAdmin])=>{\n                  setUserList(workingUserList);\n                  setAdminPresent(userListIncludesAdmin);\n                  // if (sessionState.isKnown === null) {\n                  //   if(myState.amAdmin) {   //determine if there's a prior session state\n                  //     setSessionState((prev)=>({\n                  //       ...prev,\n                  //       isKnown: userListIncludesAdmin ? false : true,   //if an admin is already present, make joining admin request a state update\n                  //     }));\n\n                  //     let isKnown = userListIncludesAdmin ? false : true;\n                  //     console.log('just set IS KNOWN to: ' + isKnown);\n                  //   }\n                  // } else {      //for non-admins\n                  //   setSessionState((prev)=>({\n                  //     ...prev,\n                  //     isKnown: false,\n                  //   }));\n                  // }\n                });\n            }\n           \n\n          } else if(e.action=='joined-meeting') {\n            console.log('*****I JOINED THE MEETING');\n            getUserList()\n                .then(([workingUserList,userListIncludesAdmin])=>{\n                  setUserList(workingUserList);\n                  if(myState.amAdmin && !userListIncludesAdmin) {\n                    checkIfAdminPresent().then((adminAlreadyPresent)=>{\n                      setSessionState((prev)=>({\n                        ...prev,\n                        isKnown: adminAlreadyPresent ? false : true,   //if an admin is already present, make joining admin request a state update\n                      }));\n                    })\n                  }\n\n              });\n          }        \n      } \n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n\n \n\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n\n  \n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  ///todo: fix this\n  // const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n\n\n//   useEffect(()=>{\n// window.numberOfSubs =numberOfSubs;\n// console.log('*****NUMBER OF SUBS:'+numberOfSubs);\n//   },[numberOfSubs])\n\n\n\n \n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n\n\n      const isAudioOnly = () => {\n        if(!callItem.audioTrackState || !callItem.videoTrackState) {return}\n        return (callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed);\n      }\n\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems)) \n        || (isLocal(id) && window.numberOfSubs && window.numberOfSubs>1 && !containsScreenShare(callState.callItems))   //videoTrackState()\n\n        \n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isAudioOnly={isAudioOnly()}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          isScreenShare={isScreenShare(id)}\n          // onClick={\n          //   isLocal(id)\n          //     ? null\n          //     : () => {\n          //         sendHello(id);\n          //       }\n          // }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n    \n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className={myState.amAdmin ? \"call-with-sidebar\" : \"call\"}>\n                                      {/* add # of tiles to class name. alternative: {largeTiles.length}*/}\n      <div className={`large-tiles count-${(containsScreenShare(callState.callItems)&&'1')||window.numberOfSubs && window.numberOfSubs+1}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}