{"ast":null,"code":"import _defineProperty from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./RoleSelector.css';import setSubscriptions from'../../hooks/setSubscriptions';import CallObjectContext from'../../CallObjectContext';import SessionStateContext from'../../SessionStateContext';import MyContext from'../../MyContext';export default function RoleSelector(props){var callObject=useContext(CallObjectContext);var _useContext=useContext(SessionStateContext),session=_useContext.session;var _session=_slicedToArray(session,2),sessionState=_session[0],setSessionState=_session[1];var role=props.role;var _useContext2=useContext(MyContext),myStateArray=_useContext2.myStateArray,setNumber=_useContext2.setNumber;var _myStateArray=_slicedToArray(myStateArray,2),myState=_myStateArray[0],setMyState=_myStateArray[1];// const sendState = () => {\n//     console.log (\"Sending current state...\");\n//     callObject.sendAppMessage(sessionState, '*'); \n// }\nvar handleRoleChange=function handleRoleChange(e){window.role=role;window.test=e.target.id;var newRole=e.target.id;var newName=e.target.value;setSessionState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{roleOf:_objectSpread(_objectSpread({},prevState.roleOf),{},_defineProperty({},newRole,newName))});});console.log(e.target.id+' is now: '+e.target.value);setSessionState(function(prev){return _objectSpread(_objectSpread({},prev),{},{hasAnUpdate:true});});};return/*#__PURE__*/React.createElement(\"form\",{className:\"dropdown\"},/*#__PURE__*/React.createElement(\"select\",{className:\"selector\",id:role,onChange:handleRoleChange,value:sessionState.roleOf[role]},/*#__PURE__*/React.createElement(\"option\",{value:null}),myState.userList.names&&myState.userList.names.length>0&&myState.userList.names.map(function(user){return/*#__PURE__*/React.createElement(\"option\",{value:user},user.includes('_Admin')?user.split('_Admin').join(''):user);})));}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/RoleSelector/RoleSelector.js"],"names":["React","useContext","useEffect","useState","setSubscriptions","CallObjectContext","SessionStateContext","MyContext","RoleSelector","props","callObject","session","sessionState","setSessionState","role","myStateArray","setNumber","myState","setMyState","handleRoleChange","e","window","test","target","id","newRole","newName","value","prevState","roleOf","console","log","prev","hasAnUpdate","userList","names","length","map","user","includes","split","join"],"mappings":"4fAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,MAAO,oBAAP,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8BAA7B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yBAA9B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,2BAAhC,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAKA,cAAe,SAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CACxC,GAAMC,CAAAA,UAAU,CAAGT,UAAU,CAACI,iBAAD,CAA7B,CADwC,gBAEpBJ,UAAU,CAACK,mBAAD,CAFU,CAEhCK,OAFgC,aAEhCA,OAFgC,6BAGAA,OAHA,IAGhCC,YAHgC,aAGnBC,eAHmB,aAIxC,GAAMC,CAAAA,IAAI,CAAGL,KAAK,CAACK,IAAnB,CAJwC,iBAehCb,UAAU,CAACM,SAAD,CAfsB,CAKhCQ,YALgC,cAKhCA,YALgC,CAclCC,SAdkC,cAclCA,SAdkC,kCAgBXD,YAhBW,IAgBlCE,OAhBkC,kBAgB1BC,UAhB0B,kBAkBxC;AACA;AACA;AACA;AAGA,GAAIC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAO,CAC1BC,MAAM,CAACP,IAAP,CAAYA,IAAZ,CACAO,MAAM,CAACC,IAAP,CAAYF,CAAC,CAACG,MAAF,CAASC,EAArB,CACA,GAAIC,CAAAA,OAAO,CAACL,CAAC,CAACG,MAAF,CAASC,EAArB,CACA,GAAIE,CAAAA,OAAO,CAACN,CAAC,CAACG,MAAF,CAASI,KAArB,CACAd,eAAe,CAAC,SAACe,SAAD,wCAETA,SAFS,MAGZC,MAAM,gCACKD,SAAS,CAACC,MADf,wBAEGJ,OAFH,CAEaC,OAFb,EAHM,IAAD,CAAf,CASAI,OAAO,CAACC,GAAR,CAAaX,CAAC,CAACG,MAAF,CAASC,EAAT,CAAc,WAAd,CAA4BJ,CAAC,CAACG,MAAF,CAASI,KAAlD,EACAd,eAAe,CAAC,SAAAmB,IAAI,wCACbA,IADa,MAEhBC,WAAW,CAAC,IAFI,IAAL,CAAf,CAIH,CAnBD,CAuBA,mBAKA,4BAAM,SAAS,CAAC,UAAhB,eACQ,8BAAQ,SAAS,CAAC,UAAlB,CAA6B,EAAE,CAAEnB,IAAjC,CAAuC,QAAQ,CAAEK,gBAAjD,CAAmE,KAAK,CAAEP,YAAY,CAACiB,MAAb,CAAoBf,IAApB,CAA1E,eACA,8BAAQ,KAAK,CAAE,IAAf,EADA,CAEKG,OAAO,CAACiB,QAAR,CAAiBC,KAAjB,EAA0BlB,OAAO,CAACiB,QAAR,CAAiBC,KAAjB,CAAuBC,MAAvB,CAA8B,CAAxD,EAA6DnB,OAAO,CAACiB,QAAR,CAAiBC,KAAjB,CAAuBE,GAAvB,CAA2B,SAACC,IAAD,qBAAU,8BAAQ,KAAK,CAAEA,IAAf,EAAsBA,IAAI,CAACC,QAAL,CAAc,QAAd,EAA0BD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,IAArB,CAA0B,EAA1B,CAA1B,CAA0DH,IAAhF,CAAV,EAA3B,CAFlE,CADR,CALA,CAcD","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport './RoleSelector.css';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nimport CallObjectContext from '../../CallObjectContext';\nimport SessionStateContext from '../../SessionStateContext';\nimport MyContext from '../../MyContext';\n\n\n\n\nexport default function RoleSelector(props) {\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;\n    const role = props.role;\n    const { myStateArray, \n        //   setName, \n        //   setRole,\n        //   setUserList,\n        //   setViewMode,\n        //   setCamOnAtSessionStart,\n        //   setMicOnAtSessionStart,\n        //   setAdminPresent,\n        //   setAmAdmin, \n          setNumber,\n        } = useContext(MyContext);\n  const [ myState,setMyState ] = myStateArray;\n    \n    // const sendState = () => {\n    //     console.log (\"Sending current state...\");\n    //     callObject.sendAppMessage(sessionState, '*'); \n    // }\n\n\n    let handleRoleChange = (e) => {\n        window.role=role;\n        window.test=e.target.id;\n        let newRole=e.target.id;\n        let newName=e.target.value;\n        setSessionState((prevState)=>(\n            {\n            ...prevState,\n            roleOf: {\n                    ...prevState.roleOf,\n                    [newRole]: newName,\n                    }\n            }\n            ))\n        console.log (e.target.id + ' is now: ' + e.target.value);\n        setSessionState(prev=>({\n            ...prev,\n            hasAnUpdate:true,\n          }));\n    }\n\n\n\n    return (\n\n\n\n\n    <form className='dropdown'>\n            <select className='selector' id={role} onChange={handleRoleChange} value={sessionState.roleOf[role]}>            \n            <option value={null}></option>\n                {myState.userList.names && myState.userList.names.length>0 && myState.userList.names.map((user) => <option value={user}>{user.includes('_Admin') ? user.split('_Admin').join('') : user}</option>)}\n            </select>\n    </form>\n                    \n\n    );\n  }\n\n        "]},"metadata":{},"sourceType":"module"}