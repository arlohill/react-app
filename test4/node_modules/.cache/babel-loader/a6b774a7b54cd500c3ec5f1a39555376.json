{"ast":null,"code":"/* global rtcpeers */\nimport { useCallback, useEffect, useState } from 'react';\nimport { VIDEO_QUALITY_HIGH, VIDEO_QUALITY_LOW, VIDEO_QUALITY_BANDWIDTH_SAVER } from '../constants';\nexport const NETWORK_STATE_GOOD = 'good';\nexport const NETWORK_STATE_LOW = 'low';\nexport const NETWORK_STATE_VERY_LOW = 'very-low';\nconst STANDARD_HIGH_BITRATE_CAP = 980;\nconst STANDARD_LOW_BITRATE_CAP = 300;\nexport const useNetworkState = (callObject = null, quality = VIDEO_QUALITY_HIGH) => {\n  const [threshold, setThreshold] = useState(NETWORK_STATE_GOOD);\n  const setQuality = useCallback(q => {\n    var _rtcpeers, _rtcpeers$currentlyPr, _rtcpeers$currentlyPr2;\n\n    if (!callObject || typeof rtcpeers === 'undefined') return;\n    const peers = Object.keys(callObject.participants()).length - 1;\n    const isSFU = ((_rtcpeers = rtcpeers) === null || _rtcpeers === void 0 ? void 0 : (_rtcpeers$currentlyPr = _rtcpeers.currentlyPreferred) === null || _rtcpeers$currentlyPr === void 0 ? void 0 : (_rtcpeers$currentlyPr2 = _rtcpeers$currentlyPr.typeName) === null || _rtcpeers$currentlyPr2 === void 0 ? void 0 : _rtcpeers$currentlyPr2.call(_rtcpeers$currentlyPr)) === 'sfu';\n    const lowKbs = isSFU ? STANDARD_LOW_BITRATE_CAP : STANDARD_LOW_BITRATE_CAP / Math.max(1, peers);\n\n    switch (q) {\n      case VIDEO_QUALITY_HIGH:\n        callObject.setBandwidth({\n          kbs: STANDARD_HIGH_BITRATE_CAP\n        });\n        break;\n\n      case VIDEO_QUALITY_LOW:\n        callObject.setBandwidth({\n          kbs: lowKbs\n        });\n        break;\n\n      case VIDEO_QUALITY_BANDWIDTH_SAVER:\n        callObject.setLocalVideo(false);\n        callObject.setBandwidth({\n          kbs: lowKbs\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, [callObject]);\n  const handleNetworkQualityChange = useCallback(ev => {\n    if (ev.threshold === threshold) return;\n\n    switch (ev.threshold) {\n      case NETWORK_STATE_VERY_LOW:\n        setQuality(VIDEO_QUALITY_BANDWIDTH_SAVER);\n        setThreshold(NETWORK_STATE_VERY_LOW);\n        break;\n\n      case NETWORK_STATE_LOW:\n        setQuality(quality === VIDEO_QUALITY_BANDWIDTH_SAVER ? quality : NETWORK_STATE_LOW);\n        setThreshold(NETWORK_STATE_LOW);\n        break;\n\n      case NETWORK_STATE_GOOD:\n        setQuality([VIDEO_QUALITY_BANDWIDTH_SAVER, VIDEO_QUALITY_LOW].includes(quality) ? quality : VIDEO_QUALITY_HIGH);\n        setThreshold(NETWORK_STATE_GOOD);\n        break;\n\n      default:\n        break;\n    }\n  }, [setQuality, threshold, quality]);\n  useEffect(() => {\n    if (!callObject) return false;\n    callObject.on('network-quality-change', handleNetworkQualityChange);\n    return () => callObject.off('network-quality-change', handleNetworkQualityChange);\n  }, [callObject, handleNetworkQualityChange]);\n  useEffect(() => {\n    setQuality(quality);\n  }, [quality, setQuality]);\n  return threshold;\n};","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/General/Haircheck/Shared/useNetworkState.js"],"names":["useCallback","useEffect","useState","VIDEO_QUALITY_HIGH","VIDEO_QUALITY_LOW","VIDEO_QUALITY_BANDWIDTH_SAVER","NETWORK_STATE_GOOD","NETWORK_STATE_LOW","NETWORK_STATE_VERY_LOW","STANDARD_HIGH_BITRATE_CAP","STANDARD_LOW_BITRATE_CAP","useNetworkState","callObject","quality","threshold","setThreshold","setQuality","q","rtcpeers","peers","Object","keys","participants","length","isSFU","currentlyPreferred","typeName","lowKbs","Math","max","setBandwidth","kbs","setLocalVideo","handleNetworkQualityChange","ev","includes","on","off"],"mappings":"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","sourcesContent":["/* global rtcpeers */\nimport { useCallback, useEffect, useState } from 'react';\n\nimport {\n  VIDEO_QUALITY_HIGH,\n  VIDEO_QUALITY_LOW,\n  VIDEO_QUALITY_BANDWIDTH_SAVER,\n} from '../constants';\n\nexport const NETWORK_STATE_GOOD = 'good';\nexport const NETWORK_STATE_LOW = 'low';\nexport const NETWORK_STATE_VERY_LOW = 'very-low';\nconst STANDARD_HIGH_BITRATE_CAP = 980;\nconst STANDARD_LOW_BITRATE_CAP = 300;\n\nexport const useNetworkState = (\n  callObject = null,\n  quality = VIDEO_QUALITY_HIGH\n) => {\n  const [threshold, setThreshold] = useState(NETWORK_STATE_GOOD);\n\n  const setQuality = useCallback(\n    (q) => {\n      if (!callObject || typeof rtcpeers === 'undefined') return;\n\n      const peers = Object.keys(callObject.participants()).length - 1;\n      const isSFU = rtcpeers?.currentlyPreferred?.typeName?.() === 'sfu';\n\n      const lowKbs = isSFU\n        ? STANDARD_LOW_BITRATE_CAP\n        : STANDARD_LOW_BITRATE_CAP / Math.max(1, peers);\n\n      switch (q) {\n        case VIDEO_QUALITY_HIGH:\n          callObject.setBandwidth({ kbs: STANDARD_HIGH_BITRATE_CAP });\n          break;\n        case VIDEO_QUALITY_LOW:\n          callObject.setBandwidth({\n            kbs: lowKbs,\n          });\n          break;\n        case VIDEO_QUALITY_BANDWIDTH_SAVER:\n          callObject.setLocalVideo(false);\n          callObject.setBandwidth({\n            kbs: lowKbs,\n          });\n          break;\n        default:\n          break;\n      }\n    },\n    [callObject]\n  );\n\n  const handleNetworkQualityChange = useCallback(\n    (ev) => {\n      if (ev.threshold === threshold) return;\n\n      switch (ev.threshold) {\n        case NETWORK_STATE_VERY_LOW:\n          setQuality(VIDEO_QUALITY_BANDWIDTH_SAVER);\n          setThreshold(NETWORK_STATE_VERY_LOW);\n          break;\n        case NETWORK_STATE_LOW:\n          setQuality(\n            quality === VIDEO_QUALITY_BANDWIDTH_SAVER\n              ? quality\n              : NETWORK_STATE_LOW\n          );\n          setThreshold(NETWORK_STATE_LOW);\n          break;\n        case NETWORK_STATE_GOOD:\n          setQuality(\n            [VIDEO_QUALITY_BANDWIDTH_SAVER, VIDEO_QUALITY_LOW].includes(quality)\n              ? quality\n              : VIDEO_QUALITY_HIGH\n          );\n          setThreshold(NETWORK_STATE_GOOD);\n          break;\n        default:\n          break;\n      }\n    },\n    [setQuality, threshold, quality]\n  );\n\n  useEffect(() => {\n    if (!callObject) return false;\n    callObject.on('network-quality-change', handleNetworkQualityChange);\n    return () =>\n      callObject.off('network-quality-change', handleNetworkQualityChange);\n  }, [callObject, handleNetworkQualityChange]);\n\n  useEffect(() => {\n    setQuality(quality);\n  }, [quality, setQuality]);\n\n  return threshold;\n};"]},"metadata":{},"sourceType":"module"}