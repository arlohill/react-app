{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import'./Tray.css';import TrayButton,{TYPE_MUTE_CAMERA,TYPE_MUTE_MIC,TYPE_SCREEN,TYPE_LEAVE,TYPE_CHAT}from'../TrayButton/TrayButton';import InputSelector from'../InputSelector/InputSelector';import Chat from'../Chat/Chat';import CallObjectContext from'../../../CallObjectContext';import{logDailyEvent}from'../../../logUtils';import DailyIframe from'@daily-co/daily-js';import MyContext from'../../../MyContext';import SessionStateContext from'../../../SessionStateContext';function useForceUpdate(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// integer state\nreturn function(){return setValue(function(value){return value+1;});};// update the state to force render\n}/**\n * Gets [isCameraMuted, isMicMuted, isSharingScreen].\n * This function is declared outside Tray() so it's not recreated every render\n * (which would require us to declare it as a useEffect dependency).\n */function getStreamStates(callObject){var isCameraMuted,isMicMuted,isSharingScreen=false;if(callObject&&callObject.participants()&&callObject.participants().local){var localParticipant=callObject.participants().local;isCameraMuted=!localParticipant.video;isMicMuted=!localParticipant.audio;isSharingScreen=localParticipant.screen;}return[isCameraMuted,isMicMuted,isSharingScreen];}/**\n * Props:\n * - onClickLeaveCall: () => ()\n * - disabled: boolean\n */export default function Tray(props){var callObject=useContext(CallObjectContext);var _useContext=useContext(SessionStateContext),session=_useContext.session;var _session=_slicedToArray(session,2),sessionState=_session[0],setSessionState=_session[1];var _useContext2=useContext(MyContext),myStateArray=_useContext2.myStateArray,setName=_useContext2.setName,setRole=_useContext2.setRole,setUserList=_useContext2.setUserList,setViewMode=_useContext2.setViewMode,setCamOnAtSessionStart=_useContext2.setCamOnAtSessionStart,setMicOnAtSessionStart=_useContext2.setMicOnAtSessionStart,setAmAdmin=_useContext2.setAmAdmin;var _myStateArray=_slicedToArray(myStateArray,2),myState=_myStateArray[0],setMyState=_myStateArray[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCameraMuted=_useState4[0],setCameraMuted=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isMicMuted=_useState6[0],setMicMuted=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isSharingScreen=_useState8[0],setSharingScreen=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),displayChat=_useState10[0],setChatDisplay=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),highlightedChat=_useState12[0],setChatHighlight=_useState12[1];var forceUpdate=useForceUpdate();var micCaret=React.createRef();var micSettings=React.createRef();var camCaret=React.createRef();var camSettings=React.createRef();window.updateTray=function(){forceUpdate();};var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),showMicSettings=_useState14[0],setShowMicSettings=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),showCamSettings=_useState16[0],setShowCamSettings=_useState16[1];function toggleCamera(){callObject.setLocalVideo(isCameraMuted);}function toggleMic(){callObject.setLocalAudio(isMicMuted);}function screenAlreadyShared(){var screenShareExists=false;var ps=callObject.participants();for(var p in ps){if(!!ps[p].screenVideoTrack){screenShareExists=true;};}return screenShareExists;}useEffect(function(){document.addEventListener(\"mousedown\",handleClickOutside);return function cleanup(){document.removeEventListener(\"mousedown\",handleClickOutside);};});var handleClickOutside=function handleClickOutside(event){console.log('handling click');if(micSettings.current&&!micSettings.current.contains(event.target)&&!micCaret.current.contains(event.target)){setShowMicSettings(false);}else if(camSettings.current&&!camSettings.current.contains(event.target)&&!camCaret.current.contains(event.target)){setShowCamSettings(false);}};function toggleSharingScreen(){if(!isSharingScreen&&screenAlreadyShared()){alert(\"There is already a screenshare in progress\");return;}isSharingScreen?callObject.stopScreenShare():callObject.startScreenShare();}function leaveCall(){props.onClickLeaveCall&&props.onClickLeaveCall();}function toggleChat(){setChatDisplay(!displayChat);if(highlightedChat){setChatHighlight(!highlightedChat);}}function handleNewChat(){setChatHighlight(!highlightedChat);}function openScreenShareWindow(){window.open(\"http://\"+window.location.host+\"/share\",\"test\",\"width=300, height=300\");}/**\n   * Start listening for changes on sessionState, to turn cam + mic on and off\n  //  */useEffect(function(){if(sessionState.isActive){if(!myState.role.includes('Shadow')&&!myState.role.includes('Seller')&&!myState.role.includes('Buyer')){setMicOnAtSessionStart(callObject.localAudio());//\"remember\" if cam + mic were on or off before session started\nsetCamOnAtSessionStart(callObject.localVideo());callObject.setLocalAudio(false);callObject.setLocalVideo(false);}}else if(!sessionState.isActive){!callObject.localAudio()&&callObject.setLocalAudio(myState.micOnAtSessionStart);!callObject.localVideo()&&callObject.setLocalVideo(myState.camOnAtSessionStart);setMicOnAtSessionStart(null);setCamOnAtSessionStart(null);}},[sessionState.isActive,myState.role]);/**\n   * Turn mic on and off when \n  //  */ /**\n   * Start listening for participant changes when callObject is set (i.e. when the component mounts).\n   * This event will capture any changes to your audio/video mute state.\n   */useEffect(function(){if(!callObject)return;function handleNewParticipantsState(event){event&&logDailyEvent(event);var _getStreamStates=getStreamStates(callObject),_getStreamStates2=_slicedToArray(_getStreamStates,3),isCameraMuted=_getStreamStates2[0],isMicMuted=_getStreamStates2[1],isSharingScreen=_getStreamStates2[2];setCameraMuted(isCameraMuted);setMicMuted(isMicMuted);setSharingScreen(isSharingScreen);}// Use initial state\nhandleNewParticipantsState();// Listen for changes in state\ncallObject.on('participant-updated',handleNewParticipantsState);// Stop listening for changes in state\nreturn function cleanup(){callObject.off('participant-updated',handleNewParticipantsState);};},[callObject]);return/*#__PURE__*/React.createElement(\"div\",{className:myState.amAdmin&&myState.sidebar?\"tray-with-sidebar\":\"tray\"},/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_CAMERA// disabled={props.camDisabled}\n,highlighted:isCameraMuted,onClick:toggleCamera}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowCamSettings(!showCamSettings);},style:{position:'absolute',left:'57px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:camCaret},\"^\"),showCamSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"video\",page:\"main\",ref:camSettings}):null),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_MUTE_MIC// disabled={props.micDisabled}\n,highlighted:isMicMuted,onClick:toggleMic}),/*#__PURE__*/React.createElement(\"div\",{onClick:function onClick(){setShowMicSettings(!showMicSettings);},style:{position:'absolute',left:'123px',bottom:'23px'}},/*#__PURE__*/React.createElement(\"p\",{className:\"caret\",ref:micCaret},\"^\"),showMicSettings?/*#__PURE__*/React.createElement(InputSelector,{type:\"audio\",page:\"main\",ref:micSettings}):null),DailyIframe.supportedBrowser().supportsScreenShare&&myState.amAdmin&&/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_SCREEN// disabled={props.disabled}\n,highlighted:isSharingScreen// onClick={openScreenShareWindow} //LIVESTORM PILOT CHANGE: deleted video share\n,onClick:toggleSharingScreen//LIVESTORM PILOT CHANGE: added normal screenshare\n}),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_CHAT// disabled={props.disabled}\n,highlighted:highlightedChat,onClick:toggleChat}),/*#__PURE__*/React.createElement(Chat,{onClickDisplay:displayChat,notification:handleNewChat}),/*#__PURE__*/React.createElement(\"div\",{className:\"status-display\"},/*#__PURE__*/React.createElement(\"div\",{style:{height:'30px'}},\"Roleplay:  \\xA0\",sessionState.isActive?/*#__PURE__*/React.createElement(\"div\",{className:\"display-card active\"},\"Live\"):/*#__PURE__*/React.createElement(\"div\",{className:\"display-card paused\"},\"Paused\")),/*#__PURE__*/React.createElement(\"div\",{className:\"vertical-line\"}),!sessionState.isActive||myState.role!=='Admin'&&myState.role!=='Attendee'?/*#__PURE__*/React.createElement(\"div\",{style:{height:'30px'}},\"My Role: \\xA0\",myState.role=='Admin'||myState.role=='Attendee'?/*#__PURE__*/React.createElement(\"span\",{className:\"display-card role\"},\"Viewer\"):/*#__PURE__*/React.createElement(\"span\",{className:\"display-card role\"},myState.role.match(/\\D/g).join(''))):/*#__PURE__*/React.createElement(\"div\",{className:\"my-view\"},\"My View: \\xA0\",/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"form\",{action:\"\"},/*#__PURE__*/React.createElement(\"fieldset\",{style:{border:'none'}},/*#__PURE__*/React.createElement(\"select\",{className:\"my-view-selector\",value:myState.viewMode,onChange:function onChange(e){return setViewMode(e.target.value);}},/*#__PURE__*/React.createElement(\"option\",{value:\"Seller\"},\"Seller\"),sessionState.roleOf.Shadow1&&/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow1\",selected:true},\"Shadow 1\"),sessionState.roleOf.Shadow2&&/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow2\"},\"Shadow 2\"),sessionState.roleOf.Shadow3&&/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow3\"},\"Shadow 3\"),sessionState.roleOf.Shadow4&&/*#__PURE__*/React.createElement(\"option\",{value:\"Shadow4\"},\"Shadow 4\"),sessionState.roleOf.Seller&&sessionState.roleOf.Shadow1&&/*#__PURE__*/React.createElement(\"option\",{value:\"All\"},\"All\"),sessionState.roleOf.Shadow1||sessionState.roleOf.Shadow2||sessionState.roleOf.Shadow3||sessionState.roleOf.Shadow4&&/*#__PURE__*/React.createElement(\"option\",{value:\"All\"},\"All\"))))))),/*#__PURE__*/React.createElement(TrayButton,{type:TYPE_LEAVE,disabled:props.disabled,newButtonGroup:true,highlighted:true,onClick:leaveCall}));}","map":null,"metadata":{},"sourceType":"module"}