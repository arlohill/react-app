{"ast":null,"code":"import { useEffect, useContext } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext';\n\nfunction useSetSubscriptions() {\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray // setName, \n    // setRole,\n    // setUserList,\n    // setViewMode,\n    // setCamOnAtSessionStart,\n    // setMicOnAtSessionStart,\n    // setAmAdmin, \n\n  } = useContext(MyContext);\n  const [myState, setMyState] = myStateArray;\n  useEffect(() => {\n    const myRole = myState.role;\n    let currentSubs = [];\n    let viewMode = myState.viewMode;\n\n    if (!sessionState) {\n      return;\n    } ///disable 'viewMode' unless session is active and I'm a viewer\n\n\n    if (!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n      viewMode = null;\n    }\n\n    console.log('Setting subscriptions...'); // console.log('****My role is: ' + myRole);\n    // console.log('viewMode is: ' + viewMode);\n\n    let subscribedTo = 0; //if session is active, set currentSubs according to my role\n\n    if (!viewMode && sessionState.isActive) {\n      switch (myRole) {\n        case 'Buyer1':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Buyer2':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Buyer3':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n\n          !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          break;\n\n        case 'Seller':\n          currentSubs = [];\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow1':\n        case 'Shadow2':\n        case 'Shadow3':\n        case 'Shadow4':\n          currentSubs = [];\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller + '_AUDIO');\n          break;\n\n        case 'Attendee':\n          currentSubs = [];\n          break;\n\n        default:\n          currentSubs = [];\n          break;\n      } //Add Admin to currentSubs if applicable\n\n\n      if (sessionState.AdminVisible) {\n        currentSubs.push(\"Admin\");\n      }\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(myState.name) === -1;\n      }); //don't include self\n    }\n\n    if (viewMode) {\n      switch (viewMode) {\n        case 'Seller':\n          currentSubs = [];\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow1':\n          currentSubs = [];\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow2':\n          currentSubs = [];\n          sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow3':\n          sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'Shadow4':\n          currentSubs = [];\n          sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        case 'All':\n          currentSubs = [];\n          sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n          sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n          sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n          sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n          sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n          sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n          sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n          sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n          break;\n\n        default:\n          currentSubs = [];\n          break;\n      }\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(myState.name) === -1;\n      }); //don't include self\n    }\n\n    function setTracks() {\n      return new Promise(resolve => {\n        //cycle through each participant in meeting\n        let ps = callObject.participants(); // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n\n        Object.keys(ps).forEach(p => {\n          let participant = ps[p];\n          let thisUserName = participant.user_name;\n\n          if (p === 'local' || thisUserName == myState.name) {\n            return;\n          } //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n\n\n          if (!sessionState.isKnown) {\n            callObject.updateParticipant(participant.session_id, {\n              setSubscribedTracks: false\n            });\n            return;\n          } // console.log(\"This username is: \" +thisUserName);\n          //If NOT ACTIVE, subscribe to everyone in the meeting\n\n\n          if (!sessionState.isActive) {\n            if (thisUserName == 'InvisibleScreenShareWidget') {\n              console.log('Not subscribing to: ' + thisUserName);\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: {\n                  audio: false,\n                  video: false,\n                  screenVideo: true,\n                  screenAudio: true\n                }\n              });\n            } else {\n              console.log('Subscribing to: ' + thisUserName);\n              currentSubs.push(thisUserName); // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n              //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n              // }\n\n              callObject.updateParticipant(participant.session_id, {\n                setSubscribedTracks: true\n              });\n              subscribedTo++;\n            } // }\n\n          } //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n          else if (sessionState.isActive || viewMode) {\n              if (currentSubs.includes(thisUserName + '_AUDIO')) {\n                console.log('Subscribing to audio only for: ' + thisUserName);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: {\n                    audio: true,\n                    video: false,\n                    screenVideo: false\n                  }\n                });\n              } else if (currentSubs.includes(thisUserName)) {\n                console.log('Subscribing to: ' + thisUserName);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: true\n                });\n                subscribedTo++;\n              } else if (!currentSubs.includes(thisUserName)) {\n                console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n                callObject.updateParticipant(participant.session_id, {\n                  setSubscribedTracks: false\n                });\n              }\n            }\n        });\n        resolve();\n      });\n    }\n\n    setTracks().then(() => {\n      //remove screenshare widget from currentSubs array to not count it\n      const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n\n      if (index > -1) {\n        currentSubs.splice(index, 1);\n      } //print subscriptions\n\n\n      currentSubs.filter(function (str) {\n        return str.indexOf(window.myName) === -1;\n      }); //don't include self\n\n      var iterator = currentSubs.values();\n      console.log(\"Currently subscribed to:\");\n\n      for (let elements of iterator) {\n        console.log(elements);\n      }\n\n      if (currentSubs.length < 1) {\n        console.log(\"No one.\");\n      } ///*** for debugging purposes\n\n\n      window.viewMode = viewMode;\n      window.currentSubs = currentSubs;\n    });\n  }, [sessionState, myState]);\n}\n\n;\nexport default useSetSubscriptions;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/hooks/setSubscriptions.js"],"names":["useEffect","useContext","SessionStateContext","MyContext","CallObjectContext","useSetSubscriptions","callObject","session","sessionState","setSessionState","myStateArray","myState","setMyState","myRole","role","currentSubs","viewMode","isActive","includes","console","log","subscribedTo","roleOf","Shadow1","push","Seller","Buyer2","Buyer3","Buyer1","AdminVisible","filter","str","indexOf","name","Shadow2","Shadow3","Shadow4","setTracks","Promise","resolve","ps","participants","Object","keys","forEach","p","participant","thisUserName","user_name","isKnown","updateParticipant","session_id","setSubscribedTracks","audio","video","screenVideo","screenAudio","then","index","splice","window","myName","iterator","values","elements","length"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext'\n\n\nfunction useSetSubscriptions() {\n\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;    \n    const { myStateArray, \n        // setName, \n        // setRole,\n        // setUserList,\n        // setViewMode,\n        // setCamOnAtSessionStart,\n        // setMicOnAtSessionStart,\n        // setAmAdmin, \n      } = useContext(MyContext);\n    const [ myState,setMyState ] = myStateArray;\n\n\n    useEffect(()=> {\n\n        const myRole = myState.role;\n        let currentSubs = [];\n        let viewMode = myState.viewMode;\n    \n        if (!sessionState) {return;}\n    \n        ///disable 'viewMode' unless session is active and I'm a viewer\n        if(!sessionState.isActive || myRole.includes('Seller') || myRole.includes('Buyer') || myRole.includes('Shadow')) {\n            viewMode = null;\n        }\n    \n    \n        console.log('Setting subscriptions...');\n        // console.log('****My role is: ' + myRole);\n        // console.log('viewMode is: ' + viewMode);\n        let subscribedTo=0;\n    \n        \n        //if session is active, set currentSubs according to my role\n            if (!viewMode && sessionState.isActive) {\n                switch (myRole) {\n                    case 'Buyer1':\n                        currentSubs=[];\n                        sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                        !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                        sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                        sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                        break;\n                    case 'Buyer2':\n                        currentSubs=[];\n                        sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                        !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                        sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                        sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                        break;\n                    case 'Buyer3':\n                        currentSubs=[];\n                        sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1); // see shadow1 if there is a shadow1\n                        !sessionState.roleOf.Shadow1 && sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller); //otherwise, see the original seller\n                        sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                        sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                        break;\n                    case 'Seller':\n                        currentSubs=[];\n                        sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                        sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                        sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                        break;\n                    case 'Shadow1':\n                    case 'Shadow2':\n                    case 'Shadow3':\n                    case 'Shadow4':\n                        currentSubs=[];\n                        sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                        sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                        sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                        sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller+'_AUDIO');\n                        break;\n                    case 'Attendee':\n                        currentSubs=[];\n                        break;\n                    default:\n                        currentSubs=[];\n                        break;\n                }\n                //Add Admin to currentSubs if applicable\n                if (sessionState.AdminVisible) {\n                currentSubs.push (\"Admin\");\n            }\n    \n            currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n    \n        }\n    \n        if(viewMode) {\n    \n            switch (viewMode) {\n                case 'Seller':\n                    currentSubs=[];\n                    sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Shadow1':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Shadow2':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Shadow3':\n                    sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'Shadow4':\n                    currentSubs=[];\n                    sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                case 'All':\n                    currentSubs=[];\n                    sessionState.roleOf.Seller && currentSubs.push(sessionState.roleOf.Seller);\n                    sessionState.roleOf.Shadow1 && currentSubs.push(sessionState.roleOf.Shadow1);\n                    sessionState.roleOf.Shadow2 && currentSubs.push(sessionState.roleOf.Shadow2);\n                    sessionState.roleOf.Shadow3 && currentSubs.push(sessionState.roleOf.Shadow3);\n                    sessionState.roleOf.Shadow4 && currentSubs.push(sessionState.roleOf.Shadow4);\n                    sessionState.roleOf.Buyer1 && currentSubs.push(sessionState.roleOf.Buyer1);\n                    sessionState.roleOf.Buyer2 && currentSubs.push(sessionState.roleOf.Buyer2);\n                    sessionState.roleOf.Buyer3 && currentSubs.push(sessionState.roleOf.Buyer3);\n                    break;\n                default:\n                    currentSubs=[];\n                    break;\n            }\n    \n            currentSubs.filter(function (str) {return str.indexOf(myState.name) === -1}) //don't include self\n        }\n    \n        \n        function setTracks() {\n    \n            return new Promise( (resolve) => {\n    \n                //cycle through each participant in meeting\n                let ps = callObject.participants();\n                // console.log('The second participant is named: ' + Object.values(ps)[1].user_name);\n                Object.keys(ps).forEach((p) => {\n                    let participant = ps[p];\n                    let thisUserName = participant.user_name;\n    \n                    if (p === 'local' || thisUserName==myState.name) {\n                        return;\n                    } \n        \n    \n                    //if SESSION STATE NOT KNOWN, don't subscribe to anyone yet\n                    if (!sessionState.isKnown) {\n                        callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                        return;\n                    }\n    \n    \n    \n                    // console.log(\"This username is: \" +thisUserName);\n    \n                    //If NOT ACTIVE, subscribe to everyone in the meeting\n                    if (!sessionState.isActive) {\n    \n                            if (thisUserName=='InvisibleScreenShareWidget') {\n                                console.log('Not subscribing to: ' + thisUserName);\n                                callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: false, video: false, screenVideo: true, screenAudio: true}});\n    \n                            \n                            } else {\n                                console.log('Subscribing to: ' + thisUserName);\n                                currentSubs.push(thisUserName);\n                                // if (!callObject.participants()[participant.session_id].tracks.video.subscribed){ \n                                //     callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});  \n                                // }\n                                callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                                subscribedTo++;\n                                }    \n    \n                        // }\n    \n    \n    \n                    } \n    \n                    //IF ACTIVE (or selecting viewmode), just subscribe to those listed in currentSubs;\n                    else if (sessionState.isActive || viewMode) {\n                        if(currentSubs.includes(thisUserName+'_AUDIO')) {\n                            console.log('Subscribing to audio only for: ' + thisUserName);\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : { audio: true, video: false, screenVideo: false}});\n                        }\n                        else if(currentSubs.includes(thisUserName)) {\n                            console.log('Subscribing to: ' + thisUserName);\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : true});\n                            subscribedTo++;\n                        }\n                        else if (!currentSubs.includes(thisUserName)) {\n                            console.log('NOT subscribing to: ' + thisUserName + ', sessionID: ' + participant.session_id);\n                            callObject.updateParticipant(participant.session_id,{ setSubscribedTracks : false});\n                        }\n                    }\n                });\n                resolve();\n            })\n        }\n        \n        setTracks().then(()=>{\n            \n            //remove screenshare widget from currentSubs array to not count it\n            const index = currentSubs.indexOf('InvisibleScreenShareWidget');\n            if (index > -1) {\n              currentSubs.splice(index, 1);\n            }\n    \n        //print subscriptions\n        currentSubs.filter(function (str) {return str.indexOf(window.myName) === -1}) //don't include self\n    \n        var iterator = currentSubs.values();\n        console.log(\"Currently subscribed to:\");\n        for (let elements of iterator) { \n            console.log(elements); \n        } \n        if (currentSubs.length < 1) {\n            console.log (\"No one.\")\n        }\n    \n        ///*** for debugging purposes\n        window.viewMode = viewMode;\n        window.currentSubs = currentSubs;\n    \n    \n        })\n\n    },[sessionState,myState]);\n    \n\n   \n};\n\nexport default useSetSubscriptions;\n\n"]},"metadata":{},"sourceType":"module"}