{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Livestorm/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../../CallObjectContext';\nimport MyContext from '../../../MyContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../../logUtils';\nimport useSetSubscriptions from '../../../hooks/setSubscriptions';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  useSetSubscriptions();\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n  const {\n    myStateArray,\n    setName,\n    setRole,\n    setUserList,\n    setViewMode,\n    setCamOnAtSessionStart,\n    setMicOnAtSessionStart,\n    setAdminPresent,\n    setAmAdmin,\n    setNumber\n  } = useContext(MyContext);\n  const [myState, setMyState] = myStateArray;\n\n  window.updateCall = () => {\n    forceUpdate();\n  };\n  /**\n    * Set default viewmode and turn cam on/off when session begins or my role changes\n    */\n\n\n  useEffect(() => {\n    if (sessionState.isActive) {\n      switch (myState.role) {\n        case 'Attendee':\n        case 'Admin':\n          //reset to default viewMode\n          if (sessionState.roleOf.Shadow1) {\n            setViewMode('Shadow1');\n          } else if (sessionState.roleOf.Shadow2) //fallbacks in case shadow1 is not assigned\n            {\n              setViewMode('Shadow2');\n            } else if (sessionState.roleOf.Shadow3) {\n            setViewMode('Shadow3');\n          } else if (sessionState.roleOf.Shadow4) {\n            setViewMode('Shadow4');\n          } else {\n            setViewMode('Seller');\n          } //when session starts up, \"remember\" if cam + mic were on or off\n\n\n          if (myState.camOnAtSessionStart && myState.camOnAtSessionStart === null) {\n            setMicOnAtSessionStart(callObject.localAudio());\n            setCamOnAtSessionStart(callObject.localVideo());\n          } //and turn off cam and mic \n\n\n          callObject.setLocalAudio(false);\n          callObject.setLocalVideo(false);\n          break;\n\n        case 'Seller':\n        case 'Buyer1':\n        case 'Buyer2':\n        case 'Buyer3':\n        case 'Buyer4':\n        case 'Shadow1':\n        case 'Shadow2':\n        case 'Shadow3':\n        case 'Shadow4':\n          //when session starts, \"remember\" if cam + mic were on or off\n          if (myState.camOnAtSessionStart === null) {\n            setMicOnAtSessionStart(callObject.localAudio());\n            setCamOnAtSessionStart(callObject.localVideo());\n          } //turn on cam and mic\n\n\n          callObject.setLocalAudio(true);\n          callObject.setLocalVideo(true);\n      }\n    } else if (!sessionState.isActive) {\n      !callObject.localAudio() && callObject.setLocalAudio(myState.micOnAtSessionStart);\n      !callObject.localVideo() && callObject.setLocalVideo(myState.camOnAtSessionStart);\n      setMicOnAtSessionStart(null);\n      setCamOnAtSessionStart(null);\n    }\n  }, [sessionState.isActive, myState.role]);\n  /**\n  * Update my role according to sessionState changes\n  */\n\n  useEffect(() => {\n    let myNewRole = 'Attendee'; //default, if no role assigned\n\n    for (const key in sessionState.roleOf) {\n      if (sessionState.roleOf[key] == myState.name) {\n        myNewRole = key;\n      }\n    }\n\n    if (myNewRole !== myState.role) {\n      setRole(myNewRole);\n\n      if (myNewRole.includes('1')) {\n        setNumber(1);\n      } else if (myNewRole.includes('2')) {\n        setNumber(2);\n      }\n    }\n  }, [sessionState.roleOf]);\n  const getUserList = useCallback(() => {\n    return new Promise(resolve => {\n      console.log('*****UPDATING PARTICIPANT LIST******');\n      let userListIncludesAdmin = false; //default\n\n      let ps = callObject.participants();\n      let workingUserList = {\n        names: [myState.name],\n        sessionIdFor: {}\n      };\n\n      for (const p in ps) {\n        if (p !== 'local') {\n          let thisUserName = ps[p].user_name;\n          let thisSessionId = ps[p].session_id;\n\n          if (thisUserName.replace('_Admin', '') === ps['local'].user_name.replace('_Admin', '') && ps[p].joined_at < ps['local'].joined_at) {\n            console.log('****ALREADY THIS USERNAME****');\n            let newName = thisUserName.replace('_Admin', '') + '1';\n\n            if (myState.amAdmin) {\n              newName += '_Admin';\n            }\n\n            ;\n            callObject.setUserName(newName);\n            setName(newName);\n            workingUserList.names.push(newName);\n          } else {\n            //if it isn't a duplicate of my (previous) name which has already been added\n            workingUserList.names.push(thisUserName); //add each user_name with its sessionID to UserList\n\n            console.log('***ADDING: ' + thisUserName);\n          }\n\n          workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n\n          if (thisUserName.includes('_Admin')) {\n            userListIncludesAdmin = true;\n          }\n        }\n\n        ;\n      }\n\n      ;\n      userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n      workingUserList.names.sort(); //alphebetize that list \n\n      console.log(`here's the userList: ${workingUserList.names}`);\n      resolve([workingUserList, userListIncludesAdmin]);\n    });\n  }, [callObject.myState]);\n  const checkIfAdminPresent = useCallback(() => {\n    return new Promise(resolve => {\n      let adminAlreadyPresent = false;\n      let ps = callObject.participants();\n      const lookForMoreParticipants = setInterval(() => {\n        //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n        if (Object.keys(ps).length > 1 || Object.keys(ps).length <= 1 && ps.local.user_name == myState.name) {\n          clearInterval(lookForMoreParticipants);\n\n          for (const p in ps) {\n            let thisUserName = ps[p].user_name;\n\n            if (thisUserName.includes('_Admin') && p !== 'local') {\n              adminAlreadyPresent = true;\n            }\n\n            console.log(`Participant present: ${thisUserName}`);\n          }\n\n          resolve(adminAlreadyPresent);\n        } else {\n          return;\n        }\n      }, 500);\n    });\n  }, [callObject.myState]);\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-updated', 'participant-left', 'joined-meeting'];\n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      });\n\n      if (e && e.action != 'participant-updated') {\n        if (e.action == \"participant-joined\" || e.action == \"participant-left\") {\n          window.event = e;\n          setTimeout(update, 50); //wait is necessary to avoid 'dummy' userName\n\n          function update() {\n            getUserList().then(([workingUserList, userListIncludesAdmin]) => {\n              setUserList(workingUserList);\n              setAdminPresent(userListIncludesAdmin);\n            });\n          }\n        } else if (e.action == 'joined-meeting') {\n          console.log('*****I JOINED THE MEETING');\n\n          if (myState.name === 'Arlo_Admin') {\n            callObject.startRecording();\n            console.log('***STARTING TO RECORD***');\n          }\n\n          getUserList().then(([workingUserList, userListIncludesAdmin]) => {\n            setUserList(workingUserList);\n\n            if (myState.amAdmin && !userListIncludesAdmin) {\n              checkIfAdminPresent().then(adminAlreadyPresent => {\n                setSessionState(prev => ({ ...prev,\n                  isKnown: adminAlreadyPresent ? false : true //if an admin is already present, make joining admin request a state update\n\n                }));\n              });\n            }\n          });\n        }\n      }\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []); ///todo: fix this\n  // const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n  //   useEffect(()=>{\n  // window.numberOfSubs =numberOfSubs;\n  // console.log('*****NUMBER OF SUBS:'+numberOfSubs);\n  //   },[numberOfSubs])\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isAudioOnly = () => {\n        if (!callItem.audioTrackState || !callItem.videoTrackState) {\n          return;\n        }\n\n        return callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed;\n      };\n\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && window.numberOfSubs && window.numberOfSubs > 1 && !containsScreenShare(callState.callItems); //videoTrackState()\n\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isAudioOnly: isAudioOnly(),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id),\n        isScreenShare: isScreenShare(id) // onClick={\n        //   isLocal(id)\n        //     ? null\n        //     : () => {\n        //         sendHello(id);\n        //       }\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: myState.amAdmin ? \"call-with-sidebar\" : \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${containsScreenShare(callState.callItems) && '1' || window.numberOfSubs && window.numberOfSubs + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Livestorm/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","useState","Tile","CallObjectContext","MyContext","SessionStateContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","useSetSubscriptions","useForceUpdate","value","setValue","Call","callObject","session","sessionState","setSessionState","callState","dispatch","forceUpdate","myStateArray","setName","setRole","setUserList","setViewMode","setCamOnAtSessionStart","setMicOnAtSessionStart","setAdminPresent","setAmAdmin","setNumber","myState","setMyState","window","updateCall","isActive","role","roleOf","Shadow1","Shadow2","Shadow3","Shadow4","camOnAtSessionStart","localAudio","localVideo","setLocalAudio","setLocalVideo","micOnAtSessionStart","myNewRole","key","name","includes","getUserList","Promise","resolve","console","log","userListIncludesAdmin","ps","participants","workingUserList","names","sessionIdFor","p","thisUserName","user_name","thisSessionId","session_id","replace","joined_at","newName","amAdmin","setUserName","push","sort","checkIfAdminPresent","adminAlreadyPresent","lookForMoreParticipants","setInterval","Object","keys","length","local","clearInterval","events","handleNewParticipantsState","e","type","action","event","setTimeout","update","then","startRecording","prev","isKnown","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","t","clearTimeout","getTiles","largeTiles","smallTiles","entries","callItems","forEach","id","callItem","isAudioOnly","audioTrackState","videoTrackState","subscribed","isLarge","numberOfSubs","tile","smallTales","add","n","i","addFakeParticipant","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback, useState } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../../CallObjectContext';\nimport MyContext from '../../../MyContext';\nimport SessionStateContext from '../../../SessionStateContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../../logUtils';\nimport useSetSubscriptions from '../../../hooks/setSubscriptions';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  useSetSubscriptions();\n\n  const callObject = useContext(CallObjectContext);\n  const { session } = useContext(SessionStateContext);\n  const [ sessionState,setSessionState] = session;\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n  const { myStateArray, \n          setName, \n          setRole,\n          setUserList,\n          setViewMode,\n          setCamOnAtSessionStart,\n          setMicOnAtSessionStart,\n          setAdminPresent,\n          setAmAdmin, \n          setNumber,\n        } = useContext(MyContext);\n  const [ myState,setMyState ] = myStateArray;\n\n\n\n  window.updateCall = () => {\n    forceUpdate();\n  }\n\n\n\n /**\n   * Set default viewmode and turn cam on/off when session begins or my role changes\n   */\n  useEffect(()=> {\n\n\n    if (sessionState.isActive) {\n\n        switch (myState.role) {\n          case 'Attendee':\n          case 'Admin':\n              //reset to default viewMode\n              if (sessionState.roleOf.Shadow1)\n              {setViewMode('Shadow1');}\n              else if (sessionState.roleOf.Shadow2)    //fallbacks in case shadow1 is not assigned\n                {setViewMode('Shadow2');}\n              else if (sessionState.roleOf.Shadow3)\n                {setViewMode('Shadow3');}\n              else if (sessionState.roleOf.Shadow4)\n                {setViewMode('Shadow4');}\n              else\n                {setViewMode('Seller');}\n              \n              //when session starts up, \"remember\" if cam + mic were on or off\n              if(myState.camOnAtSessionStart && myState.camOnAtSessionStart===null) {\n                setMicOnAtSessionStart(callObject.localAudio());\n                setCamOnAtSessionStart(callObject.localVideo());\n              }\n              //and turn off cam and mic \n              callObject.setLocalAudio(false);\n              callObject.setLocalVideo(false);\n              break;\n          case 'Seller':\n          case 'Buyer1':\n          case 'Buyer2':\n          case 'Buyer3':\n          case 'Buyer4' :\n          case 'Shadow1':\n          case 'Shadow2':\n          case 'Shadow3':\n          case 'Shadow4':\n            //when session starts, \"remember\" if cam + mic were on or off\n            if(myState.camOnAtSessionStart===null) {\n              setMicOnAtSessionStart(callObject.localAudio());\n              setCamOnAtSessionStart(callObject.localVideo());\n            }\n            //turn on cam and mic\n            callObject.setLocalAudio(true);\n            callObject.setLocalVideo(true);\n        }\n    }\n\n    else if (!sessionState.isActive) {\n      !callObject.localAudio() && callObject.setLocalAudio(myState.micOnAtSessionStart);\n      !callObject.localVideo() && callObject.setLocalVideo(myState.camOnAtSessionStart);\n      setMicOnAtSessionStart(null);\n      setCamOnAtSessionStart(null);\n    }\n\n  },[sessionState.isActive,myState.role]);\n\n\n   /**\n   * Update my role according to sessionState changes\n   */\n   useEffect(()=> {\n    let myNewRole = 'Attendee'; //default, if no role assigned\n    for (const key in sessionState.roleOf) {\n        if(sessionState.roleOf[key]==myState.name) {\n            myNewRole = key;\n        }\n    }\n    if (myNewRole!==myState.role) {\n        setRole(myNewRole);\n          if (myNewRole.includes('1')) {\n              setNumber(1);\n          } else if (myNewRole.includes('2')) {\n              setNumber(2);\n          }\n      }\n   },[sessionState.roleOf])\n      \n\n   const getUserList = useCallback(()=>{\n\n      return new Promise((resolve)=>{\n  \n          console.log('*****UPDATING PARTICIPANT LIST******');\n          let userListIncludesAdmin=false;   //default\n          let ps=callObject.participants(); \n          let workingUserList = {\n              names: [myState.name],\n              sessionIdFor: {},\n          }\n      \n          for (const p in ps) {\n              if (p!=='local') {\n                  let thisUserName = ps[p].user_name;\n                  let thisSessionId = ps[p].session_id;\n                  if (thisUserName.replace('_Admin','')===ps['local'].user_name.replace('_Admin','')\n                      && ps[p].joined_at < ps['local'].joined_at\n                    ) {\n                      console.log('****ALREADY THIS USERNAME****');\n                      let newName = thisUserName.replace('_Admin','') + '1';\n                      if (myState.amAdmin) {newName += '_Admin'};\n                      callObject.setUserName(newName);\n                      setName(newName);\n                      workingUserList.names.push(newName);\n                  }\n                  else {   //if it isn't a duplicate of my (previous) name which has already been added\n                    workingUserList.names.push(thisUserName); //add each user_name with its sessionID to UserList\n                    console.log('***ADDING: ' + thisUserName);\n                  }      \n                  workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n                  \n                  if (thisUserName.includes('_Admin')) {\n                      userListIncludesAdmin = true;\n                  } \n              };\n          };\n      \n          userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n          workingUserList.names.sort();       //alphebetize that list \n          console.log(`here's the userList: ${workingUserList.names}`);\n          resolve([workingUserList,userListIncludesAdmin]);\n      });\n\n   },[callObject.myState]);\n\n\nconst checkIfAdminPresent = useCallback(()=> {\n\n    return new Promise((resolve) => {\n      let adminAlreadyPresent = false;\n      let ps=callObject.participants();\n      const lookForMoreParticipants = setInterval (()=>{  //This interval should be redundant, but checking to make sure a dummy user doesn't pop up first\n        if  (Object.keys(ps).length > 1\n              || (Object.keys(ps).length <= 1 && ps.local.user_name == myState.name)  \n        ) {\n              clearInterval(lookForMoreParticipants);\n              for (const p in ps) {\n                let thisUserName = ps[p].user_name;\n                if (thisUserName.includes('_Admin') && p!=='local') {\n                  adminAlreadyPresent = true;\n                }\n                console.log(`Participant present: ${thisUserName}`);\n              }\n              resolve (adminAlreadyPresent);\n        } else {return;}\n      },500)\n    })\n  },[callObject.myState]);\n\n  \n\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n      'joined-meeting',\n    ];\n\n   \n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n\n      if(e && e.action!='participant-updated') {\n          \n          if (e.action==\"participant-joined\" || e.action==\"participant-left\") {\n            window.event=e;\n            \n            setTimeout(update,50);  //wait is necessary to avoid 'dummy' userName\n\n            function update() {\n              getUserList()\n              .then(([workingUserList,userListIncludesAdmin])=>{\n                  setUserList(workingUserList);\n                  setAdminPresent(userListIncludesAdmin);\n                });\n            }\n           \n\n          } else if(e.action=='joined-meeting') {\n            console.log('*****I JOINED THE MEETING');\n            if (myState.name==='Arlo_Admin') {\n              callObject.startRecording();\n              console.log('***STARTING TO RECORD***')\n            }\n            getUserList()\n                .then(([workingUserList,userListIncludesAdmin])=>{\n                  setUserList(workingUserList);\n                  if(myState.amAdmin && !userListIncludesAdmin) {\n                    checkIfAdminPresent().then((adminAlreadyPresent)=>{\n                      setSessionState((prev)=>({\n                        ...prev,\n                        isKnown: adminAlreadyPresent ? false : true,   //if an admin is already present, make joining admin request a state update\n                      }));\n                    })\n                  }\n\n              });\n          }        \n      } \n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n\n \n\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n\n  \n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  ///todo: fix this\n  // const numberOfSubs = window.currentSubs && window.currentSubs.filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf('_AUDIO') === -1}).filter(function (str) {return str.indexOf(window.myName) === -1}).length //number of subs, not counting audio-only or my name\n\n\n//   useEffect(()=>{\n// window.numberOfSubs =numberOfSubs;\n// console.log('*****NUMBER OF SUBS:'+numberOfSubs);\n//   },[numberOfSubs])\n\n\n\n \n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n\n\n      const isAudioOnly = () => {\n        if(!callItem.audioTrackState || !callItem.videoTrackState) {return}\n        return (callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed);\n      }\n\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems)) \n        || (isLocal(id) && window.numberOfSubs && window.numberOfSubs>1 && !containsScreenShare(callState.callItems))   //videoTrackState()\n\n        \n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isAudioOnly={isAudioOnly()}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          isScreenShare={isScreenShare(id)}\n          // onClick={\n          //   isLocal(id)\n          //     ? null\n          //     : () => {\n          //         sendHello(id);\n          //       }\n          // }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    // console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n    \n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className={myState.amAdmin ? \"call-with-sidebar\" : \"call\"}>\n                                      {/* add # of tiles to class name. alternative: {largeTiles.length}*/}\n      <div className={`large-tiles count-${(containsScreenShare(callState.callItems)&&'1')||window.numberOfSubs && window.numberOfSubs+1}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}