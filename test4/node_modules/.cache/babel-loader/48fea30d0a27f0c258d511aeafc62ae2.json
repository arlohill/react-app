{"ast":null,"code":"import React from 'react';\nimport deepEqual from 'dequal';\n\nfunction checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\n\nfunction useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport { useDeepCompareCallback, useDeepCompareEffect, useDeepCompareMemo };","map":{"version":3,"sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"names":[],"mappings":";;;AAEO,SAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B;AACpC,QAAM,aAAa,GAAI,SAAQ,IAAI,CAAC,OAAL,CAAa,aAAb,EAA4B,EAA5B,CAAgC,EAA/D;;AAEA,MAAI,CAAC,IAAD,IAAS,IAAI,CAAC,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAW,GAAE,IAAK,iDAAgD,aAAc,WAAhF,CAAN;AACD;AACF;;AACM,SAAS,qBAAT,CAA+B,KAA/B,EAAsC;AAC3C,QAAM,GAAG,GAAG,KAAK,CAAC,MAAN,CAAa,EAAb,CAAZ;;AAEA,MAAI,CAAC,SAAS,CAAC,KAAD,EAAQ,GAAG,CAAC,OAAZ,CAAd,EAAoC;AAClC,IAAA,GAAG,CAAC,OAAJ,GAAc,KAAd;AACD;;AAED,SAAO,GAAG,CAAC,OAAX;;AACD;;;;;;;;;;ACND,SAAS,sBAAT,CAAgC,QAAhC,EAA0C,YAA1C,EAAwD;AACtD,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,IAAA,SAAS,CAAC,YAAD,EAAe,wBAAf,CAAT;AACD;;AAED,SAAO,KAAK,CAAC,WAAN,CAAkB,QAAlB,EAA4B,qBAAqB,CAAC,YAAD,CAAjD,CAAP;AACD;ACfD;;;;;;;;;;;;;;AAaA,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,YAAtC,EAAoD;AAClD,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,IAAA,SAAS,CAAC,YAAD,EAAe,sBAAf,CAAT;AACD;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,EAAwB,qBAAqB,CAAC,YAAD,CAA7C;AACD;ACnBD;;;;;;;;;;AASA,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,YAArC,EAAmD;AACjD,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,IAAA,SAAS,CAAC,YAAD,EAAe,oBAAf,CAAT;AACD;;AAED,SAAO,KAAK,CAAC,OAAN,CAAc,OAAd,EAAuB,qBAAqB,CAAC,YAAD,CAA5C,CAAP;AACD","sourcesContent":["import React from \"react\";\nimport deepEqual from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"]},"metadata":{},"sourceType":"module"}