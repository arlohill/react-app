{"ast":null,"code":"export default function audioPlayer(trackName, command) {\n  const trackList = {\n    monologue1: 'https://storage.googleapis.com/secondbodyuploads/What%20Makes%20CEB%20Different%20(Mono).mp3',\n    monologue2: 'https://storage.googleapis.com/secondbodyuploads/PAGA%20Claims%20(mono).mp3',\n    monologue3: 'https://storage.googleapis.com/secondbodyuploads/AudioEngineer.mp3',\n    monologue4: 'https://storage.googleapis.com/secondbodyuploads/IBM%20Garage.mp3',\n    monologue5: 'https://storage.googleapis.com/secondbodyuploads/Livestorm1.m4a',\n    monologue6: '',\n    dialogue1: 'https://storage.googleapis.com/secondbodyuploads/EthicsA%20(dialogue).mp3',\n    dialogue1B: 'https://storage.googleapis.com/secondbodyuploads/EthicsB%20(dialogue).mp3',\n    dialogue2: 'https://storage.googleapis.com/secondbodyuploads/CoursePass(A)%20(dialogue).mp3',\n    dialogue2B: 'https://storage.googleapis.com/secondbodyuploads/CoursePass(B)%20(dialogue).mp3',\n    dialogue3: '',\n    dialogue3B: '',\n    dialogue4: '',\n    dialogue4B: '',\n    dialogue5: '',\n    dialogue5B: '',\n    dialogue6: '',\n    dialogue6B: ''\n  };\n  window.audio.src = trackList[trackName];\n  console.log(`going to ${command} ${trackName}`);\n  window.audio[command](); //TODO AUDIO TEST BELOW\n  //TODO: PUT BACK IN*********\n\n  if (command == 'pause') {\n    window.audioSourceNode.disconnect();\n    return;\n  } //create Audio Context and destination\n\n\n  if (typeof window.audioCtx == 'undefined') {\n    window.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  } // let src=document.getElementById('MediaPlayer');\n\n\n  window.audioSourceNode = window.audioSourceNode || window.audioCtx.createMediaElementSource(window.audio); //gain Node\n\n  let gainNode = window.audioCtx.createGain();\n  gainNode.gain.value = 1; //panner Node\n\n  var panNode = window.audioCtx.createStereoPanner();\n  panNode.pan.value = 1; //Pipe source through nodes to destination\n\n  window.audioSourceNode.connect(gainNode).connect(panNode).connect(window.audioCtx.destination); //END TODO*******\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/hooks/AudioPlayer.js"],"names":["audioPlayer","trackName","command","trackList","monologue1","monologue2","monologue3","monologue4","monologue5","monologue6","dialogue1","dialogue1B","dialogue2","dialogue2B","dialogue3","dialogue3B","dialogue4","dialogue4B","dialogue5","dialogue5B","dialogue6","dialogue6B","window","audio","src","console","log","audioSourceNode","disconnect","audioCtx","AudioContext","webkitAudioContext","createMediaElementSource","gainNode","createGain","gain","value","panNode","createStereoPanner","pan","connect","destination"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,SAArB,EAA+BC,OAA/B,EAAwC;AACnD,QAAMC,SAAS,GAAG;AACdC,IAAAA,UAAU,EAAE,8FADE;AAEdC,IAAAA,UAAU,EAAE,6EAFE;AAGdC,IAAAA,UAAU,EAAE,oEAHE;AAIdC,IAAAA,UAAU,EAAE,mEAJE;AAKdC,IAAAA,UAAU,EAAE,iEALE;AAMdC,IAAAA,UAAU,EAAE,EANE;AAQdC,IAAAA,SAAS,EAAE,2EARG;AASdC,IAAAA,UAAU,EAAE,2EATE;AAUdC,IAAAA,SAAS,EAAE,iFAVG;AAWdC,IAAAA,UAAU,EAAE,iFAXE;AAYdC,IAAAA,SAAS,EAAE,EAZG;AAadC,IAAAA,UAAU,EAAE,EAbE;AAcdC,IAAAA,SAAS,EAAE,EAdG;AAedC,IAAAA,UAAU,EAAE,EAfE;AAgBdC,IAAAA,SAAS,EAAE,EAhBG;AAiBdC,IAAAA,UAAU,EAAE,EAjBE;AAkBdC,IAAAA,SAAS,EAAE,EAlBG;AAmBdC,IAAAA,UAAU,EAAE;AAnBE,GAAlB;AAqBAC,EAAAA,MAAM,CAACC,KAAP,CAAaC,GAAb,GAAmBrB,SAAS,CAACF,SAAD,CAA5B;AACAwB,EAAAA,OAAO,CAACC,GAAR,CAAc,YAAWxB,OAAQ,IAAGD,SAAU,EAA9C;AACAqB,EAAAA,MAAM,CAACC,KAAP,CAAarB,OAAb,IAxBmD,CA0BpD;AAGC;;AAEA,MAAGA,OAAO,IAAE,OAAZ,EAAqB;AACjBoB,IAAAA,MAAM,CAACK,eAAP,CAAuBC,UAAvB;AACA;AACH,GAlCkD,CAoCnD;;;AACA,MAAI,OAAON,MAAM,CAACO,QAAd,IAAyB,WAA7B,EAA0C;AAACP,IAAAA,MAAM,CAACO,QAAP,GAAkB,KAAKP,MAAM,CAACQ,YAAP,IAAuBR,MAAM,CAACS,kBAAnC,GAAlB;AAA4E,GArCpE,CAsCnD;;;AACAT,EAAAA,MAAM,CAACK,eAAP,GAAyBL,MAAM,CAACK,eAAP,IAA0BL,MAAM,CAACO,QAAP,CAAgBG,wBAAhB,CAAyCV,MAAM,CAACC,KAAhD,CAAnD,CAvCmD,CAyCnD;;AACA,MAAIU,QAAQ,GAAGX,MAAM,CAACO,QAAP,CAAgBK,UAAhB,EAAf;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAcC,KAAd,GAAoB,CAApB,CA3CmD,CA4CnD;;AACA,MAAIC,OAAO,GAAGf,MAAM,CAACO,QAAP,CAAgBS,kBAAhB,EAAd;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAYH,KAAZ,GAAkB,CAAlB,CA9CmD,CAgDnD;;AACAd,EAAAA,MAAM,CAACK,eAAP,CAAuBa,OAAvB,CAA+BP,QAA/B,EAAyCO,OAAzC,CAAiDH,OAAjD,EAA0DG,OAA1D,CAAkElB,MAAM,CAACO,QAAP,CAAgBY,WAAlF,EAjDmD,CAoDnD;AAIH","sourcesContent":["export default function audioPlayer(trackName,command) {\n    const trackList = {\n        monologue1: 'https://storage.googleapis.com/secondbodyuploads/What%20Makes%20CEB%20Different%20(Mono).mp3',\n        monologue2: 'https://storage.googleapis.com/secondbodyuploads/PAGA%20Claims%20(mono).mp3',\n        monologue3: 'https://storage.googleapis.com/secondbodyuploads/AudioEngineer.mp3',\n        monologue4: 'https://storage.googleapis.com/secondbodyuploads/IBM%20Garage.mp3',\n        monologue5: 'https://storage.googleapis.com/secondbodyuploads/Livestorm1.m4a',\n        monologue6: '',\n\n        dialogue1: 'https://storage.googleapis.com/secondbodyuploads/EthicsA%20(dialogue).mp3',\n        dialogue1B: 'https://storage.googleapis.com/secondbodyuploads/EthicsB%20(dialogue).mp3',\n        dialogue2: 'https://storage.googleapis.com/secondbodyuploads/CoursePass(A)%20(dialogue).mp3',\n        dialogue2B: 'https://storage.googleapis.com/secondbodyuploads/CoursePass(B)%20(dialogue).mp3',\n        dialogue3: '',\n        dialogue3B: '',\n        dialogue4: '',\n        dialogue4B: '',\n        dialogue5: '',\n        dialogue5B: '',\n        dialogue6: '',\n        dialogue6B: '',\n    }\n    window.audio.src = trackList[trackName];\n    console.log (`going to ${command} ${trackName}`);\n    window.audio[command]();\n\n   //TODO AUDIO TEST BELOW\n\n\n    //TODO: PUT BACK IN*********\n\n    if(command=='pause') {\n        window.audioSourceNode.disconnect();\n        return;\n    }\n\n    //create Audio Context and destination\n    if (typeof(window.audioCtx)=='undefined') {window.audioCtx = new (window.AudioContext || window.webkitAudioContext)();}\n    // let src=document.getElementById('MediaPlayer');\n    window.audioSourceNode = window.audioSourceNode || window.audioCtx.createMediaElementSource(window.audio);\n\n    //gain Node\n    let gainNode = window.audioCtx.createGain();\n    gainNode.gain.value=1;\n    //panner Node\n    var panNode = window.audioCtx.createStereoPanner();\n    panNode.pan.value=1;\n\n    //Pipe source through nodes to destination\n    window.audioSourceNode.connect(gainNode).connect(panNode).connect(window.audioCtx.destination);\n\n\n    //END TODO*******\n\n    \n\n}"]},"metadata":{},"sourceType":"module"}