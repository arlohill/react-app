{"ast":null,"code":"import _slicedToArray from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/arlosb/Documents/GitHub/new react app/test4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n * Call state is comprised of:\n * - \"Call items\" (inputs to the call, i.e. participants or shared screens)\n * - UI state that depends on call items (for now, just whether to show \"click allow\" message)\n *\n * Call items are keyed by id:\n * - \"local\" for the current participant\n * - A session id for each remote participant\n * - \"<id>-screen\" for each shared screen\n */var initialCallState={callItems:{local:{videoTrackState:null,audioTrackState:null}},clickAllowTimeoutFired:false,camOrMicError:null,fatalError:null};// --- Actions ---\n/**\n * CLICK_ALLOW_TIMEOUT action structure:\n * - type: string\n */var CLICK_ALLOW_TIMEOUT='CLICK_ALLOW_TIMEOUT';/**\n * PARTICIPANTS_CHANGE action structure:\n * - type: string\n * - participants: Object (from Daily callObject.participants())\n */var PARTICIPANTS_CHANGE='PARTICIPANTS_CHANGE';/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */var CAM_OR_MIC_ERROR='CAM_OR_MIC_ERROR';/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */var FATAL_ERROR='FATAL_ERROR';// --- Reducer and helpers --\nfunction callReducer(callState,action){switch(action.type){case CLICK_ALLOW_TIMEOUT:return _objectSpread(_objectSpread({},callState),{},{clickAllowTimeoutFired:true});case PARTICIPANTS_CHANGE:var callItems=getCallItems(action.participants);return _objectSpread(_objectSpread({},callState),{},{callItems:callItems});case CAM_OR_MIC_ERROR:return _objectSpread(_objectSpread({},callState),{},{camOrMicError:action.message});case FATAL_ERROR:return _objectSpread(_objectSpread({},callState),{},{fatalError:action.message});default:throw new Error();}}function getLocalCallItem(callItems){return callItems['local'];}function getCallItems(participants){var callItems=_objectSpread({},initialCallState.callItems);// Ensure we *always* have a local participant\nfor(var _i=0,_Object$entries=Object.entries(participants);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),id=_Object$entries$_i[0],participant=_Object$entries$_i[1];callItems[id]={videoTrackState:participant.tracks.video,audioTrackState:participant.tracks.audio};if(shouldIncludeScreenCallItem(participant)){callItems[id+'-screen']={videoTrackState:participant.tracks.screenVideo,audioTrackState:participant.tracks.screenAudio};}}return callItems;}function shouldIncludeScreenCallItem(participant){var trackStatesForInclusion=['loading','playable','interrupted'];return trackStatesForInclusion.includes(participant.tracks.screenVideo.state)||trackStatesForInclusion.includes(participant.tracks.screenAudio.state);}// --- Derived data ---\n// True if id corresponds to local participant (*not* their screen share)\nfunction isLocal(id){return id==='local';}function isScreenShare(id){return id.endsWith('-screen');}function containsScreenShare(callItems){return Object.keys(callItems).some(function(id){return isScreenShare(id);});}function getMessage(callState){function shouldShowClickAllow(){var localCallItem=getLocalCallItem(callState.callItems);var hasLoaded=localCallItem&&!localCallItem.isLoading;return!hasLoaded&&callState.clickAllowTimeoutFired;}var header=null;var detail=null;var isError=false;if(callState.fatalError){header=\"Fatal error: \".concat(callState.fatalError);isError=true;}else if(callState.camOrMicError){// header = `Camera or mic access error: ${callState.camOrMicError}`;\nheader=\"Error: This page can't access your camera or mic.\";detail=\"To troubleshoot in Chrome: To the right in your address bar, click the picture of the camera and select 'Always allow.' Hit enter and then refresh this page.\";// 'See https://help.daily.co/en/articles/2528184-unblock-camera-mic-access-on-a-computer to troubleshoot.';\nisError=true;}else if(shouldShowClickAllow()){header='Click \"Allow\" to enable camera and mic access';}else if(Object.keys(callState.callItems).length===1){header=\"You're here! ðŸ‘‹ \";detail=\"Waiting for everyone else...\";// if(window.myName) {\n//   detail = window.location.href.substring(0, window.location.href.indexOf(window.myName)-3);\n// } else {detail = window.location.href}\n}return header||detail?{header:header,detail:detail,isError:isError}:null;}export{initialCallState,CLICK_ALLOW_TIMEOUT,PARTICIPANTS_CHANGE,CAM_OR_MIC_ERROR,FATAL_ERROR,callReducer,isLocal,isScreenShare,containsScreenShare,getMessage};","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/components/Livestorm/Call/callState.js"],"names":["initialCallState","callItems","local","videoTrackState","audioTrackState","clickAllowTimeoutFired","camOrMicError","fatalError","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","callState","action","type","getCallItems","participants","message","Error","getLocalCallItem","Object","entries","id","participant","tracks","video","audio","shouldIncludeScreenCallItem","screenVideo","screenAudio","trackStatesForInclusion","includes","state","isLocal","isScreenShare","endsWith","containsScreenShare","keys","some","getMessage","shouldShowClickAllow","localCallItem","hasLoaded","isLoading","header","detail","isError","length"],"mappings":"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","sourcesContent":["/**\n * Call state is comprised of:\n * - \"Call items\" (inputs to the call, i.e. participants or shared screens)\n * - UI state that depends on call items (for now, just whether to show \"click allow\" message)\n *\n * Call items are keyed by id:\n * - \"local\" for the current participant\n * - A session id for each remote participant\n * - \"<id>-screen\" for each shared screen\n */\nconst initialCallState = {\n  callItems: {\n    local: {\n      videoTrackState: null,\n      audioTrackState: null,\n    },\n  },\n  clickAllowTimeoutFired: false,\n  camOrMicError: null,\n  fatalError: null,\n};\n\n// --- Actions ---\n\n/**\n * CLICK_ALLOW_TIMEOUT action structure:\n * - type: string\n */\nconst CLICK_ALLOW_TIMEOUT = 'CLICK_ALLOW_TIMEOUT';\n\n/**\n * PARTICIPANTS_CHANGE action structure:\n * - type: string\n * - participants: Object (from Daily callObject.participants())\n */\nconst PARTICIPANTS_CHANGE = 'PARTICIPANTS_CHANGE';\n\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\nconst CAM_OR_MIC_ERROR = 'CAM_OR_MIC_ERROR';\n\n/**\n * CAM_OR_MIC_ERROR action structure:\n * - type: string\n * - message: string\n */\nconst FATAL_ERROR = 'FATAL_ERROR';\n\n// --- Reducer and helpers --\n\nfunction callReducer(callState, action) {\n  switch (action.type) {\n    case CLICK_ALLOW_TIMEOUT:\n      return {\n        ...callState,\n        clickAllowTimeoutFired: true,\n      };\n    case PARTICIPANTS_CHANGE:\n      const callItems = getCallItems(action.participants);\n      return {\n        ...callState,\n        callItems,\n      };\n    case CAM_OR_MIC_ERROR:\n      return { ...callState, camOrMicError: action.message };\n    case FATAL_ERROR:\n      return { ...callState, fatalError: action.message };\n    default:\n      throw new Error();\n  }\n}\n\nfunction getLocalCallItem(callItems) {\n  return callItems['local'];\n}\n\nfunction getCallItems(participants) {\n  let callItems = { ...initialCallState.callItems }; // Ensure we *always* have a local participant\n  for (const [id, participant] of Object.entries(participants)) {\n\n    \n      callItems[id] = {\n        videoTrackState: participant.tracks.video,\n        audioTrackState: participant.tracks.audio,\n      };\n    \n    \n    if (shouldIncludeScreenCallItem(participant)) {\n      callItems[id + '-screen'] = {\n        videoTrackState: participant.tracks.screenVideo,\n        audioTrackState: participant.tracks.screenAudio,\n      };\n    }\n  }\n  return callItems;\n}\n\nfunction shouldIncludeScreenCallItem(participant) {\n  const trackStatesForInclusion = ['loading', 'playable', 'interrupted'];\n  return (\n    trackStatesForInclusion.includes(participant.tracks.screenVideo.state) ||\n    trackStatesForInclusion.includes(participant.tracks.screenAudio.state)\n  );\n}\n\n// --- Derived data ---\n\n// True if id corresponds to local participant (*not* their screen share)\nfunction isLocal(id) {\n  return id === 'local';\n}\n\nfunction isScreenShare(id) {\n  return id.endsWith('-screen');\n}\n\nfunction containsScreenShare(callItems) {\n  return Object.keys(callItems).some((id) => isScreenShare(id));\n}\n\nfunction getMessage(callState) {\n  function shouldShowClickAllow() {\n    const localCallItem = getLocalCallItem(callState.callItems);\n    const hasLoaded = localCallItem && !localCallItem.isLoading;\n    return !hasLoaded && callState.clickAllowTimeoutFired;\n  }\n\n  let header = null;\n  let detail = null;\n  let isError = false;\n  if (callState.fatalError) {\n    header = `Fatal error: ${callState.fatalError}`;\n    isError = true;\n  } else if (callState.camOrMicError) {\n    // header = `Camera or mic access error: ${callState.camOrMicError}`;\n    header = `Error: This page can't access your camera or mic.`;\n    detail =\n      \"To troubleshoot in Chrome: To the right in your address bar, click the picture of the camera and select 'Always allow.' Hit enter and then refresh this page.\"\n      // 'See https://help.daily.co/en/articles/2528184-unblock-camera-mic-access-on-a-computer to troubleshoot.';\n    isError = true;\n  } else if (shouldShowClickAllow()) {\n    header = 'Click \"Allow\" to enable camera and mic access';\n  } else if (Object.keys(callState.callItems).length === 1) {\n    header = \"You're here! ðŸ‘‹ \";\n    detail = \"Waiting for everyone else...\"\n    // if(window.myName) {\n    //   detail = window.location.href.substring(0, window.location.href.indexOf(window.myName)-3);\n    // } else {detail = window.location.href}\n    \n  }\n  return header || detail ? { header, detail, isError } : null;\n}\n\nexport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n};\n"]},"metadata":{},"sourceType":"module"}