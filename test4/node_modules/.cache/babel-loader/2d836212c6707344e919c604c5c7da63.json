{"ast":null,"code":"var _jsxFileName = \"/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js\";\nimport React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext'; // import MyInfoContext from '../../MyInfoContext';\n// import SessionContext from '../../SessionContext';\n\nimport CallMessage from '../CallMessage/CallMessage';\nimport { initialCallState, CLICK_ALLOW_TIMEOUT, PARTICIPANTS_CHANGE, CAM_OR_MIC_ERROR, FATAL_ERROR, callReducer, isLocal, isScreenShare, containsScreenShare, getMessage } from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext); // const [ sessionState, setSessionState ] = useContext(SessionContext);\n  // const [ myInfo, setMyInfo ] = useContext(MyInfoContext);\n\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n\n  window.updateCall = () => {\n    forceUpdate();\n  };\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['participant-joined', 'participant-updated', 'participant-left'];\n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants()\n      });\n\n      if (e && e.action != 'participant-updated') {\n        setSubscriptions(callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n        let thisUserName = e.participant.user_name;\n        let thisSessionID = e.participant.session_id;\n\n        if (e.action == \"participant-joined\") {\n          let SessionIDLabel = thisUserName + \"_SessionID\";\n          window[SessionIDLabel] = thisSessionID;\n          window.userList.push(thisUserName);\n\n          if (thisUserName == 'Admin') {\n            window.adminPresent = true;\n          }\n        } else if (e.action == \"participant-left\") {\n          //remove from userList\n          let index = window.userList.indexOf(thisUserName);\n\n          if (index > -1) {\n            window.userList.splice(index, 1);\n          }\n\n          if (window.userList.indexOf('Admin') == -1) {\n            window.adminPresent = false;\n          }\n        }\n\n        console.log('Admin present: ' + window.adminPresent);\n        console.log('UserList: ' + window.userList);\n      }\n    } // Use initial state\n\n\n    handleNewParticipantsState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message: event && event.errorMsg && event.errorMsg.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: e && e.errorMsg || 'Unknown'\n      });\n    } // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n\n    callObject.on('error', handleErrorEvent);\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({\n        type: CLICK_ALLOW_TIMEOUT\n      });\n    }, 2500);\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n  useEffect(() => {\n    window.numberOfSubs && (window.numberOfSubs = window.currentSubs.length);\n  }, [window.currentSubs]);\n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n      const isAudioOnly = () => {\n        if (!callItem.audioTrackState || !callItem.videoTrackState) {\n          return;\n        }\n\n        return callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed;\n      };\n\n      const isLarge = isScreenShare(id) || !isLocal(id) && !containsScreenShare(callState.callItems) || isLocal(id) && window.currentSubs && window.currentSubs.length > 1; //videoTrackState()\n\n      const tile = /*#__PURE__*/React.createElement(Tile, {\n        key: id,\n        videoTrackState: callItem.videoTrackState,\n        audioTrackState: callItem.audioTrackState,\n        isLocalPerson: isLocal(id),\n        isAudioOnly: isAudioOnly(),\n        isLarge: isLarge,\n        disableCornerMessage: isScreenShare(id) // onClick={\n        //   isLocal(id)\n        //     ? null\n        //     : () => {\n        //         sendHello(id);\n        //       }\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }\n      });\n\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n\n  useEffect(() => {\n    console.log('re-rendered'); // console.log('Userlist: ' + window.userList);\n\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n\n    window.add = function (n = 1) {\n      for (let i = 0; i < n; i++) {\n        callObject.addFakeParticipant();\n      }\n    };\n  }); // attach callState to window for debugging\n\n  useEffect(() => {\n    window.callState = callState;\n  }, [callState]);\n  const message = getMessage(callState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"call\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `large-tiles count-${window.currentSubs && window.currentSubs.length + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, !message ? largeTiles : null\n  /* Avoid showing large tiles to make room for the message */\n  ), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"small-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }, smallTiles), message && /*#__PURE__*/React.createElement(CallMessage, {\n    header: message.header,\n    detail: message.detail,\n    isError: message.isError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test1/src/components/Call/Call.js"],"names":["React","useEffect","useContext","useReducer","useCallback","Tile","CallObjectContext","CallMessage","initialCallState","CLICK_ALLOW_TIMEOUT","PARTICIPANTS_CHANGE","CAM_OR_MIC_ERROR","FATAL_ERROR","callReducer","isLocal","isScreenShare","containsScreenShare","getMessage","logDailyEvent","setSubscriptions","useForceUpdate","value","setValue","useState","Call","callObject","callState","dispatch","forceUpdate","window","updateCall","events","handleNewParticipantsState","e","type","participants","action","console","log","thisUserName","participant","user_name","thisSessionID","session_id","SessionIDLabel","userList","push","adminPresent","index","indexOf","splice","event","on","cleanup","off","handleCameraErrorEvent","message","errorMsg","handleErrorEvent","t","setTimeout","clearTimeout","numberOfSubs","currentSubs","length","getTiles","largeTiles","smallTiles","Object","entries","callItems","forEach","id","callItem","isAudioOnly","audioTrackState","videoTrackState","subscribed","isLarge","tile","smallTales","add","n","i","addFakeParticipant","header","detail","isError"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer, useCallback } from 'react';\nimport './Call.css';\nimport Tile from '../Tile/Tile';\nimport CallObjectContext from '../../CallObjectContext';\n// import MyInfoContext from '../../MyInfoContext';\n// import SessionContext from '../../SessionContext';\nimport CallMessage from '../CallMessage/CallMessage';\nimport {\n  initialCallState,\n  CLICK_ALLOW_TIMEOUT,\n  PARTICIPANTS_CHANGE,\n  CAM_OR_MIC_ERROR,\n  FATAL_ERROR,\n  callReducer,\n  isLocal,\n  isScreenShare,\n  containsScreenShare,\n  getMessage,\n} from './callState';\nimport { logDailyEvent } from '../../logUtils';\nimport setSubscriptions from '../../hooks/setSubscriptions';\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Call() {\n  const callObject = useContext(CallObjectContext);\n  // const [ sessionState, setSessionState ] = useContext(SessionContext);\n  // const [ myInfo, setMyInfo ] = useContext(MyInfoContext);\n  const [callState, dispatch] = useReducer(callReducer, initialCallState);\n  const forceUpdate = useForceUpdate();\n\n  window.updateCall = () => {\n    forceUpdate();\n  }\n\n  /**\n   * Start listening for participant changes, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = [\n      'participant-joined',\n      'participant-updated',\n      'participant-left',\n    ];\n\n   \n\n    function handleNewParticipantsState(e) {\n      e && logDailyEvent(e);\n      dispatch({\n        type: PARTICIPANTS_CHANGE,\n        participants: callObject.participants(),\n      });\n      if(e && e.action!='participant-updated') {\n        setSubscriptions(callObject);\n        console.log(\"setting subscriptions because: \" + e.action);\n    \n          \n          let thisUserName = e.participant.user_name;\n          let thisSessionID = e.participant.session_id;\n          if (e.action==\"participant-joined\") {\n            let SessionIDLabel = thisUserName + \"_SessionID\";\n            window[SessionIDLabel] = thisSessionID;\n\n              window.userList.push(thisUserName);\n    \n\n            if (thisUserName=='Admin') {\n                window.adminPresent=true;\n            }\n            \n          } else if (e.action==\"participant-left\") {\n            //remove from userList\n            let index = window.userList.indexOf(thisUserName);\n            if (index > -1) {\n            window.userList.splice(index, 1);\n            }\n            if (window.userList.indexOf('Admin')==-1) {\n              window.adminPresent=false;\n            }\n           \n          }\n\n          console.log('Admin present: ' + window.adminPresent);\n          console.log('UserList: ' + window.userList);\n      }\n      \n    }\n\n    // Use initial state\n    handleNewParticipantsState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewParticipantsState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewParticipantsState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for call errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleCameraErrorEvent(event) {\n      logDailyEvent(event);\n      dispatch({\n        type: CAM_OR_MIC_ERROR,\n        message:\n          (event && event.errorMsg && event.errorMsg.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no camera error when callObject\n    // is first assigned.\n\n    callObject.on('camera-error', handleCameraErrorEvent);\n\n    return function cleanup() {\n      callObject.off('camera-error', handleCameraErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start listening for fatal errors, when the callObject is set.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    function handleErrorEvent(e) {\n      logDailyEvent(e);\n      dispatch({\n        type: FATAL_ERROR,\n        message: (e && e.errorMsg) || 'Unknown',\n      });\n    }\n\n    // We're making an assumption here: there is no error when callObject is\n    // first assigned.\n\n    callObject.on('error', handleErrorEvent);\n\n    return function cleanup() {\n      callObject.off('error', handleErrorEvent);\n    };\n  }, [callObject]);\n\n  /**\n   * Start a timer to show the \"click allow\" message, when the component mounts.\n   */\n  useEffect(() => {\n    const t = setTimeout(() => {\n      dispatch({ type: CLICK_ALLOW_TIMEOUT });\n    }, 2500);\n\n    return function cleanup() {\n      clearTimeout(t);\n    };\n  }, []);\n\n  useEffect(()=>{\n    window.numberOfSubs && (window.numberOfSubs=window.currentSubs.length);\n  },[window.currentSubs])\n\n\n\n \n\n  function getTiles() {\n    let largeTiles = [];\n    let smallTiles = [];\n    Object.entries(callState.callItems).forEach(([id, callItem]) => {\n\n\n      const isAudioOnly = () => {\n        if(!callItem.audioTrackState || !callItem.videoTrackState) {return}\n        return (callItem.audioTrackState.subscribed && !callItem.videoTrackState.subscribed);\n      }\n\n      const isLarge =\n        isScreenShare(id) ||\n        (!isLocal(id) && !containsScreenShare(callState.callItems)) \n        || (isLocal(id) && window.currentSubs && window.currentSubs.length>1)   //videoTrackState()\n\n        \n      const tile = (\n        <Tile\n          key={id}\n          videoTrackState={callItem.videoTrackState}\n          audioTrackState={callItem.audioTrackState}\n          isLocalPerson={isLocal(id)}\n          isAudioOnly={isAudioOnly()}\n          isLarge={isLarge}\n          disableCornerMessage={isScreenShare(id)}\n          // onClick={\n          //   isLocal(id)\n          //     ? null\n          //     : () => {\n          //         sendHello(id);\n          //       }\n          // }\n        />\n      );\n      if (isLarge) {\n        largeTiles.push(tile);\n      } else {\n        smallTiles.push(tile);\n      }\n    });\n    \n    return [largeTiles, smallTiles];\n  }\n\n  const [largeTiles, smallTiles] = getTiles();\n\n  \n  /**\n   * DELETE: Attached tiles objects to window for debugging purposes.\n   */\n  useEffect(() => {\n    console.log('re-rendered');\n    // console.log('Userlist: ' + window.userList);\n    window.largeTiles = largeTiles;\n    window.smallTales = smallTiles;\n    window.add = function(n=1) {\n      for(let i=0;i<n;i++) {\n        callObject.addFakeParticipant()\n      }\n    };\n    \n  }); \n\n\n   // attach callState to window for debugging\n   useEffect(() => {\n    window.callState = callState;\n  }, [callState]); \n\n\n  const message = getMessage(callState);\n  return (\n    <div className=\"call\">\n                                      {/* add # of tiles to class name. alternative: {largeTiles.length}*/}\n      <div className={`large-tiles count-${window.currentSubs && window.currentSubs.length+1}`}>   \n        {\n          !message\n            ? largeTiles\n            : null /* Avoid showing large tiles to make room for the message */\n        }\n      </div>\n      <div className=\"small-tiles\">{smallTiles}</div>\n      {message && (\n        <CallMessage\n          header={message.header}\n          detail={message.detail}\n          isError={message.isError}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}