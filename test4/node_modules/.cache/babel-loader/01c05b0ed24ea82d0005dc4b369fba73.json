{"ast":null,"code":"import { useContext, useEffect } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext';\n\nfunction useUpdateUserList() {\n  const callObject = useContext(CallObjectContext);\n  const {\n    session\n  } = useContext(SessionStateContext);\n  const [sessionState, setSessionState] = session;\n  const {\n    myStateArray,\n    // setName, \n    // setRole,\n    setUserList,\n    // setViewMode,\n    // setCamOnAtSessionStart,\n    // setMicOnAtSessionStart,\n    // setAmAdmin, \n    setAdminPresent\n  } = useContext(MyContext);\n\n  if (!callObject) {\n    return;\n  }\n\n  useEffect(() => {\n    let userListIncludesAdmin = false; //default\n\n    let ps = callObject.participants();\n    let workingUserList = {\n      names: [],\n      sessionIdFor: {}\n    };\n\n    for (const p in ps) {\n      let thisUserName = ps[p].user_name;\n      let thisSessionId = ps[p].session_id;\n      workingUserList.names.push(thisUserName); //add each user_name with its sessionID to UserList\n\n      workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n\n      if (thisUserName.includes('_Admin') && p !== 'local') {\n        userListIncludesAdmin = true;\n      }\n    }\n\n    ;\n    userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present'); // setAdminPresent(userListIncludesAdmin);\n\n    workingUserList.names.sort(); //alphebetize that list \n\n    console.log(`now the userList is: ${workingUserList.names}`); //print userList\n\n    setUserList(workingUserList);\n    return userListIncludesAdmin;\n  }, []);\n}\n\nexport default useUpdateUserList;","map":{"version":3,"sources":["/Users/arlosb/Documents/GitHub/new react app/test4/src/hooks/useUpdateUserList.js"],"names":["useContext","useEffect","SessionStateContext","MyContext","CallObjectContext","useUpdateUserList","callObject","session","sessionState","setSessionState","myStateArray","setUserList","setAdminPresent","userListIncludesAdmin","ps","participants","workingUserList","names","sessionIdFor","p","thisUserName","user_name","thisSessionId","session_id","push","includes","console","log","sort"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAEA,SAASC,iBAAT,GAA6B;AAEzB,QAAMC,UAAU,GAAGN,UAAU,CAACI,iBAAD,CAA7B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAcP,UAAU,CAACE,mBAAD,CAA9B;AACA,QAAM,CAAEM,YAAF,EAAeC,eAAf,IAAkCF,OAAxC;AACA,QAAM;AAAEG,IAAAA,YAAF;AACF;AACA;AACAC,IAAAA,WAHE;AAIF;AACA;AACA;AACA;AACAC,IAAAA;AARE,MASEZ,UAAU,CAACG,SAAD,CATlB;;AAWA,MAAG,CAACG,UAAJ,EAAgB;AAAC;AAAO;;AAExBL,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIY,qBAAqB,GAAC,KAA1B,CADW,CACwB;;AACnC,QAAIC,EAAE,GAACR,UAAU,CAACS,YAAX,EAAP;AACA,QAAIC,eAAe,GAAG;AAClBC,MAAAA,KAAK,EAAE,EADW;AAElBC,MAAAA,YAAY,EAAE;AAFI,KAAtB;;AAKA,SAAK,MAAMC,CAAX,IAAgBL,EAAhB,EAAoB;AAChB,UAAIM,YAAY,GAAGN,EAAE,CAACK,CAAD,CAAF,CAAME,SAAzB;AACA,UAAIC,aAAa,GAAGR,EAAE,CAACK,CAAD,CAAF,CAAMI,UAA1B;AACAP,MAAAA,eAAe,CAACC,KAAhB,CAAsBO,IAAtB,CAA2BJ,YAA3B,EAHgB,CAG+B;;AAC/CJ,MAAAA,eAAe,CAACE,YAAhB,CAA6BE,YAA7B,IAA6CE,aAA7C;;AACA,UAAIF,YAAY,CAACK,QAAb,CAAsB,QAAtB,KAAmCN,CAAC,KAAG,OAA3C,EAAoD;AAChDN,QAAAA,qBAAqB,GAAG,IAAxB;AACH;AACJ;;AAAA;AAEDA,IAAAA,qBAAqB,GAAGa,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAH,GAAqCD,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAA1D,CAlBW,CAmBX;;AACAX,IAAAA,eAAe,CAACC,KAAhB,CAAsBW,IAAtB,GApBW,CAoByB;;AACpCF,IAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBX,eAAe,CAACC,KAAM,EAA1D,EArBW,CAqBoD;;AAC/DN,IAAAA,WAAW,CAACK,eAAD,CAAX;AACA,WAAOH,qBAAP;AAEH,GAzBQ,EAyBP,EAzBO,CAAT;AA6BH;;AAED,eAAeR,iBAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport SessionStateContext from '../SessionStateContext';\nimport MyContext from '../MyContext';\nimport CallObjectContext from '../CallObjectContext'\n\nfunction useUpdateUserList() {\n\n    const callObject = useContext(CallObjectContext);\n    const { session } = useContext(SessionStateContext);\n    const [ sessionState,setSessionState] = session;    \n    const { myStateArray, \n        // setName, \n        // setRole,\n        setUserList,\n        // setViewMode,\n        // setCamOnAtSessionStart,\n        // setMicOnAtSessionStart,\n        // setAmAdmin, \n        setAdminPresent,\n        } = useContext(MyContext);\n\n    if(!callObject) {return}\n\n    useEffect(()=> {\n        let userListIncludesAdmin=false;   //default\n        let ps=callObject.participants(); \n        let workingUserList = {\n            names: [],\n            sessionIdFor: {},\n            }\n    \n        for (const p in ps) {\n            let thisUserName = ps[p].user_name;\n            let thisSessionId = ps[p].session_id;\n            workingUserList.names.push(thisUserName);      //add each user_name with its sessionID to UserList\n            workingUserList.sessionIdFor[thisUserName] = thisSessionId;\n            if (thisUserName.includes('_Admin') && p!=='local') {\n                userListIncludesAdmin = true;\n            } \n        };\n    \n        userListIncludesAdmin ? console.log('Admin IS present') : console.log('Admin IS NOT present');\n        // setAdminPresent(userListIncludesAdmin);\n        workingUserList.names.sort();       //alphebetize that list \n        console.log(`now the userList is: ${workingUserList.names}`);  //print userList\n        setUserList(workingUserList);\n        return(userListIncludesAdmin);\n\n    },[]);\n\n    \n\n} \n\nexport default useUpdateUserList;\n"]},"metadata":{},"sourceType":"module"}